// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.2
// source: goten/annotations/validate.proto

package validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Validation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Rules:
	//
	//	*Validation_Decimal
	//	*Validation_Signed
	//	*Validation_Unsigned
	//	*Validation_Bool
	//	*Validation_String_
	//	*Validation_Bytes
	//	*Validation_Enum
	//	*Validation_Repeated
	//	*Validation_Map
	//	*Validation_Timestamp
	//	*Validation_Duration
	//	*Validation_Filter
	Rules  isValidation_Rules `protobuf_oneof:"rules"`
	Object *ObjectRules       `protobuf:"bytes,12,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *Validation) Reset() {
	*x = Validation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validation) ProtoMessage() {}

func (x *Validation) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validation.ProtoReflect.Descriptor instead.
func (*Validation) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{0}
}

func (m *Validation) GetRules() isValidation_Rules {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (x *Validation) GetDecimal() *DecimalRules {
	if x, ok := x.GetRules().(*Validation_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Validation) GetSigned() *SignedRules {
	if x, ok := x.GetRules().(*Validation_Signed); ok {
		return x.Signed
	}
	return nil
}

func (x *Validation) GetUnsigned() *UnsignedRules {
	if x, ok := x.GetRules().(*Validation_Unsigned); ok {
		return x.Unsigned
	}
	return nil
}

func (x *Validation) GetBool() *BoolRules {
	if x, ok := x.GetRules().(*Validation_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *Validation) GetString_() *StringRules {
	if x, ok := x.GetRules().(*Validation_String_); ok {
		return x.String_
	}
	return nil
}

func (x *Validation) GetBytes() *BytesRules {
	if x, ok := x.GetRules().(*Validation_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *Validation) GetEnum() *EnumRules {
	if x, ok := x.GetRules().(*Validation_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *Validation) GetRepeated() *RepeatedRules {
	if x, ok := x.GetRules().(*Validation_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (x *Validation) GetMap() *MapRules {
	if x, ok := x.GetRules().(*Validation_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Validation) GetTimestamp() *TimestampRules {
	if x, ok := x.GetRules().(*Validation_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Validation) GetDuration() *DurationRules {
	if x, ok := x.GetRules().(*Validation_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Validation) GetFilter() *FilterRules {
	if x, ok := x.GetRules().(*Validation_Filter); ok {
		return x.Filter
	}
	return nil
}

func (x *Validation) GetObject() *ObjectRules {
	if x != nil {
		return x.Object
	}
	return nil
}

type isValidation_Rules interface {
	isValidation_Rules()
}

type Validation_Decimal struct {
	Decimal *DecimalRules `protobuf:"bytes,1,opt,name=decimal,proto3,oneof"`
}

type Validation_Signed struct {
	Signed *SignedRules `protobuf:"bytes,2,opt,name=signed,proto3,oneof"`
}

type Validation_Unsigned struct {
	Unsigned *UnsignedRules `protobuf:"bytes,3,opt,name=unsigned,proto3,oneof"`
}

type Validation_Bool struct {
	Bool *BoolRules `protobuf:"bytes,4,opt,name=bool,proto3,oneof"`
}

type Validation_String_ struct {
	String_ *StringRules `protobuf:"bytes,5,opt,name=string,proto3,oneof"`
}

type Validation_Bytes struct {
	Bytes *BytesRules `protobuf:"bytes,6,opt,name=bytes,proto3,oneof"`
}

type Validation_Enum struct {
	Enum *EnumRules `protobuf:"bytes,7,opt,name=enum,proto3,oneof"`
}

type Validation_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,8,opt,name=repeated,proto3,oneof"`
}

type Validation_Map struct {
	Map *MapRules `protobuf:"bytes,9,opt,name=map,proto3,oneof"`
}

type Validation_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,10,opt,name=timestamp,proto3,oneof"`
}

type Validation_Duration struct {
	Duration *DurationRules `protobuf:"bytes,11,opt,name=duration,proto3,oneof"`
}

type Validation_Filter struct {
	Filter *FilterRules `protobuf:"bytes,20,opt,name=filter,proto3,oneof"`
}

func (*Validation_Decimal) isValidation_Rules() {}

func (*Validation_Signed) isValidation_Rules() {}

func (*Validation_Unsigned) isValidation_Rules() {}

func (*Validation_Bool) isValidation_Rules() {}

func (*Validation_String_) isValidation_Rules() {}

func (*Validation_Bytes) isValidation_Rules() {}

func (*Validation_Enum) isValidation_Rules() {}

func (*Validation_Repeated) isValidation_Rules() {}

func (*Validation_Map) isValidation_Rules() {}

func (*Validation_Timestamp) isValidation_Rules() {}

func (*Validation_Duration) isValidation_Rules() {}

func (*Validation_Filter) isValidation_Rules() {}

type FilterRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ensures filter is non-empty
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *FilterRules) Reset() {
	*x = FilterRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterRules) ProtoMessage() {}

func (x *FilterRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterRules.ProtoReflect.Descriptor instead.
func (*FilterRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{1}
}

func (x *FilterRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type DecimalRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Lt specifies that the field value must be less than the specified value.
	Lt *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Lte specifies that the field value must be less than or equal to the
	// specified value.
	Lte *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Gt specifies that the field value must be greater than the specified value.
	Gt *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Gte specifies that the field value must be greater than or equal to the
	// specified value.
	Gte *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf []float64 `protobuf:"fixed64,6,rep,packed,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf []float64 `protobuf:"fixed64,7,rep,packed,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
}

func (x *DecimalRules) Reset() {
	*x = DecimalRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecimalRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecimalRules) ProtoMessage() {}

func (x *DecimalRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecimalRules.ProtoReflect.Descriptor instead.
func (*DecimalRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{2}
}

func (x *DecimalRules) GetConst() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *DecimalRules) GetLt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DecimalRules) GetLte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *DecimalRules) GetGt() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DecimalRules) GetGte() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *DecimalRules) GetAnyOf() []float64 {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *DecimalRules) GetNoneOf() []float64 {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

type SignedRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Lt specifies that the field value must be less than the specified value.
	Lt *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Lte specifies that the field value must be less than or equal to the
	// specified value.
	Lte *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Gt specifies that the field value must be greater than the specified value.
	Gt *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Gte specifies that the field value must be greater than or equal to the
	// specified value.
	Gte *wrapperspb.Int64Value `protobuf:"bytes,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf []int64 `protobuf:"varint,6,rep,packed,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf []int64 `protobuf:"varint,7,rep,packed,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
}

func (x *SignedRules) Reset() {
	*x = SignedRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedRules) ProtoMessage() {}

func (x *SignedRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedRules.ProtoReflect.Descriptor instead.
func (*SignedRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{3}
}

func (x *SignedRules) GetConst() *wrapperspb.Int64Value {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *SignedRules) GetLt() *wrapperspb.Int64Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *SignedRules) GetLte() *wrapperspb.Int64Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *SignedRules) GetGt() *wrapperspb.Int64Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *SignedRules) GetGte() *wrapperspb.Int64Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *SignedRules) GetAnyOf() []int64 {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *SignedRules) GetNoneOf() []int64 {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

type UnsignedRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Lt specifies that the field value must be less than the specified value.
	Lt *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=lt,proto3" json:"lt,omitempty"`
	// Lte specifies that the field value must be less than or equal to the
	// specified value.
	Lte *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	// Gt specifies that the field value must be greater than the specified value.
	Gt *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	// Gte specifies that the field value must be greater than or equal to the
	// specified value.
	Gte *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=gte,proto3" json:"gte,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf []uint64 `protobuf:"varint,6,rep,packed,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf []uint64 `protobuf:"varint,7,rep,packed,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
}

func (x *UnsignedRules) Reset() {
	*x = UnsignedRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedRules) ProtoMessage() {}

func (x *UnsignedRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedRules.ProtoReflect.Descriptor instead.
func (*UnsignedRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{4}
}

func (x *UnsignedRules) GetConst() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *UnsignedRules) GetLt() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *UnsignedRules) GetLte() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *UnsignedRules) GetGt() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *UnsignedRules) GetGte() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *UnsignedRules) GetAnyOf() []uint64 {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *UnsignedRules) GetNoneOf() []uint64 {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

type BoolRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const bool `protobuf:"varint,1,opt,name=const,proto3" json:"const,omitempty"`
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRules.ProtoReflect.Descriptor instead.
func (*BoolRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{5}
}

func (x *BoolRules) GetConst() bool {
	if x != nil {
		return x.Const
	}
	return false
}

type StringRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const string `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// Len specifies the exact number of Unicode code point that this field must
	// have. Note that this does not have to be equal to the number of bytes in
	// the string.
	Len *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=len,proto3" json:"len,omitempty"`
	// MinLen specifies the lower bound on number of Unicode code point that this
	// field must have. Note that this does not have to be equal to the number of
	// bytes in the string.
	MinLen *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	// MaxLen specifies the upper bound on number of Unicode code point that this
	// field must have. Note that this does not have to be equal to the number of
	// bytes in the string.
	MaxLen *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	// BytesLen specifies the exact number of bytes this field must have.
	BytesLen *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=bytes_len,json=bytesLen,proto3" json:"bytes_len,omitempty"`
	// MinBytesLen specifies the lower bound on number of bytes this field must
	// have.
	MinBytesLen *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=min_bytes_len,json=minBytesLen,proto3" json:"min_bytes_len,omitempty"`
	// MaxBytesLen specifies the upper bound on number of bytes this field must
	// have.
	MaxBytesLen *wrapperspb.UInt64Value `protobuf:"bytes,7,opt,name=max_bytes_len,json=maxBytesLen,proto3" json:"max_bytes_len,omitempty"`
	// Prefix requires that the field must start with given string
	Prefix string `protobuf:"bytes,8,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix requires that the field must end with given string
	Suffix string `protobuf:"bytes,9,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Format specifies a specific format that the field should be validated
	// against
	Format *Format `protobuf:"bytes,10,opt,name=format,proto3" json:"format,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf []string `protobuf:"bytes,11,rep,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf []string `protobuf:"bytes,12,rep,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
	// ensures string value is non-empty. Equivalent to `min_len: 1`, but
	// generates different error message.
	Required bool `protobuf:"varint,13,opt,name=required,proto3" json:"required,omitempty"`
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{6}
}

func (x *StringRules) GetConst() string {
	if x != nil {
		return x.Const
	}
	return ""
}

func (x *StringRules) GetLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Len
	}
	return nil
}

func (x *StringRules) GetMinLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinLen
	}
	return nil
}

func (x *StringRules) GetMaxLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxLen
	}
	return nil
}

func (x *StringRules) GetBytesLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.BytesLen
	}
	return nil
}

func (x *StringRules) GetMinBytesLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinBytesLen
	}
	return nil
}

func (x *StringRules) GetMaxBytesLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxBytesLen
	}
	return nil
}

func (x *StringRules) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *StringRules) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *StringRules) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *StringRules) GetAnyOf() []string {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *StringRules) GetNoneOf() []string {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

func (x *StringRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

type BytesRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const []byte `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// BytesLen specifies the exact number of bytes this field must have.
	Len *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=len,proto3" json:"len,omitempty"`
	// MinLen specifies the lower bound on number of bytes this field must have.
	MinLen *wrapperspb.UInt64Value `protobuf:"bytes,3,opt,name=min_len,json=minLen,proto3" json:"min_len,omitempty"`
	// MaxLen specifies the upper bound on number of bytes this field must have.
	MaxLen *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=max_len,json=maxLen,proto3" json:"max_len,omitempty"`
	// Prefix requires that the field must start with given string
	Prefix string `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Prefix requires that the field must end with given string
	Suffix string `protobuf:"bytes,6,opt,name=suffix,proto3" json:"suffix,omitempty"`
	// Format specifies a specific format that the field should be validated
	// against
	Format *Format `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf [][]byte `protobuf:"bytes,8,rep,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf [][]byte `protobuf:"bytes,9,rep,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
}

func (x *BytesRules) Reset() {
	*x = BytesRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRules) ProtoMessage() {}

func (x *BytesRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRules.ProtoReflect.Descriptor instead.
func (*BytesRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{7}
}

func (x *BytesRules) GetConst() []byte {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *BytesRules) GetLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Len
	}
	return nil
}

func (x *BytesRules) GetMinLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinLen
	}
	return nil
}

func (x *BytesRules) GetMaxLen() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxLen
	}
	return nil
}

func (x *BytesRules) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *BytesRules) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *BytesRules) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *BytesRules) GetAnyOf() [][]byte {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *BytesRules) GetNoneOf() [][]byte {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

type Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pattern specifies a regex in RE2 syntax that whole field must match
	// against.
	Regex string `protobuf:"bytes,8,opt,name=regex,proto3" json:"regex,omitempty"`
	// Specifies that the field must contain a valid email address
	Email bool `protobuf:"varint,11,opt,name=email,proto3" json:"email,omitempty"`
	// Specifies that the field must be a valid address (IP or Hostname)
	Address bool `protobuf:"varint,12,opt,name=address,proto3" json:"address,omitempty"`
	// Specifies that the field must be a valid hostname (RFC 1034)
	Hostname bool `protobuf:"varint,13,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Specifies that the field must be a valid IPv4 or IPV6 address
	Ip bool `protobuf:"varint,14,opt,name=ip,proto3" json:"ip,omitempty"`
	// Specifies that the field must be a valid IPv4 address
	Ipv4 bool `protobuf:"varint,15,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	// Specifies that the field must be a valid IPv6 address
	Ipv6 bool `protobuf:"varint,16,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	// Specifies that the field must be a valid absolute URI (RFC 3986)
	Uri bool `protobuf:"varint,17,opt,name=uri,proto3" json:"uri,omitempty"`
	// Specifies that the field must be a valid URI reference (either absolute or
	// relative)
	UriRef bool `protobuf:"varint,18,opt,name=uri_ref,json=uriRef,proto3" json:"uri_ref,omitempty"`
	// Specifies that the field must be a valid UUID (RFC 4122)
	Uuid bool `protobuf:"varint,19,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Specifies that the field must contain a valid PEM encoded crypto primitive
	Pem bool `protobuf:"varint,20,opt,name=pem,proto3" json:"pem,omitempty"`
}

func (x *Format) Reset() {
	*x = Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Format) ProtoMessage() {}

func (x *Format) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Format.ProtoReflect.Descriptor instead.
func (*Format) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{8}
}

func (x *Format) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *Format) GetEmail() bool {
	if x != nil {
		return x.Email
	}
	return false
}

func (x *Format) GetAddress() bool {
	if x != nil {
		return x.Address
	}
	return false
}

func (x *Format) GetHostname() bool {
	if x != nil {
		return x.Hostname
	}
	return false
}

func (x *Format) GetIp() bool {
	if x != nil {
		return x.Ip
	}
	return false
}

func (x *Format) GetIpv4() bool {
	if x != nil {
		return x.Ipv4
	}
	return false
}

func (x *Format) GetIpv6() bool {
	if x != nil {
		return x.Ipv6
	}
	return false
}

func (x *Format) GetUri() bool {
	if x != nil {
		return x.Uri
	}
	return false
}

func (x *Format) GetUriRef() bool {
	if x != nil {
		return x.UriRef
	}
	return false
}

func (x *Format) GetUuid() bool {
	if x != nil {
		return x.Uuid
	}
	return false
}

func (x *Format) GetPem() bool {
	if x != nil {
		return x.Pem
	}
	return false
}

type EnumRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Const specifies the exact value this field needs to have.
	Const *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=const,proto3" json:"const,omitempty"`
	// DefinedOnly specifies that this field must be only one of the defined
	// values for this enum, failing on any undefined value.
	DefinedOnly bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly,proto3" json:"defined_only,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf []int32 `protobuf:"varint,3,rep,packed,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf []int32 `protobuf:"varint,4,rep,packed,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
}

func (x *EnumRules) Reset() {
	*x = EnumRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRules) ProtoMessage() {}

func (x *EnumRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRules.ProtoReflect.Descriptor instead.
func (*EnumRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{9}
}

func (x *EnumRules) GetConst() *wrapperspb.Int64Value {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *EnumRules) GetDefinedOnly() bool {
	if x != nil {
		return x.DefinedOnly
	}
	return false
}

func (x *EnumRules) GetAnyOf() []int32 {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *EnumRules) GetNoneOf() []int32 {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

type ObjectRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ensures that the subobject is set. It does nothing in case the
	// object is not embedded through a pointer.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Skip disables validation of the subobject.
	Skip bool `protobuf:"varint,2,opt,name=skip,proto3" json:"skip,omitempty"`
}

func (x *ObjectRules) Reset() {
	*x = ObjectRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectRules) ProtoMessage() {}

func (x *ObjectRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectRules.ProtoReflect.Descriptor instead.
func (*ObjectRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{10}
}

func (x *ObjectRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ObjectRules) GetSkip() bool {
	if x != nil {
		return x.Skip
	}
	return false
}

type RepeatedRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MinItems specifies the allowed count of items in this collection.
	MinItems *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=min_items,json=minItems,proto3" json:"min_items,omitempty"`
	// MinItems specifies the allowed count of items in this collection.
	MaxItems *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=max_items,json=maxItems,proto3" json:"max_items,omitempty"`
	// Unique requires that all items in the collection are unique. This rule
	// cannot be applied to a collection of messages.
	Unique bool `protobuf:"varint,3,opt,name=unique,proto3" json:"unique,omitempty"`
	// Items specifies rules to be applied to each item of the collection. By
	// default, all objects in collections are validated unless they are
	// explicitly marked by "skip" rule.
	Items *Validation `protobuf:"bytes,4,opt,name=items,proto3" json:"items,omitempty"`
}

func (x *RepeatedRules) Reset() {
	*x = RepeatedRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRules) ProtoMessage() {}

func (x *RepeatedRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRules.ProtoReflect.Descriptor instead.
func (*RepeatedRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{11}
}

func (x *RepeatedRules) GetMinItems() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinItems
	}
	return nil
}

func (x *RepeatedRules) GetMaxItems() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxItems
	}
	return nil
}

func (x *RepeatedRules) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *RepeatedRules) GetItems() *Validation {
	if x != nil {
		return x.Items
	}
	return nil
}

type MapRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MinItems specifies the minimum allowed count of pairs in this map.
	MinPairs *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=min_pairs,json=minPairs,proto3" json:"min_pairs,omitempty"`
	// MinItems specifies the maximum allowed count of pairs in this map.
	MaxPairs *wrapperspb.UInt64Value `protobuf:"bytes,2,opt,name=max_pairs,json=maxPairs,proto3" json:"max_pairs,omitempty"`
	// Keys specifies validations to apply to keys of this map.
	Keys *Validation `protobuf:"bytes,3,opt,name=keys,proto3" json:"keys,omitempty"`
	// Values specifies validations to apply to values of this map. By default,
	// all objects in maps are validated unless they are explicitly marked by
	// "skip" rule.
	Values *Validation `protobuf:"bytes,4,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *MapRules) Reset() {
	*x = MapRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRules) ProtoMessage() {}

func (x *MapRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRules.ProtoReflect.Descriptor instead.
func (*MapRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{12}
}

func (x *MapRules) GetMinPairs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MinPairs
	}
	return nil
}

func (x *MapRules) GetMaxPairs() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxPairs
	}
	return nil
}

func (x *MapRules) GetKeys() *Validation {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MapRules) GetValues() *Validation {
	if x != nil {
		return x.Values
	}
	return nil
}

type TimestampRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ensures that the timestamp is set. It does nothing in case the
	// timestamp is not embedded through a pointer.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Const specifies the exact value this field needs to have.
	Const *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=const,proto3" json:"const,omitempty"`
	// Lt specifies that the field value must be less than the specified value.
	Lt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	// Lte specifies that the field value must be less than or equal to the
	// specified value.
	Lte *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lte,proto3" json:"lte,omitempty"`
	// Gt specifies that the field value must be greater than the specified value.
	Gt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=gt,proto3" json:"gt,omitempty"`
	// Gte specifies that the field value must be greater than or equal to the
	// specified value.
	Gte *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=gte,proto3" json:"gte,omitempty"`
	// LtNow specifies that the timestamp must be before current timestamp
	LtNow bool `protobuf:"varint,8,opt,name=lt_now,json=ltNow,proto3" json:"lt_now,omitempty"`
	// GtNow specifies that the timestamp must be after current timestamp
	GtNow bool `protobuf:"varint,9,opt,name=gt_now,json=gtNow,proto3" json:"gt_now,omitempty"`
	// Within specifies that the timestamp must be within this duration relative
	// to current timestamp
	Within *durationpb.Duration `protobuf:"bytes,10,opt,name=within,proto3" json:"within,omitempty"`
}

func (x *TimestampRules) Reset() {
	*x = TimestampRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRules) ProtoMessage() {}

func (x *TimestampRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRules.ProtoReflect.Descriptor instead.
func (*TimestampRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{13}
}

func (x *TimestampRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *TimestampRules) GetConst() *timestamppb.Timestamp {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *TimestampRules) GetLt() *timestamppb.Timestamp {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *TimestampRules) GetLte() *timestamppb.Timestamp {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *TimestampRules) GetGt() *timestamppb.Timestamp {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *TimestampRules) GetGte() *timestamppb.Timestamp {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *TimestampRules) GetLtNow() bool {
	if x != nil {
		return x.LtNow
	}
	return false
}

func (x *TimestampRules) GetGtNow() bool {
	if x != nil {
		return x.GtNow
	}
	return false
}

func (x *TimestampRules) GetWithin() *durationpb.Duration {
	if x != nil {
		return x.Within
	}
	return nil
}

type DurationRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required ensures that the duration is set. It does nothing in case the
	// duration is not embedded through a pointer.
	Required bool `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// Const specifies the exact value this field needs to have.
	Const *durationpb.Duration `protobuf:"bytes,2,opt,name=const,proto3" json:"const,omitempty"`
	// Lt specifies that the field value must be less than the specified value.
	Lt *durationpb.Duration `protobuf:"bytes,3,opt,name=lt,proto3" json:"lt,omitempty"`
	// Lte specifies that the field value must be less than or equal to the
	// specified value.
	Lte *durationpb.Duration `protobuf:"bytes,4,opt,name=lte,proto3" json:"lte,omitempty"`
	// Gt specifies that the field value must be greater than the specified value.
	Gt *durationpb.Duration `protobuf:"bytes,5,opt,name=gt,proto3" json:"gt,omitempty"`
	// Gte specifies that the field value must be greater than or equal to the
	// specified value.
	Gte *durationpb.Duration `protobuf:"bytes,6,opt,name=gte,proto3" json:"gte,omitempty"`
	// AnyOf specifies that the field value MUST be equal to one of provided
	// values
	AnyOf []*durationpb.Duration `protobuf:"bytes,7,rep,name=any_of,json=anyOf,proto3" json:"any_of,omitempty"`
	// NoneOf specifies that the field value MUST NOT be equal to one of provided
	// values
	NoneOf []*durationpb.Duration `protobuf:"bytes,8,rep,name=none_of,json=noneOf,proto3" json:"none_of,omitempty"`
}

func (x *DurationRules) Reset() {
	*x = DurationRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_validate_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DurationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationRules) ProtoMessage() {}

func (x *DurationRules) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_validate_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationRules.ProtoReflect.Descriptor instead.
func (*DurationRules) Descriptor() ([]byte, []int) {
	return file_goten_annotations_validate_proto_rawDescGZIP(), []int{14}
}

func (x *DurationRules) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *DurationRules) GetConst() *durationpb.Duration {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *DurationRules) GetLt() *durationpb.Duration {
	if x != nil {
		return x.Lt
	}
	return nil
}

func (x *DurationRules) GetLte() *durationpb.Duration {
	if x != nil {
		return x.Lte
	}
	return nil
}

func (x *DurationRules) GetGt() *durationpb.Duration {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *DurationRules) GetGte() *durationpb.Duration {
	if x != nil {
		return x.Gte
	}
	return nil
}

func (x *DurationRules) GetAnyOf() []*durationpb.Duration {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *DurationRules) GetNoneOf() []*durationpb.Duration {
	if x != nil {
		return x.NoneOf
	}
	return nil
}

var file_goten_annotations_validate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*Validation)(nil),
		Field:         81001,
		Name:          "goten.annotations.validation_rules",
		Tag:           "bytes,81001,opt,name=validation_rules",
		Filename:      "goten/annotations/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*bool)(nil),
		Field:         81001,
		Name:          "goten.annotations.required",
		Tag:           "varint,81001,opt,name=required",
		Filename:      "goten/annotations/validate.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional goten.annotations.Validation validation_rules = 81001;
	E_ValidationRules = &file_goten_annotations_validate_proto_extTypes[0]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional bool required = 81001;
	E_Required = &file_goten_annotations_validate_proto_extTypes[1]
)

var File_goten_annotations_validate_proto protoreflect.FileDescriptor

var file_goten_annotations_validate_proto_rawDesc = []byte{
	0x0a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x06, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52,
	0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x29, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0xae, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x03, 0x6c, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x67, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67,
	0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65,
	0x4f, 0x66, 0x22, 0xa8, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2d,
	0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x6e, 0x79, 0x4f, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0xaf, 0x02,
	0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12,
	0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x6c,
	0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x67, 0x74, 0x12,
	0x2e, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6f,
	0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x04, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x22,
	0x21, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x12,
	0x35, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x6c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65,
	0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c,
	0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4c, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f,
	0x6f, 0x66, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x22, 0xd3, 0x02, 0x0a, 0x0a, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6c, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x6e,
	0x12, 0x35, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6e,
	0x79, 0x5f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f,
	0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0xf3, 0x01, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x34, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x70, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x72,
	0x69, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x75, 0x72, 0x69, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x65, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x65, 0x6d,
	0x22, 0x91, 0x01, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x6e, 0x79, 0x5f, 0x6f, 0x66, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x22, 0x3d, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x6b, 0x69, 0x70, 0x22, 0xd2, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x39, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xea, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x70,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x35,
	0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xf3, 0x02, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02,
	0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6c, 0x74, 0x65,
	0x12, 0x2a, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2c, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x74,
	0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x74, 0x4e, 0x6f,
	0x77, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x74, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x67, 0x74, 0x4e, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x77, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x22, 0xf2, 0x02, 0x0a, 0x0d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x02, 0x6c, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x02, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x6c,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x67, 0x74, 0x12, 0x2b, 0x0a,
	0x03, 0x67, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x67, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x61, 0x6e,
	0x79, 0x5f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x32, 0x0a, 0x07,
	0x6e, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6e, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x3a, 0x69, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xf8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x3b, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe9, 0xf8, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x56, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x50, 0x01,
	0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goten_annotations_validate_proto_rawDescOnce sync.Once
	file_goten_annotations_validate_proto_rawDescData = file_goten_annotations_validate_proto_rawDesc
)

func file_goten_annotations_validate_proto_rawDescGZIP() []byte {
	file_goten_annotations_validate_proto_rawDescOnce.Do(func() {
		file_goten_annotations_validate_proto_rawDescData = protoimpl.X.CompressGZIP(file_goten_annotations_validate_proto_rawDescData)
	})
	return file_goten_annotations_validate_proto_rawDescData
}

var file_goten_annotations_validate_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_goten_annotations_validate_proto_goTypes = []interface{}{
	(*Validation)(nil),                // 0: goten.annotations.Validation
	(*FilterRules)(nil),               // 1: goten.annotations.FilterRules
	(*DecimalRules)(nil),              // 2: goten.annotations.DecimalRules
	(*SignedRules)(nil),               // 3: goten.annotations.SignedRules
	(*UnsignedRules)(nil),             // 4: goten.annotations.UnsignedRules
	(*BoolRules)(nil),                 // 5: goten.annotations.BoolRules
	(*StringRules)(nil),               // 6: goten.annotations.StringRules
	(*BytesRules)(nil),                // 7: goten.annotations.BytesRules
	(*Format)(nil),                    // 8: goten.annotations.Format
	(*EnumRules)(nil),                 // 9: goten.annotations.EnumRules
	(*ObjectRules)(nil),               // 10: goten.annotations.ObjectRules
	(*RepeatedRules)(nil),             // 11: goten.annotations.RepeatedRules
	(*MapRules)(nil),                  // 12: goten.annotations.MapRules
	(*TimestampRules)(nil),            // 13: goten.annotations.TimestampRules
	(*DurationRules)(nil),             // 14: goten.annotations.DurationRules
	(*wrapperspb.DoubleValue)(nil),    // 15: google.protobuf.DoubleValue
	(*wrapperspb.Int64Value)(nil),     // 16: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil),    // 17: google.protobuf.UInt64Value
	(*timestamppb.Timestamp)(nil),     // 18: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),       // 19: google.protobuf.Duration
	(*descriptorpb.FieldOptions)(nil), // 20: google.protobuf.FieldOptions
	(*descriptorpb.OneofOptions)(nil), // 21: google.protobuf.OneofOptions
}
var file_goten_annotations_validate_proto_depIdxs = []int32{
	2,  // 0: goten.annotations.Validation.decimal:type_name -> goten.annotations.DecimalRules
	3,  // 1: goten.annotations.Validation.signed:type_name -> goten.annotations.SignedRules
	4,  // 2: goten.annotations.Validation.unsigned:type_name -> goten.annotations.UnsignedRules
	5,  // 3: goten.annotations.Validation.bool:type_name -> goten.annotations.BoolRules
	6,  // 4: goten.annotations.Validation.string:type_name -> goten.annotations.StringRules
	7,  // 5: goten.annotations.Validation.bytes:type_name -> goten.annotations.BytesRules
	9,  // 6: goten.annotations.Validation.enum:type_name -> goten.annotations.EnumRules
	11, // 7: goten.annotations.Validation.repeated:type_name -> goten.annotations.RepeatedRules
	12, // 8: goten.annotations.Validation.map:type_name -> goten.annotations.MapRules
	13, // 9: goten.annotations.Validation.timestamp:type_name -> goten.annotations.TimestampRules
	14, // 10: goten.annotations.Validation.duration:type_name -> goten.annotations.DurationRules
	1,  // 11: goten.annotations.Validation.filter:type_name -> goten.annotations.FilterRules
	10, // 12: goten.annotations.Validation.object:type_name -> goten.annotations.ObjectRules
	15, // 13: goten.annotations.DecimalRules.const:type_name -> google.protobuf.DoubleValue
	15, // 14: goten.annotations.DecimalRules.lt:type_name -> google.protobuf.DoubleValue
	15, // 15: goten.annotations.DecimalRules.lte:type_name -> google.protobuf.DoubleValue
	15, // 16: goten.annotations.DecimalRules.gt:type_name -> google.protobuf.DoubleValue
	15, // 17: goten.annotations.DecimalRules.gte:type_name -> google.protobuf.DoubleValue
	16, // 18: goten.annotations.SignedRules.const:type_name -> google.protobuf.Int64Value
	16, // 19: goten.annotations.SignedRules.lt:type_name -> google.protobuf.Int64Value
	16, // 20: goten.annotations.SignedRules.lte:type_name -> google.protobuf.Int64Value
	16, // 21: goten.annotations.SignedRules.gt:type_name -> google.protobuf.Int64Value
	16, // 22: goten.annotations.SignedRules.gte:type_name -> google.protobuf.Int64Value
	17, // 23: goten.annotations.UnsignedRules.const:type_name -> google.protobuf.UInt64Value
	17, // 24: goten.annotations.UnsignedRules.lt:type_name -> google.protobuf.UInt64Value
	17, // 25: goten.annotations.UnsignedRules.lte:type_name -> google.protobuf.UInt64Value
	17, // 26: goten.annotations.UnsignedRules.gt:type_name -> google.protobuf.UInt64Value
	17, // 27: goten.annotations.UnsignedRules.gte:type_name -> google.protobuf.UInt64Value
	17, // 28: goten.annotations.StringRules.len:type_name -> google.protobuf.UInt64Value
	17, // 29: goten.annotations.StringRules.min_len:type_name -> google.protobuf.UInt64Value
	17, // 30: goten.annotations.StringRules.max_len:type_name -> google.protobuf.UInt64Value
	17, // 31: goten.annotations.StringRules.bytes_len:type_name -> google.protobuf.UInt64Value
	17, // 32: goten.annotations.StringRules.min_bytes_len:type_name -> google.protobuf.UInt64Value
	17, // 33: goten.annotations.StringRules.max_bytes_len:type_name -> google.protobuf.UInt64Value
	8,  // 34: goten.annotations.StringRules.format:type_name -> goten.annotations.Format
	17, // 35: goten.annotations.BytesRules.len:type_name -> google.protobuf.UInt64Value
	17, // 36: goten.annotations.BytesRules.min_len:type_name -> google.protobuf.UInt64Value
	17, // 37: goten.annotations.BytesRules.max_len:type_name -> google.protobuf.UInt64Value
	8,  // 38: goten.annotations.BytesRules.format:type_name -> goten.annotations.Format
	16, // 39: goten.annotations.EnumRules.const:type_name -> google.protobuf.Int64Value
	17, // 40: goten.annotations.RepeatedRules.min_items:type_name -> google.protobuf.UInt64Value
	17, // 41: goten.annotations.RepeatedRules.max_items:type_name -> google.protobuf.UInt64Value
	0,  // 42: goten.annotations.RepeatedRules.items:type_name -> goten.annotations.Validation
	17, // 43: goten.annotations.MapRules.min_pairs:type_name -> google.protobuf.UInt64Value
	17, // 44: goten.annotations.MapRules.max_pairs:type_name -> google.protobuf.UInt64Value
	0,  // 45: goten.annotations.MapRules.keys:type_name -> goten.annotations.Validation
	0,  // 46: goten.annotations.MapRules.values:type_name -> goten.annotations.Validation
	18, // 47: goten.annotations.TimestampRules.const:type_name -> google.protobuf.Timestamp
	18, // 48: goten.annotations.TimestampRules.lt:type_name -> google.protobuf.Timestamp
	18, // 49: goten.annotations.TimestampRules.lte:type_name -> google.protobuf.Timestamp
	18, // 50: goten.annotations.TimestampRules.gt:type_name -> google.protobuf.Timestamp
	18, // 51: goten.annotations.TimestampRules.gte:type_name -> google.protobuf.Timestamp
	19, // 52: goten.annotations.TimestampRules.within:type_name -> google.protobuf.Duration
	19, // 53: goten.annotations.DurationRules.const:type_name -> google.protobuf.Duration
	19, // 54: goten.annotations.DurationRules.lt:type_name -> google.protobuf.Duration
	19, // 55: goten.annotations.DurationRules.lte:type_name -> google.protobuf.Duration
	19, // 56: goten.annotations.DurationRules.gt:type_name -> google.protobuf.Duration
	19, // 57: goten.annotations.DurationRules.gte:type_name -> google.protobuf.Duration
	19, // 58: goten.annotations.DurationRules.any_of:type_name -> google.protobuf.Duration
	19, // 59: goten.annotations.DurationRules.none_of:type_name -> google.protobuf.Duration
	20, // 60: goten.annotations.validation_rules:extendee -> google.protobuf.FieldOptions
	21, // 61: goten.annotations.required:extendee -> google.protobuf.OneofOptions
	0,  // 62: goten.annotations.validation_rules:type_name -> goten.annotations.Validation
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	62, // [62:63] is the sub-list for extension type_name
	60, // [60:62] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_goten_annotations_validate_proto_init() }
func file_goten_annotations_validate_proto_init() {
	if File_goten_annotations_validate_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goten_annotations_validate_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecimalRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsignedRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_validate_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DurationRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_goten_annotations_validate_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Validation_Decimal)(nil),
		(*Validation_Signed)(nil),
		(*Validation_Unsigned)(nil),
		(*Validation_Bool)(nil),
		(*Validation_String_)(nil),
		(*Validation_Bytes)(nil),
		(*Validation_Enum)(nil),
		(*Validation_Repeated)(nil),
		(*Validation_Map)(nil),
		(*Validation_Timestamp)(nil),
		(*Validation_Duration)(nil),
		(*Validation_Filter)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goten_annotations_validate_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_goten_annotations_validate_proto_goTypes,
		DependencyIndexes: file_goten_annotations_validate_proto_depIdxs,
		MessageInfos:      file_goten_annotations_validate_proto_msgTypes,
		ExtensionInfos:    file_goten_annotations_validate_proto_extTypes,
	}.Build()
	File_goten_annotations_validate_proto = out.File
	file_goten_annotations_validate_proto_rawDesc = nil
	file_goten_annotations_validate_proto_goTypes = nil
	file_goten_annotations_validate_proto_depIdxs = nil
}
