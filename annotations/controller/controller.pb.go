// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v4.25.2
// source: goten/annotations/controller.proto

package controller

import (
	_ "github.com/cloudwan/goten-sdk/annotations/goten"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the snapshot model decides when snapshot is requested
type Processor_Transformer_GenericTransformer_SnapshotModel int32

const (
	// Default type. Snapshot is requested after sync is gained AND after
	// timeout happens after receiving On<Res>{Set/Deleted} for which
	// implementation is missing. Between execution of a snapshot and
	// scheduling updates are not handled. Instead, transformer relies on
	// store to be updated and will calculate fresh state during snapshot.
	Processor_Transformer_GenericTransformer_AFTER_UNHANDLED_UPDATE Processor_Transformer_GenericTransformer_SnapshotModel = 0
	// Transformer will calculate snapshot during resync and will then keep
	// recomputing it periodically. Implementation may still implement
	// On<Res>{Set/Deleted} for each input resource to handle things faster if
	// it wants.
	Processor_Transformer_GenericTransformer_PERIODIC Processor_Transformer_GenericTransformer_SnapshotModel = 1
)

// Enum value maps for Processor_Transformer_GenericTransformer_SnapshotModel.
var (
	Processor_Transformer_GenericTransformer_SnapshotModel_name = map[int32]string{
		0: "AFTER_UNHANDLED_UPDATE",
		1: "PERIODIC",
	}
	Processor_Transformer_GenericTransformer_SnapshotModel_value = map[string]int32{
		"AFTER_UNHANDLED_UPDATE": 0,
		"PERIODIC":               1,
	}
)

func (x Processor_Transformer_GenericTransformer_SnapshotModel) Enum() *Processor_Transformer_GenericTransformer_SnapshotModel {
	p := new(Processor_Transformer_GenericTransformer_SnapshotModel)
	*p = x
	return p
}

func (x Processor_Transformer_GenericTransformer_SnapshotModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Processor_Transformer_GenericTransformer_SnapshotModel) Descriptor() protoreflect.EnumDescriptor {
	return file_goten_annotations_controller_proto_enumTypes[0].Descriptor()
}

func (Processor_Transformer_GenericTransformer_SnapshotModel) Type() protoreflect.EnumType {
	return &file_goten_annotations_controller_proto_enumTypes[0]
}

func (x Processor_Transformer_GenericTransformer_SnapshotModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Processor_Transformer_GenericTransformer_SnapshotModel.Descriptor instead.
func (Processor_Transformer_GenericTransformer_SnapshotModel) EnumDescriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

// Determining scope of a resource requires inspecting its body. Since its
// not always straightforward how to extract this scope, framework allows
// to pick correct option for given task only developer can know about.
type Node_Dispatchment_GroupingMethod int32

const (
	// NAME is the simplest and probably most used method to group resources
	// into scopes. NAME simply tells to examine resource <name> field. For
	// example, if we have Project resource and there are Device/Pod resources,
	// which are kid of a Project, then NAME is perfect use - framework will
	// simply extract project name from any Device/Pod resource using its name
	// field.
	Node_Dispatchment_NAME Node_Dispatchment_GroupingMethod = 0
	// FIELD indicates that scope information is within resource: although not
	// in the name field. If developer picks this option, then it will be
	// mandatory to provide field path. However it should be noted that
	// only reference, name and string field paths are supported.
	Node_Dispatchment_FIELD Node_Dispatchment_GroupingMethod = 1
	// CUSTOM gives most freedom to developer, but requires to provide a function
	// that, for given resource requiring grouping, extracts string identifying
	// scope. This string can be anything, as long as it returns same value for
	// resources belonging to that scope.
	Node_Dispatchment_CUSTOM Node_Dispatchment_GroupingMethod = 2
)

// Enum value maps for Node_Dispatchment_GroupingMethod.
var (
	Node_Dispatchment_GroupingMethod_name = map[int32]string{
		0: "NAME",
		1: "FIELD",
		2: "CUSTOM",
	}
	Node_Dispatchment_GroupingMethod_value = map[string]int32{
		"NAME":   0,
		"FIELD":  1,
		"CUSTOM": 2,
	}
)

func (x Node_Dispatchment_GroupingMethod) Enum() *Node_Dispatchment_GroupingMethod {
	p := new(Node_Dispatchment_GroupingMethod)
	*p = x
	return p
}

func (x Node_Dispatchment_GroupingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_Dispatchment_GroupingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_goten_annotations_controller_proto_enumTypes[1].Descriptor()
}

func (Node_Dispatchment_GroupingMethod) Type() protoreflect.EnumType {
	return &file_goten_annotations_controller_proto_enumTypes[1]
}

func (x Node_Dispatchment_GroupingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_Dispatchment_GroupingMethod.Descriptor instead.
func (Node_Dispatchment_GroupingMethod) EnumDescriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2, 1, 0}
}

// TypeSet is a reusable bundle that consists of resource-based components like
// inputs, data sources, stores and syncers. They can be imported and used by
// many Processor instances. Its important to note, that TypeSet defines TYPES,
// while Processor defines INSTANCES. All resource names provided within any
// type of TypeSet must comply with following conventions (examples):
//   - iam.edgelq.com/RoleBinding - indicates that given type is based on
//     resource RoleBinding from iam.edgelq.com service.
//   - RoleBinding - Shorter version of above notation, available if developer
//     specifies "services" annotation within TypeSet, which provides list
//     of possible services (with their versions).
type TypeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a TypeSet bundle. It allows being imported by Processor instances.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of services used by this TypeSet. They can be skipped,
	Services []*TypeSet_SvcImport `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
	// List of Input types to be generated in this bundle.
	Inputs []*TypeSet_Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of DataSource types to be generated in this bundle.
	DataSources []*TypeSet_DataSource `protobuf:"bytes,4,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	// List of Store types to be generated in this bundle.
	Stores []*TypeSet_Store `protobuf:"bytes,5,rep,name=stores,proto3" json:"stores,omitempty"`
	// List of Syncer types to be generated in this bundle.
	Syncers []*TypeSet_Syncer `protobuf:"bytes,6,rep,name=syncers,proto3" json:"syncers,omitempty"`
}

func (x *TypeSet) Reset() {
	*x = TypeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet) ProtoMessage() {}

func (x *TypeSet) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet.ProtoReflect.Descriptor instead.
func (*TypeSet) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0}
}

func (x *TypeSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeSet) GetServices() []*TypeSet_SvcImport {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *TypeSet) GetInputs() []*TypeSet_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *TypeSet) GetDataSources() []*TypeSet_DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *TypeSet) GetStores() []*TypeSet_Store {
	if x != nil {
		return x.Stores
	}
	return nil
}

func (x *TypeSet) GetSyncers() []*TypeSet_Syncer {
	if x != nil {
		return x.Syncers
	}
	return nil
}

// Processor is a controller module, which focuses on single business logic
// task, which basically is about maintaining some desired set(s) of resources.
// Basically: Given some defined set of resources, it should compute another set
// of desired resources and maintain them. It obtains actual data from the server
// and uses create/update/delete requests in order to keep desired state in sync.
// Controller is always scoped - which means, it operates only on set of resources
// that belong to one scoped resource, which usually is a Project. This ensures
// data from different scopes dont mix up. Controller itself should consists
// of as many Processor instances, as many we have possible scopes.
// Processor utilizes pipeline consisting of:
// * inputs + data sources - which are used to figure out what is the actual state
// of environment.
// * stores - which are used as memory banks, so Processor keeps track of what is
// going on)
// * transformers - central part of Processor. Transformer is the simplest function
// that produces desired state based on observed one. Processor can have many
// transformers, but they should roughly work on coherent singlr business logic task.
// * syncers - which are used for maintaining desired set of resources in sync.
// Apart from transformers, TYPES for all pipeline components are defined in TypeSet
// components.
//
// Protoc code-gen plugin will automatically generate Processor object according
// to the description provided. It will also generate customizer interface which
// will have to be implemented by developer in order to:
// * (Mandatory) Provide implementation+configs to transformers
// * (Mandatory) Provide configs to syncers
// * (Optionally) Provide custom configs to stores
// * (Optionally) Provide pre/post init functions for newly created Processors
// themselves, allowing more aggressive customizations.
//
// Processor instances may use imported TypeSet components. This allows to:
// * reuse same types among many Processor instances, reducing auto-generated
// code.
// * customize certain types (For example we can add extra indices to Stores).
// By default, if Processor notices that no imported TypeSet defines certain
// type it needs (for example, Processor needs Syncer for Pod resources, but
// it is not defined in any TypeSet), then it generates automatically its own
// instance. It basically has its own internal and dynamic TypeSet where
// missing types are added at compile time. However, defaults may not always
// be appropriate.
type Processor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the processor.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Names of a all TypeSet components imported by Processor.
	TypeSets []string `protobuf:"bytes,2,rep,name=type_sets,json=typeSets,proto3" json:"type_sets,omitempty"`
	// Name of all controlled resources used by this Processor.
	Definitions []*Processor_ControlledResource `protobuf:"bytes,3,rep,name=definitions,proto3" json:"definitions,omitempty"`
	// Name of the resource determining Scope of the Processor. This is typically
	// a Project, but does not have to be. Scope must be defined as ControlledResource.
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// Names of ControlledResource objects for which Processor should generate input
	// instances. Input instance within Processor should not be confused with Input
	// within TypeSet. Input instance defined within Processor will consists of two
	// components:
	// * MATCHING Input instance from TypeSet
	// * MATCHING Store instance from TypeSet
	// Constructor for a Processor will connect Input and Store together. It will
	// also find all transformer and syncer instances that are interested
	Inputs []string `protobuf:"bytes,5,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// Names of ControlledResource objects for which Processor should generate internal
	// source instances. Like input instances, internal sources within Processor should
	// not be confused with Data sources within TypeSet. Internal source instance will
	// consists of two components:
	// * MATCHING DataSource instance from TypeSet
	// * MATCHING Store instance from TypeSet
	// Constructor for a Processor will connect DataSource and Store together. It will
	// also find all transformer and syncer instances that would consume data from
	// them.
	InternalSources []string `protobuf:"bytes,6,rep,name=internal_sources,json=internalSources,proto3" json:"internal_sources,omitempty"`
	// All transformers instances used in this Processor.
	Transformers []*Processor_Transformer `protobuf:"bytes,7,rep,name=transformers,proto3" json:"transformers,omitempty"`
	// All Syncer instances used in this Processor.
	Syncers []*Processor_Syncer `protobuf:"bytes,8,rep,name=syncers,proto3" json:"syncers,omitempty"`
}

func (x *Processor) Reset() {
	*x = Processor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor) ProtoMessage() {}

func (x *Processor) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor.ProtoReflect.Descriptor instead.
func (*Processor) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1}
}

func (x *Processor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Processor) GetTypeSets() []string {
	if x != nil {
		return x.TypeSets
	}
	return nil
}

func (x *Processor) GetDefinitions() []*Processor_ControlledResource {
	if x != nil {
		return x.Definitions
	}
	return nil
}

func (x *Processor) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *Processor) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Processor) GetInternalSources() []string {
	if x != nil {
		return x.InternalSources
	}
	return nil
}

func (x *Processor) GetTransformers() []*Processor_Transformer {
	if x != nil {
		return x.Transformers
	}
	return nil
}

func (x *Processor) GetSyncers() []*Processor_Syncer {
	if x != nil {
		return x.Syncers
	}
	return nil
}

// Node is the highest-level code-generated object within controller framework.
// Its tasks are:
// * Collect data needed by Processor instances AND group it by a scope objects.
// As was said in Processor doc, it is scoped and should receive data only about
// its scope. Node is not scoped - it tries to optimize controller by utilizing
// bulk watching (Watch requests for all scopes) and simply groups received
// objects into scopes.
// * Create/Delete Processor instance for every new/deleted scope object.
// * Communicate with other Node instances of the same kind in order to split
// the work. This prevents Node to be overwhelmed if there are simply too many
// active Projects. Work is being divided using Sharding feature.
//
// Notes:
// * Node can contain many Processor kinds, BUT they must use exactly same Scope.
// It implies that Node should focus on
// * Only one ntt.sharding.RingConfig can be assigned to a Node. It must be also
// synchronized across all Nodes in order to make sure work is split correctly.
// If developer needs to use multiple rings for different business logic tasks,
// then what is needed is more Node definitions. Implication, is that Node is
// focused on many business logic tasks, but they all must relate to one Scope.
// * Node will iterate over all Processors and check all external inputs they
// require - for each UNIQUE ControlledResource Node will have one Watcher
// instance. If two or more Processors define ControlledResource of the same
// name, then Node will forward data to them from one Watcher instance.
// * Since Node iterates over all its Processors and inherits all ControlledResource
// definitions, all resource names provided in Node annotation require the same
// names.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the node
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of all Processor names used in this Node.
	Processors []string `protobuf:"bytes,2,rep,name=processors,proto3" json:"processors,omitempty"`
	// Sharding information attached to the Node.
	Sharding *Node_Sharding `protobuf:"bytes,3,opt,name=sharding,proto3" json:"sharding,omitempty"`
	// Dispatchment information attached to the Node.
	Dispatchment *Node_Dispatchment `protobuf:"bytes,4,opt,name=dispatchment,proto3" json:"dispatchment,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetProcessors() []string {
	if x != nil {
		return x.Processors
	}
	return nil
}

func (x *Node) GetSharding() *Node_Sharding {
	if x != nil {
		return x.Sharding
	}
	return nil
}

func (x *Node) GetDispatchment() *Node_Dispatchment {
	if x != nil {
		return x.Dispatchment
	}
	return nil
}

// Input defines a component that is used by Processor instances as an entry
// point allowing data to be provided from the outside. Typically, this
// "outside" is a Node instance, which provides input data to its Processor
// instances. For example, imagine that there is Node instance that watches
// all Pod resources. When some Pods get changed, Node is notified. Then
// Node groups changed Pods according to their scope (typically Project) and
// pushes data to corresponding to their Project Processor instances. In this
// context, Input serves as an entry mechanism allowing Node instance pass
// changes to Pod resources into Processors.
type TypeSet_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a resource on which Input is based.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TypeSet_Input) Reset() {
	*x = TypeSet_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet_Input) ProtoMessage() {}

func (x *TypeSet_Input) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet_Input.ProtoReflect.Descriptor instead.
func (*TypeSet_Input) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TypeSet_Input) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// DataSource is somehow similar like Input - it provides data to Processor
// instances. However, while Input is just waiting for the outside call,
// exposing Processor, DataSource is running on its own thread and using its
// own internal client. In other words, this is for internal use.
type TypeSet_DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a resource on which DataSource is based.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TypeSet_DataSource) Reset() {
	*x = TypeSet_DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet_DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet_DataSource) ProtoMessage() {}

func (x *TypeSet_DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet_DataSource.ProtoReflect.Descriptor instead.
func (*TypeSet_DataSource) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TypeSet_DataSource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// Store is a stateful component holding in its own memory state of all
// resources of its kind. It typically is used by Processors to consume
// data from Input/DataSource components and index them internally. It
// can also compare new state of resource with the previous one, detect
// if there are any changes at all, notify subscribed listeners.
type TypeSet_Store struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource for which this store is.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// List of additional unique identifiers or grouping criteria by which
	// resources will be indexed. By default, code-gen tool generates store
	// indexing by name only.
	CustomIndices []*TypeSet_Store_Index `protobuf:"bytes,2,rep,name=custom_indices,json=customIndices,proto3" json:"custom_indices,omitempty"`
}

func (x *TypeSet_Store) Reset() {
	*x = TypeSet_Store{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet_Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet_Store) ProtoMessage() {}

func (x *TypeSet_Store) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet_Store.ProtoReflect.Descriptor instead.
func (*TypeSet_Store) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TypeSet_Store) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *TypeSet_Store) GetCustomIndices() []*TypeSet_Store_Index {
	if x != nil {
		return x.CustomIndices
	}
	return nil
}

// Syncer is a final Processor pipeline component that synchronizes between
// observed and desired state of a resource view. Observed state is typically
// feed by Store component, while desired state comes from transformers.
// During construction of a Syncer instance, it is possible to provide many
// configuration/customization options. They are:
// * UpdateMask: Most important parameter. Mask will be used by syncer to
// determine whether instances of an observed and desired resource are same
// or not. Typically we want to execute UPDATE request only if some fields
// are not matching.
// * RequestExecutionDelay: Customized delay between scheduling a request
// for execution (Create/Update/Delete) and an actual execution. If not
// provided, syncer will pick default value.
// * InitialRecoveryBackoff: If syncer encounters an error during execution
// of any request, it will suspend its work for given timeout.
// * MaximumRecoveryBackoff: If syncer fails to recover after failure, timeout
// set with InitialRecoveryBackoff will be increased and increased again in
// case of another failure. However MaximumRecoveryBackoff determines ceiling
// value for recovery.
// * CustomIdBuilder: By default, syncer matches observed and desired
// instances by their name fields. However, developer may provide custom ID
// extraction (of type string). This allows developer to skip providing full
// name to the desired instances.
// * AllowDuplicates: Determines if Syncer should delete redundant resources
// if it notices that observed state has more than 1 resource of same identifier.
// This can happen if CustomIdBuilder option was provided.
// * CreationDisabled: Whether syncer should disable creation
// * DeletionDisabled: Whether syncer should disable deletion
// * UpdateDisabled: Whether syncer should disable update
// * CreationAuthorizer: Customized function returning true/false whether
// syncer should execute CREATE request for this resource or not.
// * UpdateAuthorizer: Customized function returning true/false whether
// syncer should execute UPDATE request for this resource or not.
// * DeletionAuthorizer: Customized function returning true/false whether
// syncer should execute DELETE request for this resource or not.
// * CustomCreate: Customized function executing CREATE request. By default
// syncer creates resource with standard CREATE request provided by goten.
// * CustomUpdate: Customized function executing UPDATE request. By default
// syncer creates resource with standard UPDATE request provided by goten.
// * CustomDelete: Customized function executing DELETE request. By default
// syncer creates resource with standard DELETE request provided by goten.
type TypeSet_Syncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a resource which view is synchronized between desired and observed
	// state.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TypeSet_Syncer) Reset() {
	*x = TypeSet_Syncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet_Syncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet_Syncer) ProtoMessage() {}

func (x *TypeSet_Syncer) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet_Syncer.ProtoReflect.Descriptor instead.
func (*TypeSet_Syncer) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TypeSet_Syncer) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// SvcImport informs TypeSet from which services resources should be taken from.
// It can also be used to pin specific service version.
type TypeSet_SvcImport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a service, for example "iam.edgelq.com"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Optional version name, for example "v1alpha2". Newest available, if not provided.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *TypeSet_SvcImport) Reset() {
	*x = TypeSet_SvcImport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet_SvcImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet_SvcImport) ProtoMessage() {}

func (x *TypeSet_SvcImport) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet_SvcImport.ProtoReflect.Descriptor instead.
func (*TypeSet_SvcImport) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0, 4}
}

func (x *TypeSet_SvcImport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeSet_SvcImport) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Index describes an additional way by which resource is stored and for
// which getter is generated. For example, if in resource "Device" we have
// field path spec.vendor.id (of type string) we can define following index:
//
//	{
//	  field_paths: [ "spec.vendor.id" ]
//	  name: "vendor_id"
//	  is_unique: true
//	}
//
// Above will generate additional method attached to the DeviceStore:
// GetByVendorId(id string) *Device
// Name "vendor_id" is converted to UpperCamelCase notation.
// Keys do not have to be unique - they can also group multiple instances
// under one value. For example, suppose that each Pod resource has a
// reference to a resource Distribution. Each Distribution can have many
// Pods.We can define following index then:
//
//	{
//	  field_paths: [ "spec.distribution" ]
//	  name: "distribution"
//	  is_unique: false
//	}
//
// Following extra method will be generated in the PodStore:
// GetByDistribution(ref *distribution.Reference) map[pod.Name]*Pod
// Index by name is always automatically generated.
type TypeSet_Store_Index struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Paths inside a resource schema forming a key.
	FieldPaths []string `protobuf:"bytes,1,rep,name=field_paths,json=fieldPaths,proto3" json:"field_paths,omitempty"`
	// Name of the key. It is used to determine name of the getter. If omitted,
	// then last element in field_paths is used.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Indicates if only one instance of a resource can be present under this
	// key.
	IsUnique bool `protobuf:"varint,3,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
}

func (x *TypeSet_Store_Index) Reset() {
	*x = TypeSet_Store_Index{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSet_Store_Index) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSet_Store_Index) ProtoMessage() {}

func (x *TypeSet_Store_Index) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSet_Store_Index.ProtoReflect.Descriptor instead.
func (*TypeSet_Store_Index) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *TypeSet_Store_Index) GetFieldPaths() []string {
	if x != nil {
		return x.FieldPaths
	}
	return nil
}

func (x *TypeSet_Store_Index) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TypeSet_Store_Index) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

// ControlledResource provides a resource definition within business logic
// context - typically within this Controller. It is built on top of goten
// resource definition - it just adds additional controller definition to it.
// In some cases, we may want to provide straightforward definition. For
// example, we say that we will be using Device resource in our controller,
// which is based on Device resource from devices.edgelq.com service:
//
//	{name: "Device", resource: "devices.edgelq.com/Device"}
//
// However, we may also build more definitions on top of underlying goten
// resource, as in this example:
//
//	{name : "WebServiceFrontend", resource : "applications.edgelq.com/Pod"}
//	{name : "WebServiceBackend", resource : "applications.edgelq.com/Pod"}
//
// If we provide many definitions based on same resource type, Processor can
// separate processing of Pods depending on their actual type in controller
// context.
// NOTE: All resource names within Processor must match names defined by
// ControlledResource instances.
// NOTE: Pipeline components (like transformers, syncers...) within Processor
// cannot work on its own, they have to be properly connected to each other.
// Processor makes all necessary connections by checking ControlledResource
// names! For example, if it sees Transformer that takes "Pod" as an input,
// then it looks for input or data source that supplies "Pod" resources.
type Processor_ControlledResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the resource within Controller context.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Underlying goten resource type name. Should be fully qualified and with
	// service name. Example: applications.edgelq.com/Pod.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
	// Service version, for example "v1alpha2". If not provided, protoc will look
	// for the newest available package.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Plural version of a "name". If not provided, then:
	// * If "name" is same as name in the goten "resource" definition, plural
	// is taken from goten resource definition.
	// * Otherwise, it is "name"+"s" letter.
	Plural string `protobuf:"bytes,4,opt,name=plural,proto3" json:"plural,omitempty"`
}

func (x *Processor_ControlledResource) Reset() {
	*x = Processor_ControlledResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_ControlledResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_ControlledResource) ProtoMessage() {}

func (x *Processor_ControlledResource) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_ControlledResource.ProtoReflect.Descriptor instead.
func (*Processor_ControlledResource) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Processor_ControlledResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Processor_ControlledResource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Processor_ControlledResource) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Processor_ControlledResource) GetPlural() string {
	if x != nil {
		return x.Plural
	}
	return ""
}

// Transformer is a pipeline component (function) that for given set of observed
// resources creates a set of desired resources.
// Note: Specification defines only skeleton code to be generated
// for transformer. It is up to a developer to provide implementation
// needed to construct fully functioning Transformer.
// Framework currently supports 3 types of transformers, depending on needs one
// or another should be used.
// NOTE: ALL resource names provided in transformers MUST be of ControlledResource
// type, not goten resource names.
// NOTE: Framework connects transformers to inputs/data sources on the left side
// and syncers on the right side by matching resource names.
type Processor_Transformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the transformer - used for both defining type and instance within
	// Processor.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Type:
	//
	//	*Processor_Transformer_Generic
	//	*Processor_Transformer_OwnerOwnee
	//	*Processor_Transformer_Decorator
	Type isProcessor_Transformer_Type `protobuf_oneof:"type"`
}

func (x *Processor_Transformer) Reset() {
	*x = Processor_Transformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_Transformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_Transformer) ProtoMessage() {}

func (x *Processor_Transformer) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_Transformer.ProtoReflect.Descriptor instead.
func (*Processor_Transformer) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Processor_Transformer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Processor_Transformer) GetType() isProcessor_Transformer_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Processor_Transformer) GetGeneric() *Processor_Transformer_GenericTransformer {
	if x, ok := x.GetType().(*Processor_Transformer_Generic); ok {
		return x.Generic
	}
	return nil
}

func (x *Processor_Transformer) GetOwnerOwnee() *Processor_Transformer_OwnerOwneeTransformer {
	if x, ok := x.GetType().(*Processor_Transformer_OwnerOwnee); ok {
		return x.OwnerOwnee
	}
	return nil
}

func (x *Processor_Transformer) GetDecorator() *Processor_Transformer_DecoratorTransformer {
	if x, ok := x.GetType().(*Processor_Transformer_Decorator); ok {
		return x.Decorator
	}
	return nil
}

type isProcessor_Transformer_Type interface {
	isProcessor_Transformer_Type()
}

type Processor_Transformer_Generic struct {
	// Generic transformer type description
	Generic *Processor_Transformer_GenericTransformer `protobuf:"bytes,2,opt,name=generic,proto3,oneof"`
}

type Processor_Transformer_OwnerOwnee struct {
	// Owner-Ownee transformer type description
	OwnerOwnee *Processor_Transformer_OwnerOwneeTransformer `protobuf:"bytes,3,opt,name=owner_ownee,json=ownerOwnee,proto3,oneof"`
}

type Processor_Transformer_Decorator struct {
	// Decorator transformer type description
	Decorator *Processor_Transformer_DecoratorTransformer `protobuf:"bytes,4,opt,name=decorator,proto3,oneof"`
}

func (*Processor_Transformer_Generic) isProcessor_Transformer_Type() {}

func (*Processor_Transformer_OwnerOwnee) isProcessor_Transformer_Type() {}

func (*Processor_Transformer_Decorator) isProcessor_Transformer_Type() {}

// Syncer describes an INSTANCE working within Processor. This should not be
// confused with Syncer in a TypeSet, which describes a TYPE. Syncer within
// Processor instructs compiler to generate an actual object, that will be
// connected with selected input/data source for an observed state and list
// of transformers for a desired state.
type Processor_Syncer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the syncer instance.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Name of the observed resource that connects to this syncer. Compiler will
	// iterate over all inputs/data sources to find matching instance.
	ObservedInput string `protobuf:"bytes,2,opt,name=observed_input,json=observedInput,proto3" json:"observed_input,omitempty"`
	// List of all transformer outputs supplying data to desired state of the syncer.
	DesiredOutput []*Processor_Syncer_DesiredSource `protobuf:"bytes,3,rep,name=desired_output,json=desiredOutput,proto3" json:"desired_output,omitempty"`
}

func (x *Processor_Syncer) Reset() {
	*x = Processor_Syncer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_Syncer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_Syncer) ProtoMessage() {}

func (x *Processor_Syncer) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_Syncer.ProtoReflect.Descriptor instead.
func (*Processor_Syncer) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 2}
}

func (x *Processor_Syncer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Processor_Syncer) GetObservedInput() string {
	if x != nil {
		return x.ObservedInput
	}
	return ""
}

func (x *Processor_Syncer) GetDesiredOutput() []*Processor_Syncer_DesiredSource {
	if x != nil {
		return x.DesiredOutput
	}
	return nil
}

// Schema of a generic transformer - defines simply input and output resource
// sets without mentioning how they are related to each other. This is most
// elastic version of the transformers. For example, suppose we need to write
// some complex transformer, that for each Deployment resource creates
// ReplicaSets, which then creates Pods. Also, when Deployment changes and new
// ReplicaSet is created (previous will be deleted), Pods need to be moved
// from old replica to new one. We can try to split this into many
// transformers, but suppose we want to write just one with following
// definition because we found that most convenient:
//
//	{
//	  name: "DeploymentController"
//	  generic: {
//	    input_resources: [ "Deployment", "ReplicaSet", "Pod" ]
//	    output_resources: [ "ReplicaSet", "Pod" ]
//	  }
//	}
//
// Some words of explanation for this choice: It's very natural for deployment
// to be in the list of input resources. This is where things begin.
// ReplicaSet is an output resource, because they are being created based on
// Deployment input. However, once ReplicaSet is created, same transformer
// needs to create Pods for it - hence ReplicaSet is also listed as an input
// and Pod is listed as an output. Also, when deployment changes and creates
// new ReplicaSet, transformer will move EXISTING Pods under old ReplicaSet
// into new one. Because it needs to read "current" Pods resources state, Pod
// is also listed as an input resource. If we wanted controller to delete old
// pods and create new ones instead of moving from one replica to another,
// then we could potentially remove "Pod" from being an input resource.
//
// Protoc plugin will generate transformer structure that:
// * Connects to DeploymentStore, ReplicaSetStore and PodStore instances on
// the LEFT side (input).
// * Connects to ReplicaSetSyncer and PodSyncer on the RIGHT side (output).
// Code-gen cannot generate business logic on its own, therefore developer
// who defined skeleton in proto file, will have to provide customized
// implementation AND configuration objects.
//
// * Configuration contains Deployment_FieldMask, ReplicaSet_FieldMask and
// Pod_FieldMask (used for updates, described later below) PLUS snapshot
// timeout (will describe later below).
// * Implementation is for executing business logic, it will look like this:
//
//	interface TransformerImpl {
//	  CalculateSnapshot() *TransformerSnapshot
//	  /*
//	   Optional methods to be implemented:
//	   OnDeploymentSet(current, previous *Deployment) *DiffActions
//	   OnDeploymentDeleted(deleted *Deployment) *DiffActions
//	   OnReplicaSetSet(current, previous *ReplicaSet) *DiffActions
//	   OnReplicaSetDeleted(deleted *ReplicaSet) *DiffActions
//	   OnPodSet(current, previous *Pod) *DiffActions
//	   OnPodDeleted(deleted *Pod) *DiffActions
//	  */
//	}
//
//	struct TransformerSnapshot {
//	  ReplicaSets []*ReplicaSet
//	  Pod []*Pod
//	}
//
//	struct DiffActions {
//	  ReplicaSetsToSet    []*ReplicaSet
//	  ReplicaSetsToDelete []*ReplicaSet
//	  PodsToSet           []*Pod
//	  PodsToDelete        []*Pod
//	}
//
// CalculateSnapshot will be called by auto-generated transformer when it
// is needed, which is:
// * When all input stores are synchronized (controller is starting
// up or recovering)
// * Some time after Deployment/ReplicaSet/Pod has been added/deleted.
// * Some time after Deployment/ReplicaSet/Pod has been modified according to
// the field masks passed in the configuration object. This is to prevent
// snapshot being called when changed fields are not the ones we are
// interested in. You can notice this "Some time after" sentence above.
// Updates can happen one after another and calling snapshot every time would
// cause unnecessary strain on a CPU/other resources. Instead, timeout is
// configured (passed in the Config!) that allow events to be accumulated.
// Other way to prevent snapshot from being calculated after any create,
// update or delete, is to provide optional implementation, for example this
// OnDeploymentSet method as you can see above.
// OnDeploymentSet is called when:
// * New Deployment has been created (Be aware that "previous" pointer is
// nil in this case)
// * Deployment has been modified according to the field mask passed in the
// config object.
// OnDeploymentSet will NOT be called:
// * at controller startup or recovery - snapshot remains to be required in
// this case.
//
// If TransformerImpl implements function OnDeploymentSet, then transformer,
// instead of scheduling snapshot, will call OnDeploymentSet without any delay
// and pass the diff to the syncer object. This will allow developer to write
// controller that acts faster than it would be.
//
// Another thing to note here: You may see that PodsToDelete are of type *Pod
// instead of *Name. Same goes for ReplicaSets. It is because transformer
// OUTPUT resources are desired, not observed ones. And desired resources
// MAY NOT have their names fully specified in the first place. See Syncer
// documentation, there is a possibility for custom ID extractor function to
// be provided. Because name can be omitted in desired resource (and custom ID
// extraction is required from full object), during deletion it is also
// required to provide *Pod instead of *Name. However, if developer provides
// Name values in the desired resource (in any *ToSet parameter), it is
// perfectly fine to put instances with only name field populated in *ToDelete
// array. PodsToDelete just needs to be given objects with all fields necessary
// for identification purposes.
type Processor_Transformer_GenericTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of a snapshot
	SnapshotModel Processor_Transformer_GenericTransformer_SnapshotModel `protobuf:"varint,1,opt,name=snapshot_model,json=snapshotModel,proto3,enum=goten.controller.Processor_Transformer_GenericTransformer_SnapshotModel" json:"snapshot_model,omitempty"`
	// List of the input resource names.
	InputResources []string `protobuf:"bytes,2,rep,name=input_resources,json=inputResources,proto3" json:"input_resources,omitempty"`
	// List of the output resource names.
	OutputResources []string `protobuf:"bytes,3,rep,name=output_resources,json=outputResources,proto3" json:"output_resources,omitempty"`
}

func (x *Processor_Transformer_GenericTransformer) Reset() {
	*x = Processor_Transformer_GenericTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_Transformer_GenericTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_Transformer_GenericTransformer) ProtoMessage() {}

func (x *Processor_Transformer_GenericTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_Transformer_GenericTransformer.ProtoReflect.Descriptor instead.
func (*Processor_Transformer_GenericTransformer) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *Processor_Transformer_GenericTransformer) GetSnapshotModel() Processor_Transformer_GenericTransformer_SnapshotModel {
	if x != nil {
		return x.SnapshotModel
	}
	return Processor_Transformer_GenericTransformer_AFTER_UNHANDLED_UPDATE
}

func (x *Processor_Transformer_GenericTransformer) GetInputResources() []string {
	if x != nil {
		return x.InputResources
	}
	return nil
}

func (x *Processor_Transformer_GenericTransformer) GetOutputResources() []string {
	if x != nil {
		return x.OutputResources
	}
	return nil
}

// OwnerOwneeTransformer is a special transformer type. It is recommended to
// use it when:
// * We have only one output resource type - we will call this ownee resource.
// * Among input resources we can define "owners", which should hold ownership
// of a produced, desired resources. Each set of owners is basically holding
// SOME partition of the ownee resources.
// * We want transformer to automatically manage ownership (if one of the
// owners is deleted, then all associated ownee resources also need to be
// deleted and we want this to be done automatically).
// For example, suppose we need to write controller that, for some
// combinations of Node + DaemonSet, creates Pod resources. We want also to
// automatically do garbage collections: When Node is deleted, then Pods also
// need to be deleted. When DaemonSet is deleted, then Pods also will need to
// be deleted. Also, if we change specification of the DaemonSet, which will
// result in some Nodes being "removed" from it, then all relevant Pods also
// will need to be deleted. We can then define following transformer:
//
//	{
//	  name: "PodsCreator",
//	  owner_ownee: {
//	   owner_resources: [ "DaemonSet", "Node" ]
//	   ownee_resource: "Pod"
//	  }
//	}
//
// Protoc plugin will generate transformer that:
// * Connects to DaemonSetStore and NodeStore instances on the LEFT side (input).
// * Connects to PodSyncer instance on the RIGHT side (output).
// * Requires interface implemented by PodDesiredState on the right side.
//
// Code-gen cannot generate business logic on its own, therefore developer
// who defined skeleton in proto file, will have to provide customized
// implementation AND configuration objects.
//
// * Configuration contains DaemonSet_FieldMask and Node_FieldMask and
// Pod_FieldMask (used for updates, described later below)
// * Implementation is for executing business logic, it will look like this:
//
//	struct PCPodsByDaemonSet {
//	  Pods        []*pod.Pod
//	  NodeCoOwner *node.Name
//	}
//
//	struct PCPodsByNode {
//	  Pods             []*pod.Pod
//	  DaemonSetCoOwner *daemon_set.Name
//	}
//
//	interface TransformerImpl {
//	 CalculateByNode(node *node.Node) []*PCPodsByNode
//	 CalculateByDaemonSet(daemonSet *daemon_set.DaemonSet) []*PCPodsByDaemonSet
//	}
//
// CalculateByNode is called when:
// * New Node is received (it was created, or controller is starting
// up/recovering)
// * Node has been modified according to the Node_FieldMask passed in the
// config.
// CalculateByDaemonSet is called in similar fashion. Note: prefix "PC" comes
// from "PodsCreator" name.
//
// Note that CalculateByNode is returning not just the Pods associated with
// that Node. It will also tell all DaemonSets with which Node is connected
// and having common Pods. Basically, CalculateByNode and CalculateByDaemonSet
// are called on different axis of the same resource set.
//
// Same use case as above we can also be described in a little different way
// using same transformer type:
//
//	{
//	  name: "PodsCreator",
//	  owner_ownee: {
//	   owner_resources: [ "Node" ]
//	   ownee_resource: "Pod"
//	   additional_inputs: [ "DaemonSet" ]
//	  }
//	}
//
// Everything will be generally same, except required implementation:
//
//	interface TransformerImpl {
//	 CalculateByNode(node *node.Node) []*pod.Pod
//	 OnDaemonSetSet(current, previous *daemon_set.DaemonSet) []*node.Node
//	 OnDaemonSetDeleted(deleted *daemon_set.DaemonSet) []*node.Node
//	}
//
// OnDaemonSetSet and OnDaemonSetDeleted will basically indicate for
// which Node instances CalculateByNode MUST to be recomputed!
//
// AdditionalInputs basically are used to describe resources, of which changes
// trigger recalculation of the desired ownee resources. Of course, usually
// its better to use AdditionalInputs for resources which are not part
// of the "ownership" management but take part in the business logic,
// but other notations can also be used for convenience.
type Processor_Transformer_OwnerOwneeTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of the owner resource names.
	OwnerResources []string `protobuf:"bytes,1,rep,name=owner_resources,json=ownerResources,proto3" json:"owner_resources,omitempty"`
	// Name of the ownee resource name.
	OwneeResource string `protobuf:"bytes,2,opt,name=ownee_resource,json=owneeResource,proto3" json:"ownee_resource,omitempty"`
	// List of the additional input resource names. Those resources are not
	// considered as "owner" resources. But sometimes change of a "non-owner"
	// resource may trigger recalculation of a desired state for some selected
	// "owner" resources.
	AdditionalInputs []string `protobuf:"bytes,3,rep,name=additional_inputs,json=additionalInputs,proto3" json:"additional_inputs,omitempty"`
}

func (x *Processor_Transformer_OwnerOwneeTransformer) Reset() {
	*x = Processor_Transformer_OwnerOwneeTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_Transformer_OwnerOwneeTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_Transformer_OwnerOwneeTransformer) ProtoMessage() {}

func (x *Processor_Transformer_OwnerOwneeTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_Transformer_OwnerOwneeTransformer.ProtoReflect.Descriptor instead.
func (*Processor_Transformer_OwnerOwneeTransformer) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 1, 1}
}

func (x *Processor_Transformer_OwnerOwneeTransformer) GetOwnerResources() []string {
	if x != nil {
		return x.OwnerResources
	}
	return nil
}

func (x *Processor_Transformer_OwnerOwneeTransformer) GetOwneeResource() string {
	if x != nil {
		return x.OwneeResource
	}
	return ""
}

func (x *Processor_Transformer_OwnerOwneeTransformer) GetAdditionalInputs() []string {
	if x != nil {
		return x.AdditionalInputs
	}
	return nil
}

// Decorator is another specialized transformer type: It focuses on just one
// resource set and decorates each of its members.
// Decorator should be used when input and output resource is actually same
// instance. Output instance is just the decorated version of the input. As in
// OwnerOwneeTransformer, we can also define additional input resources that
// can force decorator to recalculate desired state of a selected resources.
// For example, suppose we want to decorate each Pod with some custom labels.
// Those labels however also depend on Container resources which run on
// those pods. We can define following decorator:
//
//	{
//	  name: "PodLabelModifier",
//	  decorator: {
//	    resource: "Pod"
//	    additional_inputs: [ "Container" ]
//	  }
//	}
//
// Protoc plugin will generate transformer structure that:
// * Connects to the PodStore and ContainerStore on the LEFT side (input).
// * Connects to the PodSyncer on the RIGHT side (output).
// * Write custom business logic (processor) and call transformer constructor
// using it.
//
// Code-gen cannot generate business logic on its own, therefore developer
// who defined skeleton in proto file, will have to provide customized
// implementation AND configuration objects.
//
// * Configuration contains Pod_FieldMask and Container_FieldMask (used for
// updates, described later below)
// * Implementation is for executing business logic, it will look like this:
//
//	interface TransformerImpl {
//	  DecoratePod(pod *pod.Pod)
//	  OnContainerUpdated(current, previous *container.Container) []*pod.Pod
//	  OnContainerDeleted(deleted *container.Container) []*pod.Pod
//	}
//
// DecoratePod will be called when:
// * Pod is new (either it was really created or controller has just
// started/recovering).
// * Pod is modified according to the field mask passed in Config.
// * When Recalculation of a Pod is forced by OnContainerUpdated or
// OnContainerDeleted. Those two functions must always return list of pods
// which require recalculation due to Container changes. OnContainerUpdated
// will be called also when:
// * Container is new (newly created or controller is starting/recovering).
// "previous" is nil!
// * Container is modified according to the field mask passed in Config.
type Processor_Transformer_DecoratorTransformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Output resource name.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// List of additional input resource names.
	AdditionalInputs []string `protobuf:"bytes,2,rep,name=additional_inputs,json=additionalInputs,proto3" json:"additional_inputs,omitempty"`
}

func (x *Processor_Transformer_DecoratorTransformer) Reset() {
	*x = Processor_Transformer_DecoratorTransformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_Transformer_DecoratorTransformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_Transformer_DecoratorTransformer) ProtoMessage() {}

func (x *Processor_Transformer_DecoratorTransformer) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_Transformer_DecoratorTransformer.ProtoReflect.Descriptor instead.
func (*Processor_Transformer_DecoratorTransformer) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 1, 2}
}

func (x *Processor_Transformer_DecoratorTransformer) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Processor_Transformer_DecoratorTransformer) GetAdditionalInputs() []string {
	if x != nil {
		return x.AdditionalInputs
	}
	return nil
}

// DesiredSource informs which transformer should be supplying desired state
// of a syncer.
type Processor_Syncer_DesiredSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of a transformer connecting to Syncer.
	TransformerName string `protobuf:"bytes,1,opt,name=transformer_name,json=transformerName,proto3" json:"transformer_name,omitempty"`
	// Resource output name from transformer. This can be omitted and compiler
	// will try to auto-detect after iterating over all transformer output types.
	// It will fail if by any chance transformer provides multiple resource outputs
	// with same underlying type.
	OutputName string `protobuf:"bytes,2,opt,name=output_name,json=outputName,proto3" json:"output_name,omitempty"`
}

func (x *Processor_Syncer_DesiredSource) Reset() {
	*x = Processor_Syncer_DesiredSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Processor_Syncer_DesiredSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Processor_Syncer_DesiredSource) ProtoMessage() {}

func (x *Processor_Syncer_DesiredSource) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Processor_Syncer_DesiredSource.ProtoReflect.Descriptor instead.
func (*Processor_Syncer_DesiredSource) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{1, 2, 0}
}

func (x *Processor_Syncer_DesiredSource) GetTransformerName() string {
	if x != nil {
		return x.TransformerName
	}
	return ""
}

func (x *Processor_Syncer_DesiredSource) GetOutputName() string {
	if x != nil {
		return x.OutputName
	}
	return ""
}

// Sharding informs Node how to use ntt.sharding.RingConfig object it has in
// order to split the work with other Node instances of its kind.
// As pointed in RingConfig documentation, ring can contain many possible
// field paths (with different labels), because different resources on the
// same ring may simply have different field paths where shard indicator is
// located.
type Node_Sharding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default label informs which label in RingConfig points to a field path
	// containing shard information for most (if not all) of resources.
	DefaultLabel string `protobuf:"bytes,1,opt,name=default_label,json=defaultLabel,proto3" json:"default_label,omitempty"`
	// Overrides per each ControlledResource.
	Overrides []*Node_Sharding_PerControlledResource `protobuf:"bytes,2,rep,name=overrides,proto3" json:"overrides,omitempty"`
}

func (x *Node_Sharding) Reset() {
	*x = Node_Sharding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Sharding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Sharding) ProtoMessage() {}

func (x *Node_Sharding) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Sharding.ProtoReflect.Descriptor instead.
func (*Node_Sharding) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Node_Sharding) GetDefaultLabel() string {
	if x != nil {
		return x.DefaultLabel
	}
	return ""
}

func (x *Node_Sharding) GetOverrides() []*Node_Sharding_PerControlledResource {
	if x != nil {
		return x.Overrides
	}
	return nil
}

// Dispatchment informs Node how to group watched resources into their scopes
// before dispatching data to single-scope Processor instances.
type Node_Dispatchment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Informs how to extract scope identifier from scope resource
	ScopeGrouping *Node_Dispatchment_ScopeGrouping `protobuf:"bytes,1,opt,name=scope_grouping,json=scopeGrouping,proto3" json:"scope_grouping,omitempty"`
	// Informs how to extract scope identifier from the inputs required by
	// connected Processor instances.
	InputGroupings []*Node_Dispatchment_InputGrouping `protobuf:"bytes,2,rep,name=input_groupings,json=inputGroupings,proto3" json:"input_groupings,omitempty"`
}

func (x *Node_Dispatchment) Reset() {
	*x = Node_Dispatchment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Dispatchment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Dispatchment) ProtoMessage() {}

func (x *Node_Dispatchment) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Dispatchment.ProtoReflect.Descriptor instead.
func (*Node_Dispatchment) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Node_Dispatchment) GetScopeGrouping() *Node_Dispatchment_ScopeGrouping {
	if x != nil {
		return x.ScopeGrouping
	}
	return nil
}

func (x *Node_Dispatchment) GetInputGroupings() []*Node_Dispatchment_InputGrouping {
	if x != nil {
		return x.InputGroupings
	}
	return nil
}

// PerControlledResource is informing what label in RingConfig should be
// used for specific resource
type Node_Sharding_PerControlledResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the ControlledResource (as in Processor)
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Label value
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Node_Sharding_PerControlledResource) Reset() {
	*x = Node_Sharding_PerControlledResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Sharding_PerControlledResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Sharding_PerControlledResource) ProtoMessage() {}

func (x *Node_Sharding_PerControlledResource) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Sharding_PerControlledResource.ProtoReflect.Descriptor instead.
func (*Node_Sharding_PerControlledResource) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Node_Sharding_PerControlledResource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Node_Sharding_PerControlledResource) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// ScopeGrouping determines how scope identifier is extracted from given
// Scope object. Usually it is name, but if relation between scope and
// associated resources is not trivial, other methods can be used.
type Node_Dispatchment_ScopeGrouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Method by which scope identifier is extracted from scope object.
	Method Node_Dispatchment_GroupingMethod `protobuf:"varint,1,opt,name=method,proto3,enum=goten.controller.Node_Dispatchment_GroupingMethod" json:"method,omitempty"`
	// Field path where the scope identifier is located IF method is of FIELD type.
	FieldPath string `protobuf:"bytes,2,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
}

func (x *Node_Dispatchment_ScopeGrouping) Reset() {
	*x = Node_Dispatchment_ScopeGrouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Dispatchment_ScopeGrouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Dispatchment_ScopeGrouping) ProtoMessage() {}

func (x *Node_Dispatchment_ScopeGrouping) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Dispatchment_ScopeGrouping.ProtoReflect.Descriptor instead.
func (*Node_Dispatchment_ScopeGrouping) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *Node_Dispatchment_ScopeGrouping) GetMethod() Node_Dispatchment_GroupingMethod {
	if x != nil {
		return x.Method
	}
	return Node_Dispatchment_NAME
}

func (x *Node_Dispatchment_ScopeGrouping) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

// InputGrouping describes how to extract scope identifier from a resources of
// a single type.
type Node_Dispatchment_InputGrouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the resource (ControlledResource) this grouping is assigned to.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Method by which scope identifier is extracted
	Method Node_Dispatchment_GroupingMethod `protobuf:"varint,2,opt,name=method,proto3,enum=goten.controller.Node_Dispatchment_GroupingMethod" json:"method,omitempty"`
	// Field path where the scope identifier is located IF method is of FIELD type.
	FieldPath string `protobuf:"bytes,3,opt,name=field_path,json=fieldPath,proto3" json:"field_path,omitempty"`
}

func (x *Node_Dispatchment_InputGrouping) Reset() {
	*x = Node_Dispatchment_InputGrouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_goten_annotations_controller_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_Dispatchment_InputGrouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_Dispatchment_InputGrouping) ProtoMessage() {}

func (x *Node_Dispatchment_InputGrouping) ProtoReflect() protoreflect.Message {
	mi := &file_goten_annotations_controller_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_Dispatchment_InputGrouping.ProtoReflect.Descriptor instead.
func (*Node_Dispatchment_InputGrouping) Descriptor() ([]byte, []int) {
	return file_goten_annotations_controller_proto_rawDescGZIP(), []int{2, 1, 1}
}

func (x *Node_Dispatchment_InputGrouping) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Node_Dispatchment_InputGrouping) GetMethod() Node_Dispatchment_GroupingMethod {
	if x != nil {
		return x.Method
	}
	return Node_Dispatchment_NAME
}

func (x *Node_Dispatchment_InputGrouping) GetFieldPath() string {
	if x != nil {
		return x.FieldPath
	}
	return ""
}

var file_goten_annotations_controller_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*TypeSet)(nil),
		Field:         75000,
		Name:          "goten.controller.type_set",
		Tag:           "bytes,75000,opt,name=type_set",
		Filename:      "goten/annotations/controller.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*Processor)(nil),
		Field:         75001,
		Name:          "goten.controller.processor",
		Tag:           "bytes,75001,opt,name=processor",
		Filename:      "goten/annotations/controller.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*Node)(nil),
		Field:         75002,
		Name:          "goten.controller.node",
		Tag:           "bytes,75002,opt,name=node",
		Filename:      "goten/annotations/controller.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// Description of a TypeSet module attached to this file.
	//
	// optional goten.controller.TypeSet type_set = 75000;
	E_TypeSet = &file_goten_annotations_controller_proto_extTypes[0]
	// Description of a processor module attached to the file.
	//
	// optional goten.controller.Processor processor = 75001;
	E_Processor = &file_goten_annotations_controller_proto_extTypes[1]
	// Description of a node module attached to this file.
	//
	// optional goten.controller.Node node = 75002;
	E_Node = &file_goten_annotations_controller_proto_extTypes[2]
)

var File_goten_annotations_controller_proto protoreflect.FileDescriptor

var file_goten_annotations_controller_proto_rawDesc = []byte{
	0x0a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x05, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x65, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x2e,
	0x53, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x1a,
	0x23, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x1a, 0x28, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xcc,
	0x01, 0x0a, 0x05, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x59, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x1a, 0x24, 0x0a,
	0x06, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x1a, 0x39, 0x0a, 0x09, 0x53, 0x76, 0x63, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb9,
	0x0c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x50, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x72, 0x73, 0x1a, 0x76, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x1a, 0xd0, 0x06, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x56, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x60, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x64, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65,
	0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x94, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x6f,
	0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x52, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x94,
	0x01, 0x0a, 0x15, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x1a, 0x5f, 0x0a, 0x14, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xf9,
	0x01, 0x0a, 0x06, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x1a, 0x5b, 0x0a,
	0x0d, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x07, 0x0a, 0x04, 0x4e,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xcf, 0x01,
	0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x53, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x1a, 0x49, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a,
	0x8c, 0x04, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x58, 0x0a, 0x0e, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x0f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x7a, 0x0a, 0x0d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x4a, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61,
	0x74, 0x68, 0x1a, 0x96, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x4a, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x32, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x61, 0x74, 0x68, 0x22, 0x31, 0x0a, 0x0e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x02, 0x3a, 0x54,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf8, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x52, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x65, 0x74, 0x3a, 0x59, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xf9, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x3a,
	0x4a, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfa, 0xc9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x42, 0x32, 0x5a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77,
	0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goten_annotations_controller_proto_rawDescOnce sync.Once
	file_goten_annotations_controller_proto_rawDescData = file_goten_annotations_controller_proto_rawDesc
)

func file_goten_annotations_controller_proto_rawDescGZIP() []byte {
	file_goten_annotations_controller_proto_rawDescOnce.Do(func() {
		file_goten_annotations_controller_proto_rawDescData = protoimpl.X.CompressGZIP(file_goten_annotations_controller_proto_rawDescData)
	})
	return file_goten_annotations_controller_proto_rawDescData
}

var file_goten_annotations_controller_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_goten_annotations_controller_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_goten_annotations_controller_proto_goTypes = []interface{}{
	(Processor_Transformer_GenericTransformer_SnapshotModel)(0), // 0: goten.controller.Processor.Transformer.GenericTransformer.SnapshotModel
	(Node_Dispatchment_GroupingMethod)(0),                       // 1: goten.controller.Node.Dispatchment.GroupingMethod
	(*TypeSet)(nil),                                             // 2: goten.controller.TypeSet
	(*Processor)(nil),                                           // 3: goten.controller.Processor
	(*Node)(nil),                                                // 4: goten.controller.Node
	(*TypeSet_Input)(nil),                                       // 5: goten.controller.TypeSet.Input
	(*TypeSet_DataSource)(nil),                                  // 6: goten.controller.TypeSet.DataSource
	(*TypeSet_Store)(nil),                                       // 7: goten.controller.TypeSet.Store
	(*TypeSet_Syncer)(nil),                                      // 8: goten.controller.TypeSet.Syncer
	(*TypeSet_SvcImport)(nil),                                   // 9: goten.controller.TypeSet.SvcImport
	(*TypeSet_Store_Index)(nil),                                 // 10: goten.controller.TypeSet.Store.Index
	(*Processor_ControlledResource)(nil),                        // 11: goten.controller.Processor.ControlledResource
	(*Processor_Transformer)(nil),                               // 12: goten.controller.Processor.Transformer
	(*Processor_Syncer)(nil),                                    // 13: goten.controller.Processor.Syncer
	(*Processor_Transformer_GenericTransformer)(nil),            // 14: goten.controller.Processor.Transformer.GenericTransformer
	(*Processor_Transformer_OwnerOwneeTransformer)(nil),         // 15: goten.controller.Processor.Transformer.OwnerOwneeTransformer
	(*Processor_Transformer_DecoratorTransformer)(nil),          // 16: goten.controller.Processor.Transformer.DecoratorTransformer
	(*Processor_Syncer_DesiredSource)(nil),                      // 17: goten.controller.Processor.Syncer.DesiredSource
	(*Node_Sharding)(nil),                                       // 18: goten.controller.Node.Sharding
	(*Node_Dispatchment)(nil),                                   // 19: goten.controller.Node.Dispatchment
	(*Node_Sharding_PerControlledResource)(nil),                 // 20: goten.controller.Node.Sharding.PerControlledResource
	(*Node_Dispatchment_ScopeGrouping)(nil),                     // 21: goten.controller.Node.Dispatchment.ScopeGrouping
	(*Node_Dispatchment_InputGrouping)(nil),                     // 22: goten.controller.Node.Dispatchment.InputGrouping
	(*descriptorpb.FileOptions)(nil),                            // 23: google.protobuf.FileOptions
}
var file_goten_annotations_controller_proto_depIdxs = []int32{
	9,  // 0: goten.controller.TypeSet.services:type_name -> goten.controller.TypeSet.SvcImport
	5,  // 1: goten.controller.TypeSet.inputs:type_name -> goten.controller.TypeSet.Input
	6,  // 2: goten.controller.TypeSet.data_sources:type_name -> goten.controller.TypeSet.DataSource
	7,  // 3: goten.controller.TypeSet.stores:type_name -> goten.controller.TypeSet.Store
	8,  // 4: goten.controller.TypeSet.syncers:type_name -> goten.controller.TypeSet.Syncer
	11, // 5: goten.controller.Processor.definitions:type_name -> goten.controller.Processor.ControlledResource
	12, // 6: goten.controller.Processor.transformers:type_name -> goten.controller.Processor.Transformer
	13, // 7: goten.controller.Processor.syncers:type_name -> goten.controller.Processor.Syncer
	18, // 8: goten.controller.Node.sharding:type_name -> goten.controller.Node.Sharding
	19, // 9: goten.controller.Node.dispatchment:type_name -> goten.controller.Node.Dispatchment
	10, // 10: goten.controller.TypeSet.Store.custom_indices:type_name -> goten.controller.TypeSet.Store.Index
	14, // 11: goten.controller.Processor.Transformer.generic:type_name -> goten.controller.Processor.Transformer.GenericTransformer
	15, // 12: goten.controller.Processor.Transformer.owner_ownee:type_name -> goten.controller.Processor.Transformer.OwnerOwneeTransformer
	16, // 13: goten.controller.Processor.Transformer.decorator:type_name -> goten.controller.Processor.Transformer.DecoratorTransformer
	17, // 14: goten.controller.Processor.Syncer.desired_output:type_name -> goten.controller.Processor.Syncer.DesiredSource
	0,  // 15: goten.controller.Processor.Transformer.GenericTransformer.snapshot_model:type_name -> goten.controller.Processor.Transformer.GenericTransformer.SnapshotModel
	20, // 16: goten.controller.Node.Sharding.overrides:type_name -> goten.controller.Node.Sharding.PerControlledResource
	21, // 17: goten.controller.Node.Dispatchment.scope_grouping:type_name -> goten.controller.Node.Dispatchment.ScopeGrouping
	22, // 18: goten.controller.Node.Dispatchment.input_groupings:type_name -> goten.controller.Node.Dispatchment.InputGrouping
	1,  // 19: goten.controller.Node.Dispatchment.ScopeGrouping.method:type_name -> goten.controller.Node.Dispatchment.GroupingMethod
	1,  // 20: goten.controller.Node.Dispatchment.InputGrouping.method:type_name -> goten.controller.Node.Dispatchment.GroupingMethod
	23, // 21: goten.controller.type_set:extendee -> google.protobuf.FileOptions
	23, // 22: goten.controller.processor:extendee -> google.protobuf.FileOptions
	23, // 23: goten.controller.node:extendee -> google.protobuf.FileOptions
	2,  // 24: goten.controller.type_set:type_name -> goten.controller.TypeSet
	3,  // 25: goten.controller.processor:type_name -> goten.controller.Processor
	4,  // 26: goten.controller.node:type_name -> goten.controller.Node
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	24, // [24:27] is the sub-list for extension type_name
	21, // [21:24] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_goten_annotations_controller_proto_init() }
func file_goten_annotations_controller_proto_init() {
	if File_goten_annotations_controller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_goten_annotations_controller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet_DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet_Store); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet_Syncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet_SvcImport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSet_Store_Index); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_ControlledResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_Transformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_Syncer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_Transformer_GenericTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_Transformer_OwnerOwneeTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_Transformer_DecoratorTransformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Processor_Syncer_DesiredSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Sharding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Dispatchment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Sharding_PerControlledResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Dispatchment_ScopeGrouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_goten_annotations_controller_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_Dispatchment_InputGrouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_goten_annotations_controller_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*Processor_Transformer_Generic)(nil),
		(*Processor_Transformer_OwnerOwnee)(nil),
		(*Processor_Transformer_Decorator)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goten_annotations_controller_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   21,
			NumExtensions: 3,
			NumServices:   0,
		},
		GoTypes:           file_goten_annotations_controller_proto_goTypes,
		DependencyIndexes: file_goten_annotations_controller_proto_depIdxs,
		EnumInfos:         file_goten_annotations_controller_proto_enumTypes,
		MessageInfos:      file_goten_annotations_controller_proto_msgTypes,
		ExtensionInfos:    file_goten_annotations_controller_proto_extTypes,
	}.Build()
	File_goten_annotations_controller_proto = out.File
	file_goten_annotations_controller_proto_rawDesc = nil
	file_goten_annotations_controller_proto_goTypes = nil
	file_goten_annotations_controller_proto_depIdxs = nil
}
