// Code generated by protoc-gen-goten-client
// API: DeploymentService
// DO NOT EDIT!!!

package deployment_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	deployment "github.com/cloudwan/goten-sdk/meta-service/resources/v1/deployment"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &emptypb.Empty{}
	_ = &deployment.Deployment{}
)

var (
	descriptorsInitialized                 bool
	deploymentServiceDescriptor            *DeploymentServiceDescriptor
	getDeploymentDescriptor                *GetDeploymentDescriptor
	batchGetDeploymentsDescriptor          *BatchGetDeploymentsDescriptor
	listDeploymentsDescriptor              *ListDeploymentsDescriptor
	watchDeploymentDescriptor              *WatchDeploymentDescriptor
	watchDeploymentsDescriptor             *WatchDeploymentsDescriptor
	createDeploymentDescriptor             *CreateDeploymentDescriptor
	updateDeploymentDescriptor             *UpdateDeploymentDescriptor
	deleteDeploymentDescriptor             *DeleteDeploymentDescriptor
	beginUpgradeDescriptor                 *BeginUpgradeDescriptor
	setAvailableUpgradeDescriptor          *SetAvailableUpgradeDescriptor
	notifyShardsUpgradeReadinessDescriptor *NotifyShardsUpgradeReadinessDescriptor
	getOrRegisterDataUpdateTaskDescriptor  *GetOrRegisterDataUpdateTaskDescriptor
	updateDataTaskUpdateDescriptor         *UpdateDataTaskUpdateDescriptor
)

type GetDeploymentDescriptor struct{}

type GetDeploymentDescriptorClientMsgHandle struct{}

type GetDeploymentDescriptorServerMsgHandle struct{}

func (d *GetDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetDeploymentRequest{}
}

func (d *GetDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &deployment.Deployment{}
}

func (d *GetDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *GetDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *GetDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *GetDeploymentDescriptor) IsCollection() bool {
	return false
}

func (d *GetDeploymentDescriptor) IsPlural() bool {
	return false
}

func (d *GetDeploymentDescriptor) HasResource() bool {
	return true
}

func (d *GetDeploymentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetDeploymentDescriptor) GetVerb() string {
	return "get"
}

func (d *GetDeploymentDescriptor) GetMethodName() string {
	return "GetDeployment"
}

func (d *GetDeploymentDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/GetDeployment"
}

func (d *GetDeploymentDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *GetDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *GetDeploymentDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *GetDeploymentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *GetDeploymentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *GetDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeploymentDescriptorClientMsgHandle{}
}

func (d *GetDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetDeploymentDescriptorServerMsgHandle{}
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetDeploymentRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetDeploymentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetDeploymentRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*deployment.Deployment) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*deployment.Deployment) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*deployment.Deployment) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*deployment.Deployment)
}

func (h *GetDeploymentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*deployment.Deployment) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetDeploymentDescriptor() *GetDeploymentDescriptor {
	return getDeploymentDescriptor
}

type BatchGetDeploymentsDescriptor struct{}

type BatchGetDeploymentsDescriptorClientMsgHandle struct{}

type BatchGetDeploymentsDescriptorServerMsgHandle struct{}

func (d *BatchGetDeploymentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetDeploymentsRequest{}
}

func (d *BatchGetDeploymentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetDeploymentsResponse{}
}

func (d *BatchGetDeploymentsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetDeploymentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetDeploymentsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetDeploymentsDescriptor) GetMethodName() string {
	return "BatchGetDeployments"
}

func (d *BatchGetDeploymentsDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/BatchGetDeployments"
}

func (d *BatchGetDeploymentsDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *BatchGetDeploymentsDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *BatchGetDeploymentsDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *BatchGetDeploymentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetDeploymentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *BatchGetDeploymentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *BatchGetDeploymentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeploymentsDescriptorClientMsgHandle{}
}

func (d *BatchGetDeploymentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetDeploymentsDescriptorServerMsgHandle{}
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeploymentsRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeploymentsRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return deployment.DeploymentNameList(names)
		}
	}
	return (deployment.DeploymentNameList)(nil)
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeploymentsRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeploymentsRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeploymentsRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetDeploymentsResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetDeploymentsResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeployments(); len(resources) > 0 {
			list := make(deployment.DeploymentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (deployment.DeploymentNameList)(nil)
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetDeploymentsResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetDeploymentsResponse) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetDeploymentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetDeploymentsResponse) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeployments(); len(resources) > 0 {
			return deployment.DeploymentList(resources)
		}
	}
	return (deployment.DeploymentList)(nil)
}

func GetBatchGetDeploymentsDescriptor() *BatchGetDeploymentsDescriptor {
	return batchGetDeploymentsDescriptor
}

type ListDeploymentsDescriptor struct{}

type ListDeploymentsDescriptorClientMsgHandle struct{}

type ListDeploymentsDescriptorServerMsgHandle struct{}

func (d *ListDeploymentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListDeploymentsRequest{}
}

func (d *ListDeploymentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListDeploymentsResponse{}
}

func (d *ListDeploymentsDescriptor) IsUnary() bool {
	return true
}

func (d *ListDeploymentsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListDeploymentsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListDeploymentsDescriptor) IsCollection() bool {
	return true
}

func (d *ListDeploymentsDescriptor) IsPlural() bool {
	return true
}

func (d *ListDeploymentsDescriptor) HasResource() bool {
	return true
}

func (d *ListDeploymentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListDeploymentsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListDeploymentsDescriptor) GetMethodName() string {
	return "ListDeployments"
}

func (d *ListDeploymentsDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/ListDeployments"
}

func (d *ListDeploymentsDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *ListDeploymentsDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *ListDeploymentsDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *ListDeploymentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListDeploymentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *ListDeploymentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *ListDeploymentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeploymentsDescriptorClientMsgHandle{}
}

func (d *ListDeploymentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListDeploymentsDescriptorServerMsgHandle{}
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeploymentsRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeploymentsRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeploymentsRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*deployment.ParentName)(nil)
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeploymentsRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeploymentsRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListDeploymentsResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListDeploymentsResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetDeployments(); len(resources) > 0 {
			list := make(deployment.DeploymentNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (deployment.DeploymentNameList)(nil)
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListDeploymentsResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListDeploymentsResponse) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListDeploymentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListDeploymentsResponse) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetDeployments(); len(resources) > 0 {
			return deployment.DeploymentList(resources)
		}
	}
	return (deployment.DeploymentList)(nil)
}

func GetListDeploymentsDescriptor() *ListDeploymentsDescriptor {
	return listDeploymentsDescriptor
}

type WatchDeploymentDescriptor struct{}

type WatchDeploymentDescriptorClientMsgHandle struct{}

type WatchDeploymentDescriptorServerMsgHandle struct{}

func (d *WatchDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeploymentRequest{}
}

func (d *WatchDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeploymentResponse{}
}

func (d *WatchDeploymentDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeploymentDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeploymentDescriptor) IsCollection() bool {
	return false
}

func (d *WatchDeploymentDescriptor) IsPlural() bool {
	return false
}

func (d *WatchDeploymentDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeploymentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeploymentDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeploymentDescriptor) GetMethodName() string {
	return "WatchDeployment"
}

func (d *WatchDeploymentDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/WatchDeployment"
}

func (d *WatchDeploymentDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *WatchDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *WatchDeploymentDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *WatchDeploymentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *WatchDeploymentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *WatchDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentDescriptorClientMsgHandle{}
}

func (d *WatchDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentDescriptorServerMsgHandle{}
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeploymentRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeploymentRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeploymentResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *deployment.DeploymentChange_Added_:
				return tResChange.Added.GetDeployment().GetName()
			case *deployment.DeploymentChange_Modified_:
				return tResChange.Modified.GetName()
			case *deployment.DeploymentChange_Removed_:
				return tResChange.Removed.GetName()
			case *deployment.DeploymentChange_Current_:
				return tResChange.Current.GetDeployment().GetName()
			}
		}
	}
	return (*deployment.Name)(nil)
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeploymentResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeploymentResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeploymentResponse) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *deployment.DeploymentChange_Added_:
				return tResChange.Added.GetDeployment()
			case *deployment.DeploymentChange_Modified_:
				return tResChange.Modified.GetDeployment()
			case *deployment.DeploymentChange_Current_:
				return tResChange.Current.GetDeployment()
			}
		}
	}
	return (*deployment.Deployment)(nil)
}

func (h *WatchDeploymentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeploymentResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeploymentResponse) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchDeploymentDescriptor() *WatchDeploymentDescriptor {
	return watchDeploymentDescriptor
}

type WatchDeploymentsDescriptor struct{}

type WatchDeploymentsDescriptorClientMsgHandle struct{}

type WatchDeploymentsDescriptorServerMsgHandle struct{}

func (d *WatchDeploymentsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchDeploymentsRequest{}
}

func (d *WatchDeploymentsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchDeploymentsResponse{}
}

func (d *WatchDeploymentsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchDeploymentsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchDeploymentsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) HasResource() bool {
	return true
}

func (d *WatchDeploymentsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchDeploymentsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchDeploymentsDescriptor) GetMethodName() string {
	return "WatchDeployments"
}

func (d *WatchDeploymentsDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/WatchDeployments"
}

func (d *WatchDeploymentsDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *WatchDeploymentsDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *WatchDeploymentsDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *WatchDeploymentsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchDeploymentsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *WatchDeploymentsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *WatchDeploymentsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentsDescriptorClientMsgHandle{}
}

func (d *WatchDeploymentsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchDeploymentsDescriptorServerMsgHandle{}
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeploymentsRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeploymentsRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeploymentsRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*deployment.ParentName)(nil)
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeploymentsRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeploymentsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeploymentsRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchDeploymentsResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchDeploymentsResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeploymentChanges(); len(resChanges) > 0 {
			list := make(deployment.DeploymentNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *deployment.DeploymentChange_Added_:
					list = append(list, tResChange.Added.GetDeployment().GetName())
				case *deployment.DeploymentChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *deployment.DeploymentChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *deployment.DeploymentChange_Current_:
					list = append(list, tResChange.Current.GetDeployment().GetName())
				}
			}
			return list
		}
	}
	return (deployment.DeploymentNameList)(nil)
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchDeploymentsResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchDeploymentsResponse) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchDeploymentsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchDeploymentsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchDeploymentsResponse) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetDeploymentChanges(); len(resChanges) > 0 {
			list := make(deployment.DeploymentList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *deployment.DeploymentChange_Added_:
					list = append(list, tResChange.Added.GetDeployment())
				case *deployment.DeploymentChange_Modified_:
					list = append(list, tResChange.Modified.GetDeployment())
				case *deployment.DeploymentChange_Current_:
					list = append(list, tResChange.Current.GetDeployment())
				}
			}
			return list
		}
	}
	return (deployment.DeploymentList)(nil)
}

func GetWatchDeploymentsDescriptor() *WatchDeploymentsDescriptor {
	return watchDeploymentsDescriptor
}

type CreateDeploymentDescriptor struct{}

type CreateDeploymentDescriptorClientMsgHandle struct{}

type CreateDeploymentDescriptorServerMsgHandle struct{}

func (d *CreateDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateDeploymentRequest{}
}

func (d *CreateDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &deployment.Deployment{}
}

func (d *CreateDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *CreateDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateDeploymentDescriptor) IsCollection() bool {
	return true
}

func (d *CreateDeploymentDescriptor) IsPlural() bool {
	return false
}

func (d *CreateDeploymentDescriptor) HasResource() bool {
	return true
}

func (d *CreateDeploymentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateDeploymentDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateDeploymentDescriptor) GetMethodName() string {
	return "CreateDeployment"
}

func (d *CreateDeploymentDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/CreateDeployment"
}

func (d *CreateDeploymentDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *CreateDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *CreateDeploymentDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *CreateDeploymentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *CreateDeploymentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *CreateDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeploymentDescriptorClientMsgHandle{}
}

func (d *CreateDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateDeploymentDescriptorServerMsgHandle{}
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeployment()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*deployment.ParentName)(nil)
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateDeploymentRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDeployment()
	}
	return (*deployment.Deployment)(nil)
}

func (h *CreateDeploymentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateDeploymentRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*deployment.Deployment) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*deployment.Deployment) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*deployment.Deployment) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*deployment.Deployment)
}

func (h *CreateDeploymentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*deployment.Deployment) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateDeploymentDescriptor() *CreateDeploymentDescriptor {
	return createDeploymentDescriptor
}

type UpdateDeploymentDescriptor struct{}

type UpdateDeploymentDescriptorClientMsgHandle struct{}

type UpdateDeploymentDescriptorServerMsgHandle struct{}

func (d *UpdateDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDeploymentRequest{}
}

func (d *UpdateDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &deployment.Deployment{}
}

func (d *UpdateDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDeploymentDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDeploymentDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateDeploymentDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateDeploymentDescriptor) GetMethodName() string {
	return "UpdateDeployment"
}

func (d *UpdateDeploymentDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/UpdateDeployment"
}

func (d *UpdateDeploymentDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *UpdateDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *UpdateDeploymentDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *UpdateDeploymentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *UpdateDeploymentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *UpdateDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeploymentDescriptorClientMsgHandle{}
}

func (d *UpdateDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDeploymentDescriptorServerMsgHandle{}
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetDeployment()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateDeploymentRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetDeployment()
	}
	return (*deployment.Deployment)(nil)
}

func (h *UpdateDeploymentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateDeploymentRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*deployment.Deployment) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*deployment.Deployment) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*deployment.Deployment) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*deployment.Deployment)
}

func (h *UpdateDeploymentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*deployment.Deployment)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*deployment.Deployment) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateDeploymentDescriptor() *UpdateDeploymentDescriptor {
	return updateDeploymentDescriptor
}

type DeleteDeploymentDescriptor struct{}

type DeleteDeploymentDescriptorClientMsgHandle struct{}

type DeleteDeploymentDescriptorServerMsgHandle struct{}

func (d *DeleteDeploymentDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteDeploymentRequest{}
}

func (d *DeleteDeploymentDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteDeploymentDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteDeploymentDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) HasResource() bool {
	return true
}

func (d *DeleteDeploymentDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteDeploymentDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteDeploymentDescriptor) GetMethodName() string {
	return "DeleteDeployment"
}

func (d *DeleteDeploymentDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/DeleteDeployment"
}

func (d *DeleteDeploymentDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *DeleteDeploymentDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *DeleteDeploymentDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *DeleteDeploymentDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteDeploymentDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *DeleteDeploymentDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *DeleteDeploymentDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeploymentDescriptorClientMsgHandle{}
}

func (d *DeleteDeploymentDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteDeploymentDescriptorServerMsgHandle{}
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteDeploymentRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteDeploymentRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteDeploymentRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteDeploymentRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteDeploymentRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteDeploymentRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteDeploymentDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteDeploymentDescriptor() *DeleteDeploymentDescriptor {
	return deleteDeploymentDescriptor
}

type BeginUpgradeDescriptor struct{}

type BeginUpgradeDescriptorClientMsgHandle struct{}

type BeginUpgradeDescriptorServerMsgHandle struct{}

func (d *BeginUpgradeDescriptor) NewEmptyClientMsg() proto.Message {
	return &BeginUpgradeRequest{}
}

func (d *BeginUpgradeDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *BeginUpgradeDescriptor) IsUnary() bool {
	return true
}

func (d *BeginUpgradeDescriptor) IsClientStream() bool {
	return false
}

func (d *BeginUpgradeDescriptor) IsServerStream() bool {
	return false
}

func (d *BeginUpgradeDescriptor) IsCollection() bool {
	return false
}

func (d *BeginUpgradeDescriptor) IsPlural() bool {
	return false
}

func (d *BeginUpgradeDescriptor) HasResource() bool {
	return true
}

func (d *BeginUpgradeDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BeginUpgradeDescriptor) GetVerb() string {
	return "beginUpgrade"
}

func (d *BeginUpgradeDescriptor) GetMethodName() string {
	return "BeginUpgrade"
}

func (d *BeginUpgradeDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/BeginUpgrade"
}

func (d *BeginUpgradeDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *BeginUpgradeDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *BeginUpgradeDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *BeginUpgradeDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BeginUpgradeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *BeginUpgradeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *BeginUpgradeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BeginUpgradeDescriptorClientMsgHandle{}
}

func (d *BeginUpgradeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BeginUpgradeDescriptorServerMsgHandle{}
}

func (h *BeginUpgradeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BeginUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BeginUpgradeRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *BeginUpgradeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BeginUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BeginUpgradeRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *BeginUpgradeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BeginUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BeginUpgradeRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BeginUpgradeDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BeginUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BeginUpgradeRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BeginUpgradeDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BeginUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BeginUpgradeRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BeginUpgradeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BeginUpgradeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *BeginUpgradeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BeginUpgradeDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BeginUpgradeDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetBeginUpgradeDescriptor() *BeginUpgradeDescriptor {
	return beginUpgradeDescriptor
}

type SetAvailableUpgradeDescriptor struct{}

type SetAvailableUpgradeDescriptorClientMsgHandle struct{}

type SetAvailableUpgradeDescriptorServerMsgHandle struct{}

func (d *SetAvailableUpgradeDescriptor) NewEmptyClientMsg() proto.Message {
	return &SetAvailableUpgradeRequest{}
}

func (d *SetAvailableUpgradeDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *SetAvailableUpgradeDescriptor) IsUnary() bool {
	return true
}

func (d *SetAvailableUpgradeDescriptor) IsClientStream() bool {
	return false
}

func (d *SetAvailableUpgradeDescriptor) IsServerStream() bool {
	return false
}

func (d *SetAvailableUpgradeDescriptor) IsCollection() bool {
	return false
}

func (d *SetAvailableUpgradeDescriptor) IsPlural() bool {
	return false
}

func (d *SetAvailableUpgradeDescriptor) HasResource() bool {
	return true
}

func (d *SetAvailableUpgradeDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *SetAvailableUpgradeDescriptor) GetVerb() string {
	return "setAvailableUpgrade"
}

func (d *SetAvailableUpgradeDescriptor) GetMethodName() string {
	return "SetAvailableUpgrade"
}

func (d *SetAvailableUpgradeDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/SetAvailableUpgrade"
}

func (d *SetAvailableUpgradeDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *SetAvailableUpgradeDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *SetAvailableUpgradeDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *SetAvailableUpgradeDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *SetAvailableUpgradeDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *SetAvailableUpgradeDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *SetAvailableUpgradeDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SetAvailableUpgradeDescriptorClientMsgHandle{}
}

func (d *SetAvailableUpgradeDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &SetAvailableUpgradeDescriptorServerMsgHandle{}
}

func (h *SetAvailableUpgradeDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SetAvailableUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*SetAvailableUpgradeRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *SetAvailableUpgradeDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*SetAvailableUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*SetAvailableUpgradeRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*SetAvailableUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*SetAvailableUpgradeRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*SetAvailableUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*SetAvailableUpgradeRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*SetAvailableUpgradeRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*SetAvailableUpgradeRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *SetAvailableUpgradeDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetSetAvailableUpgradeDescriptor() *SetAvailableUpgradeDescriptor {
	return setAvailableUpgradeDescriptor
}

type NotifyShardsUpgradeReadinessDescriptor struct{}

type NotifyShardsUpgradeReadinessDescriptorClientMsgHandle struct{}

type NotifyShardsUpgradeReadinessDescriptorServerMsgHandle struct{}

func (d *NotifyShardsUpgradeReadinessDescriptor) NewEmptyClientMsg() proto.Message {
	return &NotifyShardsUpgradeReadinessRequest{}
}

func (d *NotifyShardsUpgradeReadinessDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *NotifyShardsUpgradeReadinessDescriptor) IsUnary() bool {
	return true
}

func (d *NotifyShardsUpgradeReadinessDescriptor) IsClientStream() bool {
	return false
}

func (d *NotifyShardsUpgradeReadinessDescriptor) IsServerStream() bool {
	return false
}

func (d *NotifyShardsUpgradeReadinessDescriptor) IsCollection() bool {
	return false
}

func (d *NotifyShardsUpgradeReadinessDescriptor) IsPlural() bool {
	return false
}

func (d *NotifyShardsUpgradeReadinessDescriptor) HasResource() bool {
	return true
}

func (d *NotifyShardsUpgradeReadinessDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetVerb() string {
	return "notifyShardsUpgradeReadiness"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetMethodName() string {
	return "NotifyShardsUpgradeReadiness"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/NotifyShardsUpgradeReadiness"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &NotifyShardsUpgradeReadinessDescriptorClientMsgHandle{}
}

func (d *NotifyShardsUpgradeReadinessDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &NotifyShardsUpgradeReadinessDescriptorServerMsgHandle{}
}

func (h *NotifyShardsUpgradeReadinessDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*NotifyShardsUpgradeReadinessRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*NotifyShardsUpgradeReadinessRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *NotifyShardsUpgradeReadinessDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*NotifyShardsUpgradeReadinessRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*NotifyShardsUpgradeReadinessRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*NotifyShardsUpgradeReadinessRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*NotifyShardsUpgradeReadinessRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*NotifyShardsUpgradeReadinessRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*NotifyShardsUpgradeReadinessRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*NotifyShardsUpgradeReadinessRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*NotifyShardsUpgradeReadinessRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *NotifyShardsUpgradeReadinessDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetNotifyShardsUpgradeReadinessDescriptor() *NotifyShardsUpgradeReadinessDescriptor {
	return notifyShardsUpgradeReadinessDescriptor
}

type GetOrRegisterDataUpdateTaskDescriptor struct{}

type GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle struct{}

type GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle struct{}

func (d *GetOrRegisterDataUpdateTaskDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetOrRegisterDataUpdateTaskRequest{}
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) NewEmptyServerMsg() proto.Message {
	return &GetOrRegisterDataUpdateTaskResponse{}
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) IsUnary() bool {
	return true
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) IsClientStream() bool {
	return false
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) IsServerStream() bool {
	return false
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) IsCollection() bool {
	return false
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) IsPlural() bool {
	return false
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) HasResource() bool {
	return true
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetVerb() string {
	return "getOrRegisterDataUpdateTask"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetMethodName() string {
	return "GetOrRegisterDataUpdateTask"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/GetOrRegisterDataUpdateTask"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle{}
}

func (d *GetOrRegisterDataUpdateTaskDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle{}
}

func (h *GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetOrRegisterDataUpdateTaskRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetOrRegisterDataUpdateTaskRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetOrRegisterDataUpdateTaskRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetOrRegisterDataUpdateTaskRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetOrRegisterDataUpdateTaskRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetOrRegisterDataUpdateTaskResponse) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetOrRegisterDataUpdateTaskResponse) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetOrRegisterDataUpdateTaskResponse) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetOrRegisterDataUpdateTaskResponse) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetOrRegisterDataUpdateTaskDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetOrRegisterDataUpdateTaskResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetOrRegisterDataUpdateTaskResponse) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetOrRegisterDataUpdateTaskDescriptor() *GetOrRegisterDataUpdateTaskDescriptor {
	return getOrRegisterDataUpdateTaskDescriptor
}

type UpdateDataTaskUpdateDescriptor struct{}

type UpdateDataTaskUpdateDescriptorClientMsgHandle struct{}

type UpdateDataTaskUpdateDescriptorServerMsgHandle struct{}

func (d *UpdateDataTaskUpdateDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateDataTaskUpdateRequest{}
}

func (d *UpdateDataTaskUpdateDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *UpdateDataTaskUpdateDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateDataTaskUpdateDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateDataTaskUpdateDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateDataTaskUpdateDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateDataTaskUpdateDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateDataTaskUpdateDescriptor) HasResource() bool {
	return true
}

func (d *UpdateDataTaskUpdateDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *UpdateDataTaskUpdateDescriptor) GetVerb() string {
	return "updateDataTaskUpdate"
}

func (d *UpdateDataTaskUpdateDescriptor) GetMethodName() string {
	return "UpdateDataTaskUpdate"
}

func (d *UpdateDataTaskUpdateDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.DeploymentService/UpdateDataTaskUpdate"
}

func (d *UpdateDataTaskUpdateDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *UpdateDataTaskUpdateDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *UpdateDataTaskUpdateDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *UpdateDataTaskUpdateDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateDataTaskUpdateDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return deploymentServiceDescriptor
}

func (d *UpdateDataTaskUpdateDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return deployment.GetDescriptor()
}

func (d *UpdateDataTaskUpdateDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDataTaskUpdateDescriptorClientMsgHandle{}
}

func (d *UpdateDataTaskUpdateDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateDataTaskUpdateDescriptorServerMsgHandle{}
}

func (h *UpdateDataTaskUpdateDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDataTaskUpdateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateDataTaskUpdateRequest) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*deployment.Name)(nil)
}

func (h *UpdateDataTaskUpdateDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateDataTaskUpdateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateDataTaskUpdateRequest) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateDataTaskUpdateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateDataTaskUpdateRequest) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateDataTaskUpdateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateDataTaskUpdateRequest) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateDataTaskUpdateRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateDataTaskUpdateRequest) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *deployment.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*deployment.Name
	})
	if ok {
		return deployment.DeploymentNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*emptypb.Empty) *deployment.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *deployment.Deployment
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *UpdateDataTaskUpdateDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*deployment.Deployment
	})
	if ok {
		return deployment.DeploymentList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateDataTaskUpdateDescriptor() *UpdateDataTaskUpdateDescriptor {
	return updateDataTaskUpdateDescriptor
}

type DeploymentServiceDescriptor struct{}

func (d *DeploymentServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getDeploymentDescriptor,
		batchGetDeploymentsDescriptor,
		listDeploymentsDescriptor,
		watchDeploymentDescriptor,
		watchDeploymentsDescriptor,
		createDeploymentDescriptor,
		updateDeploymentDescriptor,
		deleteDeploymentDescriptor,
		beginUpgradeDescriptor,
		setAvailableUpgradeDescriptor,
		notifyShardsUpgradeReadinessDescriptor,
		getOrRegisterDataUpdateTaskDescriptor,
		updateDataTaskUpdateDescriptor,
	}
}

func (d *DeploymentServiceDescriptor) GetFullAPIName() string {
	return "/goten.meta.v1.DeploymentService"
}

func (d *DeploymentServiceDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *DeploymentServiceDescriptor) GetApiName() string {
	return "DeploymentService"
}

func (d *DeploymentServiceDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *DeploymentServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetDeploymentServiceDescriptor() *DeploymentServiceDescriptor {
	return deploymentServiceDescriptor
}

func initDescriptors() {
	deploymentServiceDescriptor = &DeploymentServiceDescriptor{}
	getDeploymentDescriptor = &GetDeploymentDescriptor{}
	batchGetDeploymentsDescriptor = &BatchGetDeploymentsDescriptor{}
	listDeploymentsDescriptor = &ListDeploymentsDescriptor{}
	watchDeploymentDescriptor = &WatchDeploymentDescriptor{}
	watchDeploymentsDescriptor = &WatchDeploymentsDescriptor{}
	createDeploymentDescriptor = &CreateDeploymentDescriptor{}
	updateDeploymentDescriptor = &UpdateDeploymentDescriptor{}
	deleteDeploymentDescriptor = &DeleteDeploymentDescriptor{}
	beginUpgradeDescriptor = &BeginUpgradeDescriptor{}
	setAvailableUpgradeDescriptor = &SetAvailableUpgradeDescriptor{}
	notifyShardsUpgradeReadinessDescriptor = &NotifyShardsUpgradeReadinessDescriptor{}
	getOrRegisterDataUpdateTaskDescriptor = &GetOrRegisterDataUpdateTaskDescriptor{}
	updateDataTaskUpdateDescriptor = &UpdateDataTaskUpdateDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(deploymentServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetDeploymentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listDeploymentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchDeploymentsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteDeploymentDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(beginUpgradeDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(setAvailableUpgradeDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(notifyShardsUpgradeReadinessDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getOrRegisterDataUpdateTaskDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateDataTaskUpdateDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
