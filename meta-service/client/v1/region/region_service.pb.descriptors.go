// Code generated by protoc-gen-goten-client
// API: RegionService
// DO NOT EDIT!!!

package region_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	region "github.com/cloudwan/goten-sdk/meta-service/resources/v1/region"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &emptypb.Empty{}
	_ = &region.Region{}
)

var (
	descriptorsInitialized    bool
	regionServiceDescriptor   *RegionServiceDescriptor
	getRegionDescriptor       *GetRegionDescriptor
	batchGetRegionsDescriptor *BatchGetRegionsDescriptor
	listRegionsDescriptor     *ListRegionsDescriptor
	watchRegionDescriptor     *WatchRegionDescriptor
	watchRegionsDescriptor    *WatchRegionsDescriptor
	createRegionDescriptor    *CreateRegionDescriptor
	updateRegionDescriptor    *UpdateRegionDescriptor
	deleteRegionDescriptor    *DeleteRegionDescriptor
)

type GetRegionDescriptor struct{}

type GetRegionDescriptorClientMsgHandle struct{}

type GetRegionDescriptorServerMsgHandle struct{}

func (d *GetRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetRegionRequest{}
}

func (d *GetRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &region.Region{}
}

func (d *GetRegionDescriptor) IsUnary() bool {
	return true
}

func (d *GetRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *GetRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *GetRegionDescriptor) IsCollection() bool {
	return false
}

func (d *GetRegionDescriptor) IsPlural() bool {
	return false
}

func (d *GetRegionDescriptor) HasResource() bool {
	return true
}

func (d *GetRegionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetRegionDescriptor) GetVerb() string {
	return "get"
}

func (d *GetRegionDescriptor) GetMethodName() string {
	return "GetRegion"
}

func (d *GetRegionDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/GetRegion"
}

func (d *GetRegionDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *GetRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *GetRegionDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *GetRegionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *GetRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *GetRegionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *GetRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRegionDescriptorClientMsgHandle{}
}

func (d *GetRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetRegionDescriptorServerMsgHandle{}
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*GetRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*GetRegionRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *GetRegionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*GetRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*GetRegionRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*region.Region) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*region.Region) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*region.Region)
}

func (h *GetRegionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*region.Region) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetGetRegionDescriptor() *GetRegionDescriptor {
	return getRegionDescriptor
}

type BatchGetRegionsDescriptor struct{}

type BatchGetRegionsDescriptorClientMsgHandle struct{}

type BatchGetRegionsDescriptorServerMsgHandle struct{}

func (d *BatchGetRegionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetRegionsRequest{}
}

func (d *BatchGetRegionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetRegionsResponse{}
}

func (d *BatchGetRegionsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetRegionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetRegionsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetRegionsDescriptor) GetMethodName() string {
	return "BatchGetRegions"
}

func (d *BatchGetRegionsDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/BatchGetRegions"
}

func (d *BatchGetRegionsDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *BatchGetRegionsDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *BatchGetRegionsDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *BatchGetRegionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *BatchGetRegionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *BatchGetRegionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *BatchGetRegionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRegionsDescriptorClientMsgHandle{}
}

func (d *BatchGetRegionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetRegionsDescriptorServerMsgHandle{}
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetRegionsRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetRegionsRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if names := typedMsg.GetNames(); len(names) > 0 {
			return region.RegionNameList(names)
		}
	}
	return (region.RegionNameList)(nil)
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetRegionsRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetRegionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetRegionsRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetRegionsResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetRegionsResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetRegions(); len(resources) > 0 {
			list := make(region.RegionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (region.RegionNameList)(nil)
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*BatchGetRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*BatchGetRegionsResponse) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *BatchGetRegionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*BatchGetRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*BatchGetRegionsResponse) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetRegions(); len(resources) > 0 {
			return region.RegionList(resources)
		}
	}
	return (region.RegionList)(nil)
}

func GetBatchGetRegionsDescriptor() *BatchGetRegionsDescriptor {
	return batchGetRegionsDescriptor
}

type ListRegionsDescriptor struct{}

type ListRegionsDescriptorClientMsgHandle struct{}

type ListRegionsDescriptorServerMsgHandle struct{}

func (d *ListRegionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListRegionsRequest{}
}

func (d *ListRegionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListRegionsResponse{}
}

func (d *ListRegionsDescriptor) IsUnary() bool {
	return true
}

func (d *ListRegionsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListRegionsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListRegionsDescriptor) IsCollection() bool {
	return true
}

func (d *ListRegionsDescriptor) IsPlural() bool {
	return true
}

func (d *ListRegionsDescriptor) HasResource() bool {
	return true
}

func (d *ListRegionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListRegionsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListRegionsDescriptor) GetMethodName() string {
	return "ListRegions"
}

func (d *ListRegionsDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/ListRegions"
}

func (d *ListRegionsDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *ListRegionsDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *ListRegionsDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *ListRegionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *ListRegionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *ListRegionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *ListRegionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRegionsDescriptorClientMsgHandle{}
}

func (d *ListRegionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListRegionsDescriptorServerMsgHandle{}
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListRegionsRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListRegionsRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListRegionsRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListRegionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListRegionsRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListRegionsResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListRegionsResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetRegions(); len(resources) > 0 {
			list := make(region.RegionNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (region.RegionNameList)(nil)
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*ListRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*ListRegionsResponse) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *ListRegionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*ListRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*ListRegionsResponse) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resources := typedMsg.GetRegions(); len(resources) > 0 {
			return region.RegionList(resources)
		}
	}
	return (region.RegionList)(nil)
}

func GetListRegionsDescriptor() *ListRegionsDescriptor {
	return listRegionsDescriptor
}

type WatchRegionDescriptor struct{}

type WatchRegionDescriptorClientMsgHandle struct{}

type WatchRegionDescriptorServerMsgHandle struct{}

func (d *WatchRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRegionRequest{}
}

func (d *WatchRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRegionResponse{}
}

func (d *WatchRegionDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRegionDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRegionDescriptor) IsCollection() bool {
	return false
}

func (d *WatchRegionDescriptor) IsPlural() bool {
	return false
}

func (d *WatchRegionDescriptor) HasResource() bool {
	return true
}

func (d *WatchRegionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRegionDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRegionDescriptor) GetMethodName() string {
	return "WatchRegion"
}

func (d *WatchRegionDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/WatchRegion"
}

func (d *WatchRegionDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *WatchRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *WatchRegionDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *WatchRegionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *WatchRegionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *WatchRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionDescriptorClientMsgHandle{}
}

func (d *WatchRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionDescriptorServerMsgHandle{}
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRegionRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchRegionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRegionRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRegionResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *region.RegionChange_Added_:
				return tResChange.Added.GetRegion().GetName()
			case *region.RegionChange_Modified_:
				return tResChange.Modified.GetName()
			case *region.RegionChange_Removed_:
				return tResChange.Removed.GetName()
			case *region.RegionChange_Current_:
				return tResChange.Current.GetRegion().GetName()
			}
		}
	}
	return (*region.Name)(nil)
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRegionResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRegionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRegionResponse) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *region.RegionChange_Added_:
				return tResChange.Added.GetRegion()
			case *region.RegionChange_Modified_:
				return tResChange.Modified.GetRegion()
			case *region.RegionChange_Current_:
				return tResChange.Current.GetRegion()
			}
		}
	}
	return (*region.Region)(nil)
}

func (h *WatchRegionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRegionResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRegionResponse) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetWatchRegionDescriptor() *WatchRegionDescriptor {
	return watchRegionDescriptor
}

type WatchRegionsDescriptor struct{}

type WatchRegionsDescriptorClientMsgHandle struct{}

type WatchRegionsDescriptorServerMsgHandle struct{}

func (d *WatchRegionsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchRegionsRequest{}
}

func (d *WatchRegionsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchRegionsResponse{}
}

func (d *WatchRegionsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchRegionsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchRegionsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchRegionsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchRegionsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchRegionsDescriptor) HasResource() bool {
	return true
}

func (d *WatchRegionsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchRegionsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchRegionsDescriptor) GetMethodName() string {
	return "WatchRegions"
}

func (d *WatchRegionsDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/WatchRegions"
}

func (d *WatchRegionsDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *WatchRegionsDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *WatchRegionsDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *WatchRegionsDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *WatchRegionsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *WatchRegionsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *WatchRegionsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionsDescriptorClientMsgHandle{}
}

func (d *WatchRegionsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchRegionsDescriptorServerMsgHandle{}
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRegionsRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRegionsRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRegionsRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchRegionsDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRegionsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRegionsRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchRegionsResponse) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchRegionsResponse) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetRegionChanges(); len(resChanges) > 0 {
			list := make(region.RegionNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *region.RegionChange_Added_:
					list = append(list, tResChange.Added.GetRegion().GetName())
				case *region.RegionChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *region.RegionChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *region.RegionChange_Current_:
					list = append(list, tResChange.Current.GetRegion().GetName())
				}
			}
			return list
		}
	}
	return (region.RegionNameList)(nil)
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*WatchRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*WatchRegionsResponse) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *WatchRegionsDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*WatchRegionsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*WatchRegionsResponse) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	{
		if resChanges := typedMsg.GetRegionChanges(); len(resChanges) > 0 {
			list := make(region.RegionList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *region.RegionChange_Added_:
					list = append(list, tResChange.Added.GetRegion())
				case *region.RegionChange_Modified_:
					list = append(list, tResChange.Modified.GetRegion())
				case *region.RegionChange_Current_:
					list = append(list, tResChange.Current.GetRegion())
				}
			}
			return list
		}
	}
	return (region.RegionList)(nil)
}

func GetWatchRegionsDescriptor() *WatchRegionsDescriptor {
	return watchRegionsDescriptor
}

type CreateRegionDescriptor struct{}

type CreateRegionDescriptorClientMsgHandle struct{}

type CreateRegionDescriptorServerMsgHandle struct{}

func (d *CreateRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateRegionRequest{}
}

func (d *CreateRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &region.Region{}
}

func (d *CreateRegionDescriptor) IsUnary() bool {
	return true
}

func (d *CreateRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateRegionDescriptor) IsCollection() bool {
	return true
}

func (d *CreateRegionDescriptor) IsPlural() bool {
	return false
}

func (d *CreateRegionDescriptor) HasResource() bool {
	return true
}

func (d *CreateRegionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateRegionDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateRegionDescriptor) GetMethodName() string {
	return "CreateRegion"
}

func (d *CreateRegionDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/CreateRegion"
}

func (d *CreateRegionDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *CreateRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *CreateRegionDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *CreateRegionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *CreateRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *CreateRegionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *CreateRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRegionDescriptorClientMsgHandle{}
}

func (d *CreateRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateRegionDescriptorServerMsgHandle{}
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetRegion()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*CreateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*CreateRegionRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetRegion()
	}
	return (*region.Region)(nil)
}

func (h *CreateRegionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*CreateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*CreateRegionRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*region.Region) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*region.Region) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*region.Region)
}

func (h *CreateRegionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*region.Region) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetCreateRegionDescriptor() *CreateRegionDescriptor {
	return createRegionDescriptor
}

type UpdateRegionDescriptor struct{}

type UpdateRegionDescriptorClientMsgHandle struct{}

type UpdateRegionDescriptorServerMsgHandle struct{}

func (d *UpdateRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateRegionRequest{}
}

func (d *UpdateRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &region.Region{}
}

func (d *UpdateRegionDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateRegionDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateRegionDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateRegionDescriptor) HasResource() bool {
	return true
}

func (d *UpdateRegionDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateRegionDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateRegionDescriptor) GetMethodName() string {
	return "UpdateRegion"
}

func (d *UpdateRegionDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/UpdateRegion"
}

func (d *UpdateRegionDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *UpdateRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *UpdateRegionDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *UpdateRegionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *UpdateRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *UpdateRegionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *UpdateRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRegionDescriptorClientMsgHandle{}
}

func (d *UpdateRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateRegionDescriptorServerMsgHandle{}
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetRegion()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*UpdateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*UpdateRegionRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	{
		return typedMsg.GetRegion()
	}
	return (*region.Region)(nil)
}

func (h *UpdateRegionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*UpdateRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*UpdateRegionRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*region.Region) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*region.Region) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	return msg.(*region.Region)
}

func (h *UpdateRegionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*region.Region)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*region.Region) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetUpdateRegionDescriptor() *UpdateRegionDescriptor {
	return updateRegionDescriptor
}

type DeleteRegionDescriptor struct{}

type DeleteRegionDescriptorClientMsgHandle struct{}

type DeleteRegionDescriptorServerMsgHandle struct{}

func (d *DeleteRegionDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteRegionRequest{}
}

func (d *DeleteRegionDescriptor) NewEmptyServerMsg() proto.Message {
	return &emptypb.Empty{}
}

func (d *DeleteRegionDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteRegionDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteRegionDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteRegionDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteRegionDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteRegionDescriptor) HasResource() bool {
	return true
}

func (d *DeleteRegionDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteRegionDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteRegionDescriptor) GetMethodName() string {
	return "DeleteRegion"
}

func (d *DeleteRegionDescriptor) GetFullMethodName() string {
	return "/goten.meta.v1.RegionService/DeleteRegion"
}

func (d *DeleteRegionDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *DeleteRegionDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *DeleteRegionDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *DeleteRegionDescriptor) GetServiceVersion() string {
	return "v1"
}

func (d *DeleteRegionDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return regionServiceDescriptor
}

func (d *DeleteRegionDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return region.GetDescriptor()
}

func (d *DeleteRegionDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRegionDescriptorClientMsgHandle{}
}

func (d *DeleteRegionDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteRegionDescriptorServerMsgHandle{}
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteRegionRequest) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*region.Name)(nil)
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteRegionRequest) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*DeleteRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*DeleteRegionRequest) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteRegionDescriptorClientMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*DeleteRegionRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*DeleteRegionRequest) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*emptypb.Empty) *region.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*emptypb.Empty) []*region.Name
	})
	if ok {
		return region.RegionNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractResourceBody(msg proto.Message) gotenresource.Resource {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBody(*emptypb.Empty) *region.Region
	})
	if ok {
		return override.OverrideExtractResourceBody(typedMsg)
	}
	return nil
}

func (h *DeleteRegionDescriptorServerMsgHandle) ExtractResourceBodies(msg proto.Message) gotenresource.ResourceList {
	typedMsg := msg.(*emptypb.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceBodies(*emptypb.Empty) []*region.Region
	})
	if ok {
		return region.RegionList(override.OverrideExtractResourceBodies(typedMsg))
	}
	return nil
}

func GetDeleteRegionDescriptor() *DeleteRegionDescriptor {
	return deleteRegionDescriptor
}

type RegionServiceDescriptor struct{}

func (d *RegionServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getRegionDescriptor,
		batchGetRegionsDescriptor,
		listRegionsDescriptor,
		watchRegionDescriptor,
		watchRegionsDescriptor,
		createRegionDescriptor,
		updateRegionDescriptor,
		deleteRegionDescriptor,
	}
}

func (d *RegionServiceDescriptor) GetFullAPIName() string {
	return "/goten.meta.v1.RegionService"
}

func (d *RegionServiceDescriptor) GetProtoPkgName() string {
	return "goten.meta.v1"
}

func (d *RegionServiceDescriptor) GetApiName() string {
	return "RegionService"
}

func (d *RegionServiceDescriptor) GetServiceDomain() string {
	return "meta.goten.com"
}

func (d *RegionServiceDescriptor) GetServiceVersion() string {
	return "v1"
}

func GetRegionServiceDescriptor() *RegionServiceDescriptor {
	return regionServiceDescriptor
}

func initDescriptors() {
	regionServiceDescriptor = &RegionServiceDescriptor{}
	getRegionDescriptor = &GetRegionDescriptor{}
	batchGetRegionsDescriptor = &BatchGetRegionsDescriptor{}
	listRegionsDescriptor = &ListRegionsDescriptor{}
	watchRegionDescriptor = &WatchRegionDescriptor{}
	watchRegionsDescriptor = &WatchRegionsDescriptor{}
	createRegionDescriptor = &CreateRegionDescriptor{}
	updateRegionDescriptor = &UpdateRegionDescriptor{}
	deleteRegionDescriptor = &DeleteRegionDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(regionServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetRegionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listRegionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchRegionsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateRegionDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteRegionDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
