// Code generated by protoc-gen-goten-object
// File: goten/meta-service/proto/v1/deployment.proto
// DO NOT EDIT!!!

package deployment

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	region "github.com/cloudwan/goten-sdk/meta-service/resources/v1/region"
	service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = new(proto.Message)
	_ = new(preflect.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldMask)
)

// make sure we're using proto imports
var (
	_ = &structpb.Struct{}
	_ = &region.Region{}
	_ = &service.Service{}
	_ = &meta.Meta{}
)

type Deployment_FieldMask struct {
	Paths []Deployment_FieldPath
}

func FullDeployment_FieldMask() *Deployment_FieldMask {
	res := &Deployment_FieldMask{}
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorName})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorMetadata})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorServiceName})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorRegion})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorPublicDomain})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorPrivateDomain})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorLocalNetworkId})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorLocation})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorIsDisabled})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorEnvRegistryGeneration})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorCurrentVersion})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorAutomaticVersionSwitch})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorUpgradeState})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorDbDataVersion})
	res.Paths = append(res.Paths, &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorDataUpdateStatuses})
	return res
}

func (fieldMask *Deployment_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Deployment_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Deployment_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeployment_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Deployment_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 15)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*Deployment_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Deployment_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeployment_FieldPath(raw)
	})
}

func (fieldMask *Deployment_FieldMask) ProtoMessage() {}

func (fieldMask *Deployment_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Deployment_FieldMask) Subtract(other *Deployment_FieldMask) *Deployment_FieldMask {
	result := &Deployment_FieldMask{}
	removedSelectors := make([]bool, 15)
	otherSubMasks := map[Deployment_FieldPathSelector]gotenobject.FieldMask{
		Deployment_FieldPathSelectorMetadata:           &meta.Meta_FieldMask{},
		Deployment_FieldPathSelectorLocation:           &Deployment_Location_FieldMask{},
		Deployment_FieldPathSelectorUpgradeState:       &Deployment_UpgradeState_FieldMask{},
		Deployment_FieldPathSelectorDataUpdateStatuses: &Deployment_DbUpdateTaskStatus_FieldMask{},
	}
	mySubMasks := map[Deployment_FieldPathSelector]gotenobject.FieldMask{
		Deployment_FieldPathSelectorMetadata:           &meta.Meta_FieldMask{},
		Deployment_FieldPathSelectorLocation:           &Deployment_Location_FieldMask{},
		Deployment_FieldPathSelectorUpgradeState:       &Deployment_UpgradeState_FieldMask{},
		Deployment_FieldPathSelectorDataUpdateStatuses: &Deployment_DbUpdateTaskStatus_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *Deployment_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *Deployment_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*Deployment_FieldTerminalPath); ok {
					switch tp.selector {
					case Deployment_FieldPathSelectorMetadata:
						mySubMasks[Deployment_FieldPathSelectorMetadata] = meta.FullMeta_FieldMask()
					case Deployment_FieldPathSelectorLocation:
						mySubMasks[Deployment_FieldPathSelectorLocation] = FullDeployment_Location_FieldMask()
					case Deployment_FieldPathSelectorUpgradeState:
						mySubMasks[Deployment_FieldPathSelectorUpgradeState] = FullDeployment_UpgradeState_FieldMask()
					case Deployment_FieldPathSelectorDataUpdateStatuses:
						mySubMasks[Deployment_FieldPathSelectorDataUpdateStatuses] = FullDeployment_DbUpdateTaskStatus_FieldMask()
					}
				} else if tp, ok := path.(*Deployment_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &Deployment_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Deployment_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Deployment_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Deployment_FieldMask) FilterInputFields() *Deployment_FieldMask {
	result := &Deployment_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case Deployment_FieldPathSelectorUpgradeState:
		case Deployment_FieldPathSelectorDataUpdateStatuses:
		case Deployment_FieldPathSelectorMetadata:
			if _, ok := path.(*Deployment_FieldTerminalPath); ok {
				for _, subpath := range meta.FullMeta_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Deployment_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*Deployment_FieldSubPath); ok {
				selectedMask := &meta.Meta_FieldMask{
					Paths: []meta.Meta_FieldPath{sub.subPath.(meta.Meta_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorMetadata, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Deployment_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Deployment_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]Deployment_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeployment_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Deployment_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Deployment_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Deployment_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Deployment_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_FieldMask) AppendPath(path Deployment_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Deployment_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(Deployment_FieldPath))
}

func (fieldMask *Deployment_FieldMask) GetPaths() []Deployment_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Deployment_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Deployment_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeployment_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Deployment_FieldMask) Set(target, source *Deployment) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Deployment_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Deployment), source.(*Deployment))
}

func (fieldMask *Deployment_FieldMask) Project(source *Deployment) *Deployment {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Deployment{}
	metadataMask := &meta.Meta_FieldMask{}
	wholeMetadataAccepted := false
	locationMask := &Deployment_Location_FieldMask{}
	wholeLocationAccepted := false
	upgradeStateMask := &Deployment_UpgradeState_FieldMask{}
	wholeUpgradeStateAccepted := false
	dataUpdateStatusesMask := &Deployment_DbUpdateTaskStatus_FieldMask{}
	wholeDataUpdateStatusesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *Deployment_FieldTerminalPath:
			switch tp.selector {
			case Deployment_FieldPathSelectorName:
				result.Name = source.Name
			case Deployment_FieldPathSelectorMetadata:
				result.Metadata = source.Metadata
				wholeMetadataAccepted = true
			case Deployment_FieldPathSelectorServiceName:
				result.ServiceName = source.ServiceName
			case Deployment_FieldPathSelectorRegion:
				result.Region = source.Region
			case Deployment_FieldPathSelectorPublicDomain:
				result.PublicDomain = source.PublicDomain
			case Deployment_FieldPathSelectorPrivateDomain:
				result.PrivateDomain = source.PrivateDomain
			case Deployment_FieldPathSelectorLocalNetworkId:
				result.LocalNetworkId = source.LocalNetworkId
			case Deployment_FieldPathSelectorLocation:
				result.Location = source.Location
				wholeLocationAccepted = true
			case Deployment_FieldPathSelectorIsDisabled:
				result.IsDisabled = source.IsDisabled
			case Deployment_FieldPathSelectorEnvRegistryGeneration:
				result.EnvRegistryGeneration = source.EnvRegistryGeneration
			case Deployment_FieldPathSelectorCurrentVersion:
				result.CurrentVersion = source.CurrentVersion
			case Deployment_FieldPathSelectorAutomaticVersionSwitch:
				result.AutomaticVersionSwitch = source.AutomaticVersionSwitch
			case Deployment_FieldPathSelectorUpgradeState:
				result.UpgradeState = source.UpgradeState
				wholeUpgradeStateAccepted = true
			case Deployment_FieldPathSelectorDbDataVersion:
				result.DbDataVersion = source.DbDataVersion
			case Deployment_FieldPathSelectorDataUpdateStatuses:
				result.DataUpdateStatuses = source.DataUpdateStatuses
				wholeDataUpdateStatusesAccepted = true
			}
		case *Deployment_FieldSubPath:
			switch tp.selector {
			case Deployment_FieldPathSelectorMetadata:
				metadataMask.AppendPath(tp.subPath.(meta.Meta_FieldPath))
			case Deployment_FieldPathSelectorLocation:
				locationMask.AppendPath(tp.subPath.(DeploymentLocation_FieldPath))
			case Deployment_FieldPathSelectorUpgradeState:
				upgradeStateMask.AppendPath(tp.subPath.(DeploymentUpgradeState_FieldPath))
			case Deployment_FieldPathSelectorDataUpdateStatuses:
				dataUpdateStatusesMask.AppendPath(tp.subPath.(DeploymentDbUpdateTaskStatus_FieldPath))
			}
		}
	}
	if wholeMetadataAccepted == false && len(metadataMask.Paths) > 0 {
		result.Metadata = metadataMask.Project(source.GetMetadata())
	}
	if wholeLocationAccepted == false && len(locationMask.Paths) > 0 {
		result.Location = locationMask.Project(source.GetLocation())
	}
	if wholeUpgradeStateAccepted == false && len(upgradeStateMask.Paths) > 0 {
		result.UpgradeState = upgradeStateMask.Project(source.GetUpgradeState())
	}
	if wholeDataUpdateStatusesAccepted == false && len(dataUpdateStatusesMask.Paths) > 0 {
		for _, sourceItem := range source.GetDataUpdateStatuses() {
			result.DataUpdateStatuses = append(result.DataUpdateStatuses, dataUpdateStatusesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *Deployment_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Deployment))
}

func (fieldMask *Deployment_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Deployment_Location_FieldMask struct {
	Paths []DeploymentLocation_FieldPath
}

func FullDeployment_Location_FieldMask() *Deployment_Location_FieldMask {
	res := &Deployment_Location_FieldMask{}
	res.Paths = append(res.Paths, &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorContinent})
	res.Paths = append(res.Paths, &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorCountry})
	res.Paths = append(res.Paths, &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorAgglomeration})
	res.Paths = append(res.Paths, &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorCity})
	res.Paths = append(res.Paths, &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorCloud})
	return res
}

func (fieldMask *Deployment_Location_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Deployment_Location_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Deployment_Location_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeploymentLocation_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Deployment_Location_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeploymentLocation_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Deployment_Location_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeploymentLocation_FieldPath(raw)
	})
}

func (fieldMask *Deployment_Location_FieldMask) ProtoMessage() {}

func (fieldMask *Deployment_Location_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Deployment_Location_FieldMask) Subtract(other *Deployment_Location_FieldMask) *Deployment_Location_FieldMask {
	result := &Deployment_Location_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeploymentLocation_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Deployment_Location_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Deployment_Location_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Deployment_Location_FieldMask) FilterInputFields() *Deployment_Location_FieldMask {
	result := &Deployment_Location_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Deployment_Location_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Deployment_Location_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeploymentLocation_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeploymentLocation_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Deployment_Location_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Deployment_Location_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_Location_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Deployment_Location_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Deployment_Location_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_Location_FieldMask) AppendPath(path DeploymentLocation_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Deployment_Location_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeploymentLocation_FieldPath))
}

func (fieldMask *Deployment_Location_FieldMask) GetPaths() []DeploymentLocation_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Deployment_Location_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Deployment_Location_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeploymentLocation_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Deployment_Location_FieldMask) Set(target, source *Deployment_Location) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Deployment_Location_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Deployment_Location), source.(*Deployment_Location))
}

func (fieldMask *Deployment_Location_FieldMask) Project(source *Deployment_Location) *Deployment_Location {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Deployment_Location{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeploymentLocation_FieldTerminalPath:
			switch tp.selector {
			case DeploymentLocation_FieldPathSelectorContinent:
				result.Continent = source.Continent
			case DeploymentLocation_FieldPathSelectorCountry:
				result.Country = source.Country
			case DeploymentLocation_FieldPathSelectorAgglomeration:
				result.Agglomeration = source.Agglomeration
			case DeploymentLocation_FieldPathSelectorCity:
				result.City = source.City
			case DeploymentLocation_FieldPathSelectorCloud:
				result.Cloud = source.Cloud
			}
		}
	}
	return result
}

func (fieldMask *Deployment_Location_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Deployment_Location))
}

func (fieldMask *Deployment_Location_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Deployment_UpgradeState_FieldMask struct {
	Paths []DeploymentUpgradeState_FieldPath
}

func FullDeployment_UpgradeState_FieldMask() *Deployment_UpgradeState_FieldMask {
	res := &Deployment_UpgradeState_FieldMask{}
	res.Paths = append(res.Paths, &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorTargetVersion})
	res.Paths = append(res.Paths, &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorReadyShards})
	res.Paths = append(res.Paths, &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorPendingShards})
	res.Paths = append(res.Paths, &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorStage})
	res.Paths = append(res.Paths, &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion})
	return res
}

func (fieldMask *Deployment_UpgradeState_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Deployment_UpgradeState_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Deployment_UpgradeState_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeploymentUpgradeState_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Deployment_UpgradeState_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeploymentUpgradeState_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Deployment_UpgradeState_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeploymentUpgradeState_FieldPath(raw)
	})
}

func (fieldMask *Deployment_UpgradeState_FieldMask) ProtoMessage() {}

func (fieldMask *Deployment_UpgradeState_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Deployment_UpgradeState_FieldMask) Subtract(other *Deployment_UpgradeState_FieldMask) *Deployment_UpgradeState_FieldMask {
	result := &Deployment_UpgradeState_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeploymentUpgradeState_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Deployment_UpgradeState_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Deployment_UpgradeState_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Deployment_UpgradeState_FieldMask) FilterInputFields() *Deployment_UpgradeState_FieldMask {
	result := &Deployment_UpgradeState_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Deployment_UpgradeState_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Deployment_UpgradeState_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeploymentUpgradeState_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeploymentUpgradeState_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Deployment_UpgradeState_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Deployment_UpgradeState_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_UpgradeState_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Deployment_UpgradeState_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Deployment_UpgradeState_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_UpgradeState_FieldMask) AppendPath(path DeploymentUpgradeState_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Deployment_UpgradeState_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeploymentUpgradeState_FieldPath))
}

func (fieldMask *Deployment_UpgradeState_FieldMask) GetPaths() []DeploymentUpgradeState_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Deployment_UpgradeState_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Deployment_UpgradeState_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeploymentUpgradeState_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Deployment_UpgradeState_FieldMask) Set(target, source *Deployment_UpgradeState) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Deployment_UpgradeState_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Deployment_UpgradeState), source.(*Deployment_UpgradeState))
}

func (fieldMask *Deployment_UpgradeState_FieldMask) Project(source *Deployment_UpgradeState) *Deployment_UpgradeState {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Deployment_UpgradeState{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeploymentUpgradeState_FieldTerminalPath:
			switch tp.selector {
			case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
				result.TargetVersion = source.TargetVersion
			case DeploymentUpgradeState_FieldPathSelectorReadyShards:
				result.ReadyShards = source.ReadyShards
			case DeploymentUpgradeState_FieldPathSelectorPendingShards:
				result.PendingShards = source.PendingShards
			case DeploymentUpgradeState_FieldPathSelectorStage:
				result.Stage = source.Stage
			case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
				result.DbDataTargetVersion = source.DbDataTargetVersion
			}
		}
	}
	return result
}

func (fieldMask *Deployment_UpgradeState_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Deployment_UpgradeState))
}

func (fieldMask *Deployment_UpgradeState_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type Deployment_DbUpdateTaskStatus_FieldMask struct {
	Paths []DeploymentDbUpdateTaskStatus_FieldPath
}

func FullDeployment_DbUpdateTaskStatus_FieldMask() *Deployment_DbUpdateTaskStatus_FieldMask {
	res := &Deployment_DbUpdateTaskStatus_FieldMask{}
	res.Paths = append(res.Paths, &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag})
	res.Paths = append(res.Paths, &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount})
	res.Paths = append(res.Paths, &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards})
	res.Paths = append(res.Paths, &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion})
	res.Paths = append(res.Paths, &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar})
	return res
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 5)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeploymentDbUpdateTaskStatus_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeploymentDbUpdateTaskStatus_FieldPath(raw)
	})
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) ProtoMessage() {}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) Subtract(other *Deployment_DbUpdateTaskStatus_FieldMask) *Deployment_DbUpdateTaskStatus_FieldMask {
	result := &Deployment_DbUpdateTaskStatus_FieldMask{}
	removedSelectors := make([]bool, 5)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeploymentDbUpdateTaskStatus_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*Deployment_DbUpdateTaskStatus_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) FilterInputFields() *Deployment_DbUpdateTaskStatus_FieldMask {
	result := &Deployment_DbUpdateTaskStatus_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) ToProtoFieldMask() *googlefieldmaskpb.FieldMask {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) FromProtoFieldMask(protoFieldMask *googlefieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeploymentDbUpdateTaskStatus_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask Deployment_DbUpdateTaskStatus_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask Deployment_DbUpdateTaskStatus_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &googlefieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) AppendPath(path DeploymentDbUpdateTaskStatus_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeploymentDbUpdateTaskStatus_FieldPath))
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) GetPaths() []DeploymentDbUpdateTaskStatus_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) Set(target, source *Deployment_DbUpdateTaskStatus) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*Deployment_DbUpdateTaskStatus), source.(*Deployment_DbUpdateTaskStatus))
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) Project(source *Deployment_DbUpdateTaskStatus) *Deployment_DbUpdateTaskStatus {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &Deployment_DbUpdateTaskStatus{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeploymentDbUpdateTaskStatus_FieldTerminalPath:
			switch tp.selector {
			case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
				result.TaskTag = source.TaskTag
			case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
				result.ShardsCount = source.ShardsCount
			case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
				result.ReadyShards = source.ReadyShards
			case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
				result.TargetVersion = source.TargetVersion
			case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
				result.ProgressBar = source.ProgressBar
			}
		}
	}
	return result
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*Deployment_DbUpdateTaskStatus))
}

func (fieldMask *Deployment_DbUpdateTaskStatus_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
