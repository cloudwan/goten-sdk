// Code generated by protoc-gen-goten-validate
// File: goten/meta-service/proto/v1/deployment.proto
// DO NOT EDIT!!!

package deployment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	region "github.com/cloudwan/goten-sdk/meta-service/resources/v1/region"
	service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &region.Region{}
	_ = &service.Service{}
	_ = &meta.Meta{}
)

func (obj *Deployment) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Deployment", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.ServiceName)
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Deployment", "serviceName", obj.ServiceName, "field must contain at most 64 characters", nil)
		}
	}
	if obj.ServiceName == "" {
		return gotenvalidate.NewValidationError("Deployment", "serviceName", obj.ServiceName, "field is required", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.PublicDomain)
		if rlen > 255 {
			return gotenvalidate.NewValidationError("Deployment", "publicDomain", obj.PublicDomain, "field must contain at most 255 characters", nil)
		}
	}
	if err := gotenvalidate.ValidateAddress(string(obj.PublicDomain)); err != nil {
		return gotenvalidate.NewValidationError("Deployment", "publicDomain", obj.PublicDomain, "field must contain a valid address", nil)
	}
	if obj.PublicDomain == "" {
		return gotenvalidate.NewValidationError("Deployment", "publicDomain", obj.PublicDomain, "field is required", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.PrivateDomain)
		if rlen > 255 {
			return gotenvalidate.NewValidationError("Deployment", "privateDomain", obj.PrivateDomain, "field must contain at most 255 characters", nil)
		}
	}
	if err := gotenvalidate.ValidateAddress(string(obj.PrivateDomain)); err != nil {
		return gotenvalidate.NewValidationError("Deployment", "privateDomain", obj.PrivateDomain, "field must contain a valid address", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.LocalNetworkId)
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Deployment", "localNetworkId", obj.LocalNetworkId, "field must contain at most 64 characters", nil)
		}
	}
	if obj.Location == nil {
		return gotenvalidate.NewValidationError("Deployment", "location", obj.Location, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.Location).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Deployment", "location", obj.Location, "nested object validation failed", err)
		}
	}
	if len(obj.CurrentVersion) > 64 {
		return gotenvalidate.NewValidationError("Deployment", "currentVersion", obj.CurrentVersion, "field must contain at most 64 characters", nil)
	}
	if obj.CurrentVersion == "" {
		return gotenvalidate.NewValidationError("Deployment", "currentVersion", obj.CurrentVersion, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.UpgradeState).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Deployment", "upgradeState", obj.UpgradeState, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Deployment_Location) GotenValidate() error {
	if obj == nil {
		return nil
	}
	{
		rlen := utf8.RuneCountInString(obj.Continent)
		if rlen > 32 {
			return gotenvalidate.NewValidationError("Location", "continent", obj.Continent, "field must contain at most 32 characters", nil)
		}
	}
	if obj.Continent == "" {
		return gotenvalidate.NewValidationError("Location", "continent", obj.Continent, "field is required", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.Country)
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Location", "country", obj.Country, "field must contain at most 64 characters", nil)
		}
	}
	if obj.Country == "" {
		return gotenvalidate.NewValidationError("Location", "country", obj.Country, "field is required", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.Agglomeration)
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Location", "agglomeration", obj.Agglomeration, "field must contain at most 64 characters", nil)
		}
	}
	if obj.Agglomeration == "" {
		return gotenvalidate.NewValidationError("Location", "agglomeration", obj.Agglomeration, "field is required", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.City)
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Location", "city", obj.City, "field must contain at most 64 characters", nil)
		}
	}
	if obj.City == "" {
		return gotenvalidate.NewValidationError("Location", "city", obj.City, "field is required", nil)
	}
	{
		rlen := utf8.RuneCountInString(obj.Cloud)
		if rlen > 32 {
			return gotenvalidate.NewValidationError("Location", "cloud", obj.Cloud, "field must contain at most 32 characters", nil)
		}
	}
	if obj.Cloud == "" {
		return gotenvalidate.NewValidationError("Location", "cloud", obj.Cloud, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Deployment_UpgradeState) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
