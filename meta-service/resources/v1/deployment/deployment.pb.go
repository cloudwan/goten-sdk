// Code generated by protoc-gen-goten-go
// File: goten/meta-service/proto/v1/deployment.proto
// DO NOT EDIT!!!

package deployment

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	region "github.com/cloudwan/goten-sdk/meta-service/resources/v1/region"
	service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &structpb.Struct{}
	_ = &common.LabelledDomain{}
	_ = &region.Region{}
	_ = &service.Service{}
	_ = &meta.Meta{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Deployment_UpgradeState_Stage int32

const (
	Deployment_UpgradeState_READY           Deployment_UpgradeState_Stage = 0
	Deployment_UpgradeState_INITIAL_SYNCING Deployment_UpgradeState_Stage = 1
	Deployment_UpgradeState_SWITCHING       Deployment_UpgradeState_Stage = 2
)

var (
	Deployment_UpgradeState_Stage_name = map[int32]string{
		0: "READY",
		1: "INITIAL_SYNCING",
		2: "SWITCHING",
	}

	Deployment_UpgradeState_Stage_value = map[string]int32{
		"READY":           0,
		"INITIAL_SYNCING": 1,
		"SWITCHING":       2,
	}
)

func (x Deployment_UpgradeState_Stage) Enum() *Deployment_UpgradeState_Stage {
	p := new(Deployment_UpgradeState_Stage)
	*p = x
	return p
}

func (x Deployment_UpgradeState_Stage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Deployment_UpgradeState_Stage) Descriptor() preflect.EnumDescriptor {
	return goten_meta_service_proto_v1_deployment_proto_enumTypes[0].Descriptor()
}

func (Deployment_UpgradeState_Stage) Type() preflect.EnumType {
	return &goten_meta_service_proto_v1_deployment_proto_enumTypes[0]
}

func (x Deployment_UpgradeState_Stage) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Deployment_UpgradeState_Stage.ProtoReflect.Descriptor instead.
func (Deployment_UpgradeState_Stage) EnumDescriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_deployment_proto_rawDescGZIP(), []int{0, 1, 0}
}

// Deployment Resource describes deployment of service in specific regional
// cluster (may be multi-zonal). It contains accessibility details.
type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Deployment
	// ID must be exactly same as region ID it belongs to - it is populated
	// automatically by Goten components.
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Service display name - it is lowerCamelCase of service name, but not
	// domain. It is taken from api-skeleton file, under "service.name" path.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Informs in which region cluster running this deployment is located.
	Region *region.Reference `protobuf:"bytes,4,opt,customtype=Reference,name=region,proto3" json:"region,omitempty"`
	// Public domain indicates under which public address service in this
	// particular region can be accessed.
	PublicDomain string `protobuf:"bytes,5,opt,name=public_domain,json=publicDomain,proto3" json:"public_domain,omitempty"`
	// Private domain indicates how to access this service within local private
	// network. However, this address should not be available for anyone outside
	// network. It is only to be used by other service deployments that run within
	// same private network for better performance purposes (less hops). It should
	// be used in conjunction with field local_network_id.
	PrivateDomain string `protobuf:"bytes,6,opt,name=private_domain,json=privateDomain,proto3" json:"private_domain,omitempty"`
	// Additional regional domains with labels where Deployment can be accessed.
	LabelledDomains []*common.LabelledDomain `protobuf:"bytes,19,rep,name=labelled_domains,json=labelledDomains,proto3" json:"labelled_domains,omitempty"`
	// Local network identifier - it can be mostly anything, however if two
	// deployments for different services hold same value in same region, then
	// Goten components will try to optimize access by using private_domain field
	// instead of public_domain.
	LocalNetworkId string `protobuf:"bytes,7,opt,name=local_network_id,json=localNetworkId,proto3" json:"local_network_id,omitempty"`
	// Location of given deployment. This value is likely to be equal for all
	// deployments using same underlying cluster. It may be used by Goten to
	// optimize multi-region routing.
	Location *Deployment_Location `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	// Whether this deployment is disabled. It does not trigger any deployment
	// deletion - it will just notify others (in different regions) that its
	// no longer available and no request should be routed there. It can
	// be used as first step to delete deployment.
	IsDisabled bool `protobuf:"varint,9,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	// Generation number used by EnvRegistry config to generate this resource.
	EnvRegistryGeneration int32 `protobuf:"varint,10,opt,name=env_registry_generation,json=envRegistryGeneration,proto3" json:"env_registry_generation,omitempty"`
	// The current version of the service. Note this MAY not be the newest
	// version! At the very least, if there was a fresh db upgrade, it will be old
	// version till automatic upgrade finishes (or manual switch happens).
	CurrentVersion string `protobuf:"bytes,11,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// Current version of data in the database, it must follow convention
	// v<Number>.<Number>... (may be more numbers). When deployment is created
	// first time, value is set to the current value. If non-empty lower
	// value is detected, db-controller may run update task locally. Do not
	// confuse this field with "current_version", which describes API version.
	// If not populated, then "current"/"newest" should be assumed.
	// current_version signals main API version by deployment, while
	// db_data_version indicates underlying database data. It can be used for
	// internal upgrades, database migrations, or simple in-place updates.
	DbDataVersion string `protobuf:"bytes,15,opt,name=db_data_version,json=dbDataVersion,proto3" json:"db_data_version,omitempty"`
	// Arbitrary database location tag. This should be used if database migration
	// is needed (different endpoint, backend, namespace...).
	DbLocationTag string `protobuf:"bytes,17,opt,name=db_location_tag,json=dbLocationTag,proto3" json:"db_location_tag,omitempty"`
	// If true, then switch to the new version will be automatic (if there is
	// newer), once db upgrade finishes. Otherwise it will require manual call
	// from operator.
	AutomaticVersionSwitch bool                         `protobuf:"varint,12,opt,name=automatic_version_switch,json=automaticVersionSwitch,proto3" json:"automatic_version_switch,omitempty"`
	AvailableUpgrade       *Deployment_AvailableUpgrade `protobuf:"bytes,18,opt,name=available_upgrade,json=availableUpgrade,proto3" json:"available_upgrade,omitempty"`
	// Current state of the upgrade task.
	UpgradeState *Deployment_UpgradeState `protobuf:"bytes,13,opt,name=upgrade_state,json=upgradeState,proto3" json:"upgrade_state,omitempty"`
	// Tagged update statuses.
	DataUpdateStatuses []*Deployment_DbUpdateTaskStatus `protobuf:"bytes,16,rep,name=data_update_statuses,json=dataUpdateStatuses,proto3" json:"data_update_statuses,omitempty"`
}

func (m *Deployment) Reset() {
	*m = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Deployment) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Deployment) ProtoMessage() {}

func (m *Deployment) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Deployment) GotenMessage() {}

// Deprecated, Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_deployment_proto_rawDescGZIP(), []int{0}
}

func (m *Deployment) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Deployment) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Deployment) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Deployment) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Deployment) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Deployment) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Deployment) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Deployment) GetRegion() *region.Reference {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *Deployment) GetPublicDomain() string {
	if m != nil {
		return m.PublicDomain
	}
	return ""
}

func (m *Deployment) GetPrivateDomain() string {
	if m != nil {
		return m.PrivateDomain
	}
	return ""
}

func (m *Deployment) GetLabelledDomains() []*common.LabelledDomain {
	if m != nil {
		return m.LabelledDomains
	}
	return nil
}

func (m *Deployment) GetLocalNetworkId() string {
	if m != nil {
		return m.LocalNetworkId
	}
	return ""
}

func (m *Deployment) GetLocation() *Deployment_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Deployment) GetIsDisabled() bool {
	if m != nil {
		return m.IsDisabled
	}
	return false
}

func (m *Deployment) GetEnvRegistryGeneration() int32 {
	if m != nil {
		return m.EnvRegistryGeneration
	}
	return int32(0)
}

func (m *Deployment) GetCurrentVersion() string {
	if m != nil {
		return m.CurrentVersion
	}
	return ""
}

func (m *Deployment) GetDbDataVersion() string {
	if m != nil {
		return m.DbDataVersion
	}
	return ""
}

func (m *Deployment) GetDbLocationTag() string {
	if m != nil {
		return m.DbLocationTag
	}
	return ""
}

func (m *Deployment) GetAutomaticVersionSwitch() bool {
	if m != nil {
		return m.AutomaticVersionSwitch
	}
	return false
}

func (m *Deployment) GetAvailableUpgrade() *Deployment_AvailableUpgrade {
	if m != nil {
		return m.AvailableUpgrade
	}
	return nil
}

func (m *Deployment) GetUpgradeState() *Deployment_UpgradeState {
	if m != nil {
		return m.UpgradeState
	}
	return nil
}

func (m *Deployment) GetDataUpdateStatuses() []*Deployment_DbUpdateTaskStatus {
	if m != nil {
		return m.DataUpdateStatuses
	}
	return nil
}

func (m *Deployment) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Deployment"))
	}
	m.Name = fv
}

func (m *Deployment) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Deployment"))
	}
	m.Metadata = fv
}

func (m *Deployment) SetServiceName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ServiceName", "Deployment"))
	}
	m.ServiceName = fv
}

func (m *Deployment) SetRegion(fv *region.Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Region", "Deployment"))
	}
	m.Region = fv
}

func (m *Deployment) SetPublicDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PublicDomain", "Deployment"))
	}
	m.PublicDomain = fv
}

func (m *Deployment) SetPrivateDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PrivateDomain", "Deployment"))
	}
	m.PrivateDomain = fv
}

func (m *Deployment) SetLabelledDomains(fv []*common.LabelledDomain) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LabelledDomains", "Deployment"))
	}
	m.LabelledDomains = fv
}

func (m *Deployment) SetLocalNetworkId(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "LocalNetworkId", "Deployment"))
	}
	m.LocalNetworkId = fv
}

func (m *Deployment) SetLocation(fv *Deployment_Location) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Location", "Deployment"))
	}
	m.Location = fv
}

func (m *Deployment) SetIsDisabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IsDisabled", "Deployment"))
	}
	m.IsDisabled = fv
}

func (m *Deployment) SetEnvRegistryGeneration(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnvRegistryGeneration", "Deployment"))
	}
	m.EnvRegistryGeneration = fv
}

func (m *Deployment) SetCurrentVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentVersion", "Deployment"))
	}
	m.CurrentVersion = fv
}

func (m *Deployment) SetDbDataVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbDataVersion", "Deployment"))
	}
	m.DbDataVersion = fv
}

func (m *Deployment) SetDbLocationTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbLocationTag", "Deployment"))
	}
	m.DbLocationTag = fv
}

func (m *Deployment) SetAutomaticVersionSwitch(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutomaticVersionSwitch", "Deployment"))
	}
	m.AutomaticVersionSwitch = fv
}

func (m *Deployment) SetAvailableUpgrade(fv *Deployment_AvailableUpgrade) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AvailableUpgrade", "Deployment"))
	}
	m.AvailableUpgrade = fv
}

func (m *Deployment) SetUpgradeState(fv *Deployment_UpgradeState) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpgradeState", "Deployment"))
	}
	m.UpgradeState = fv
}

func (m *Deployment) SetDataUpdateStatuses(fv []*Deployment_DbUpdateTaskStatus) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DataUpdateStatuses", "Deployment"))
	}
	m.DataUpdateStatuses = fv
}

// Location describes deployment location of this deployment. It may be used
// for multi-region routing to help determine closest deployment.
type Deployment_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Continent
	Continent string `protobuf:"bytes,1,opt,name=continent,proto3" json:"continent,omitempty"`
	// Country
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// Agglomeration
	Agglomeration string `protobuf:"bytes,3,opt,name=agglomeration,proto3" json:"agglomeration,omitempty"`
	// City
	City string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// Cloud provider (like GCP, Azure, AWS...)
	Cloud string `protobuf:"bytes,5,opt,name=cloud,proto3" json:"cloud,omitempty"`
}

func (m *Deployment_Location) Reset() {
	*m = Deployment_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Deployment_Location) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Deployment_Location) ProtoMessage() {}

func (m *Deployment_Location) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Deployment_Location) GotenMessage() {}

// Deprecated, Use Deployment_Location.ProtoReflect.Descriptor instead.
func (*Deployment_Location) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_deployment_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Deployment_Location) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Deployment_Location) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Deployment_Location) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Deployment_Location) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Deployment_Location) GetContinent() string {
	if m != nil {
		return m.Continent
	}
	return ""
}

func (m *Deployment_Location) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Deployment_Location) GetAgglomeration() string {
	if m != nil {
		return m.Agglomeration
	}
	return ""
}

func (m *Deployment_Location) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Deployment_Location) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *Deployment_Location) SetContinent(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Continent", "Deployment_Location"))
	}
	m.Continent = fv
}

func (m *Deployment_Location) SetCountry(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Country", "Deployment_Location"))
	}
	m.Country = fv
}

func (m *Deployment_Location) SetAgglomeration(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Agglomeration", "Deployment_Location"))
	}
	m.Agglomeration = fv
}

func (m *Deployment_Location) SetCity(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "City", "Deployment_Location"))
	}
	m.City = fv
}

func (m *Deployment_Location) SetCloud(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Cloud", "Deployment_Location"))
	}
	m.Cloud = fv
}

// UpgradeState describes current state of database major upgrade.
// This corresponds to database migrations, API upgrades, other internal
// updates (if needed).
type Deployment_UpgradeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	TargetVersion string                        `protobuf:"bytes,1,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	ReadyShards   []int64                       `protobuf:"varint,2,rep,packed,name=ready_shards,json=readyShards,proto3" json:"ready_shards,omitempty"`
	PendingShards []int64                       `protobuf:"varint,3,rep,packed,name=pending_shards,json=pendingShards,proto3" json:"pending_shards,omitempty"`
	Stage         Deployment_UpgradeState_Stage `protobuf:"varint,4,opt,name=stage,proto3,enum=goten.meta.v1.Deployment_UpgradeState_Stage" json:"stage,omitempty"`
	// Value to switch once update is completed for db_data_version value.
	DbDataTargetVersion string `protobuf:"bytes,5,opt,name=db_data_target_version,json=dbDataTargetVersion,proto3" json:"db_data_target_version,omitempty"`
	DbTargetLocationTag string `protobuf:"bytes,6,opt,name=db_target_location_tag,json=dbTargetLocationTag,proto3" json:"db_target_location_tag,omitempty"`
}

func (m *Deployment_UpgradeState) Reset() {
	*m = Deployment_UpgradeState{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Deployment_UpgradeState) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Deployment_UpgradeState) ProtoMessage() {}

func (m *Deployment_UpgradeState) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Deployment_UpgradeState) GotenMessage() {}

// Deprecated, Use Deployment_UpgradeState.ProtoReflect.Descriptor instead.
func (*Deployment_UpgradeState) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_deployment_proto_rawDescGZIP(), []int{0, 1}
}

func (m *Deployment_UpgradeState) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Deployment_UpgradeState) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Deployment_UpgradeState) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Deployment_UpgradeState) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Deployment_UpgradeState) GetTargetVersion() string {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *Deployment_UpgradeState) GetReadyShards() []int64 {
	if m != nil {
		return m.ReadyShards
	}
	return nil
}

func (m *Deployment_UpgradeState) GetPendingShards() []int64 {
	if m != nil {
		return m.PendingShards
	}
	return nil
}

func (m *Deployment_UpgradeState) GetStage() Deployment_UpgradeState_Stage {
	if m != nil {
		return m.Stage
	}
	return Deployment_UpgradeState_READY
}

func (m *Deployment_UpgradeState) GetDbDataTargetVersion() string {
	if m != nil {
		return m.DbDataTargetVersion
	}
	return ""
}

func (m *Deployment_UpgradeState) GetDbTargetLocationTag() string {
	if m != nil {
		return m.DbTargetLocationTag
	}
	return ""
}

func (m *Deployment_UpgradeState) SetTargetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetVersion", "Deployment_UpgradeState"))
	}
	m.TargetVersion = fv
}

func (m *Deployment_UpgradeState) SetReadyShards(fv []int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReadyShards", "Deployment_UpgradeState"))
	}
	m.ReadyShards = fv
}

func (m *Deployment_UpgradeState) SetPendingShards(fv []int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "PendingShards", "Deployment_UpgradeState"))
	}
	m.PendingShards = fv
}

func (m *Deployment_UpgradeState) SetStage(fv Deployment_UpgradeState_Stage) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Stage", "Deployment_UpgradeState"))
	}
	m.Stage = fv
}

func (m *Deployment_UpgradeState) SetDbDataTargetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbDataTargetVersion", "Deployment_UpgradeState"))
	}
	m.DbDataTargetVersion = fv
}

func (m *Deployment_UpgradeState) SetDbTargetLocationTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbTargetLocationTag", "Deployment_UpgradeState"))
	}
	m.DbTargetLocationTag = fv
}

type Deployment_AvailableUpgrade struct {
	state            protoimpl.MessageState
	sizeCache        protoimpl.SizeCache
	unknownFields    protoimpl.UnknownFields
	ApiVersion       string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	DbDataVersion    string `protobuf:"bytes,2,opt,name=db_data_version,json=dbDataVersion,proto3" json:"db_data_version,omitempty"`
	DbLocationTag    string `protobuf:"bytes,3,opt,name=db_location_tag,json=dbLocationTag,proto3" json:"db_location_tag,omitempty"`
	TotalShardsCount int64  `protobuf:"varint,4,opt,name=total_shards_count,json=totalShardsCount,proto3" json:"total_shards_count,omitempty"`
}

func (m *Deployment_AvailableUpgrade) Reset() {
	*m = Deployment_AvailableUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Deployment_AvailableUpgrade) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Deployment_AvailableUpgrade) ProtoMessage() {}

func (m *Deployment_AvailableUpgrade) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Deployment_AvailableUpgrade) GotenMessage() {}

// Deprecated, Use Deployment_AvailableUpgrade.ProtoReflect.Descriptor instead.
func (*Deployment_AvailableUpgrade) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_deployment_proto_rawDescGZIP(), []int{0, 2}
}

func (m *Deployment_AvailableUpgrade) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Deployment_AvailableUpgrade) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Deployment_AvailableUpgrade) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Deployment_AvailableUpgrade) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Deployment_AvailableUpgrade) GetApiVersion() string {
	if m != nil {
		return m.ApiVersion
	}
	return ""
}

func (m *Deployment_AvailableUpgrade) GetDbDataVersion() string {
	if m != nil {
		return m.DbDataVersion
	}
	return ""
}

func (m *Deployment_AvailableUpgrade) GetDbLocationTag() string {
	if m != nil {
		return m.DbLocationTag
	}
	return ""
}

func (m *Deployment_AvailableUpgrade) GetTotalShardsCount() int64 {
	if m != nil {
		return m.TotalShardsCount
	}
	return int64(0)
}

func (m *Deployment_AvailableUpgrade) SetApiVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ApiVersion", "Deployment_AvailableUpgrade"))
	}
	m.ApiVersion = fv
}

func (m *Deployment_AvailableUpgrade) SetDbDataVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbDataVersion", "Deployment_AvailableUpgrade"))
	}
	m.DbDataVersion = fv
}

func (m *Deployment_AvailableUpgrade) SetDbLocationTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DbLocationTag", "Deployment_AvailableUpgrade"))
	}
	m.DbLocationTag = fv
}

func (m *Deployment_AvailableUpgrade) SetTotalShardsCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TotalShardsCount", "Deployment_AvailableUpgrade"))
	}
	m.TotalShardsCount = fv
}

type Deployment_DbUpdateTaskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Identifying tag
	TaskTag string `protobuf:"bytes,1,opt,name=task_tag,json=taskTag,proto3" json:"task_tag,omitempty"`
	// Shards count
	ShardsCount int64 `protobuf:"varint,2,opt,name=shards_count,json=shardsCount,proto3" json:"shards_count,omitempty"`
	// List of completed shards
	ReadyShards []int64 `protobuf:"varint,3,rep,packed,name=ready_shards,json=readyShards,proto3" json:"ready_shards,omitempty"`
	// Target data version
	TargetVersion string `protobuf:"bytes,4,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
	// Optional generic data submitted by task handler, in case of
	// resharding/controller reboot.
	ProgressBar []*structpb.Struct `protobuf:"bytes,5,rep,name=progress_bar,json=progressBar,proto3" json:"progress_bar,omitempty"`
}

func (m *Deployment_DbUpdateTaskStatus) Reset() {
	*m = Deployment_DbUpdateTaskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Deployment_DbUpdateTaskStatus) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Deployment_DbUpdateTaskStatus) ProtoMessage() {}

func (m *Deployment_DbUpdateTaskStatus) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_deployment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Deployment_DbUpdateTaskStatus) GotenMessage() {}

// Deprecated, Use Deployment_DbUpdateTaskStatus.ProtoReflect.Descriptor instead.
func (*Deployment_DbUpdateTaskStatus) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_deployment_proto_rawDescGZIP(), []int{0, 3}
}

func (m *Deployment_DbUpdateTaskStatus) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Deployment_DbUpdateTaskStatus) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Deployment_DbUpdateTaskStatus) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Deployment_DbUpdateTaskStatus) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Deployment_DbUpdateTaskStatus) GetTaskTag() string {
	if m != nil {
		return m.TaskTag
	}
	return ""
}

func (m *Deployment_DbUpdateTaskStatus) GetShardsCount() int64 {
	if m != nil {
		return m.ShardsCount
	}
	return int64(0)
}

func (m *Deployment_DbUpdateTaskStatus) GetReadyShards() []int64 {
	if m != nil {
		return m.ReadyShards
	}
	return nil
}

func (m *Deployment_DbUpdateTaskStatus) GetTargetVersion() string {
	if m != nil {
		return m.TargetVersion
	}
	return ""
}

func (m *Deployment_DbUpdateTaskStatus) GetProgressBar() []*structpb.Struct {
	if m != nil {
		return m.ProgressBar
	}
	return nil
}

func (m *Deployment_DbUpdateTaskStatus) SetTaskTag(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TaskTag", "Deployment_DbUpdateTaskStatus"))
	}
	m.TaskTag = fv
}

func (m *Deployment_DbUpdateTaskStatus) SetShardsCount(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ShardsCount", "Deployment_DbUpdateTaskStatus"))
	}
	m.ShardsCount = fv
}

func (m *Deployment_DbUpdateTaskStatus) SetReadyShards(fv []int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ReadyShards", "Deployment_DbUpdateTaskStatus"))
	}
	m.ReadyShards = fv
}

func (m *Deployment_DbUpdateTaskStatus) SetTargetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetVersion", "Deployment_DbUpdateTaskStatus"))
	}
	m.TargetVersion = fv
}

func (m *Deployment_DbUpdateTaskStatus) SetProgressBar(fv []*structpb.Struct) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProgressBar", "Deployment_DbUpdateTaskStatus"))
	}
	m.ProgressBar = fv
}

var goten_meta_service_proto_v1_deployment_proto preflect.FileDescriptor

var goten_meta_service_proto_v1_deployment_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d,
	0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd8, 0x11, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xb2, 0xda, 0x21, 0x0e, 0x0a, 0x0c, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xc6, 0x27, 0x08, 0x2a, 0x06, 0x22, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xb2, 0xda, 0x21, 0x0c, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xc6, 0x27, 0x0d, 0x2a,
	0x0b, 0x22, 0x03, 0x08, 0xff, 0x01, 0x52, 0x02, 0x60, 0x01, 0x68, 0x01, 0x52, 0x0c, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x36, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xca, 0xc6, 0x27, 0x0b, 0x2a, 0x09, 0x22, 0x03, 0x08, 0xff, 0x01, 0x52,
	0x02, 0x60, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x48, 0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x0f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x10,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x2a, 0x04, 0x22, 0x02,
	0x08, 0x40, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x62, 0x02,
	0x08, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x65, 0x6e, 0x76, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x65, 0x6e, 0x76, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f,
	0x64, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xca, 0xc6, 0x27, 0x1a, 0x2a, 0x18, 0x52, 0x16, 0x42,
	0x14, 0x28, 0x5e, 0x24, 0x7c, 0x5e, 0x76, 0x5b, 0x30, 0x2d, 0x39, 0x2e, 0x5d, 0x7b, 0x31, 0x2c,
	0x36, 0x34, 0x7d, 0x24, 0x29, 0x52, 0x0d, 0x64, 0x62, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0f, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xc6, 0x27, 0x08, 0x2a, 0x06, 0x32, 0x00, 0x3a, 0x02, 0x08, 0x40, 0x52, 0x0d, 0x64, 0x62, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x12, 0x5d, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x04, 0xf0, 0xd9, 0x21,
	0x01, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0c, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x44, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x1a, 0xd8, 0x01, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6,
	0x27, 0x08, 0x2a, 0x06, 0x22, 0x02, 0x08, 0x20, 0x68, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x22, 0x02,
	0x08, 0x40, 0x68, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a,
	0x0d, 0x61, 0x67, 0x67, 0x6c, 0x6f, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x22, 0x02, 0x08, 0x40,
	0x68, 0x01, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x6c, 0x6f, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x22, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06, 0x22, 0x02, 0x08, 0x20, 0x68, 0x01,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0xe5, 0x02, 0x0a, 0x0c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a,
	0x16, 0x64, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x62, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x62, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x62, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x22, 0x36, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a,
	0xb1, 0x01, 0x0a, 0x10, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x62, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xd8, 0x01, 0x0a, 0x12, 0x44, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x62,
	0x61, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x72, 0x3a, 0xa5,
	0x01, 0xea, 0x41, 0x48, 0x0a, 0x19, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x7d, 0x92, 0xd9, 0x21, 0x44,
	0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0b, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2a, 0x1d, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5c, 0x2d, 0x5d, 0x7b, 0x30, 0x2c, 0x32, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d,
	0x39, 0x5d, 0x38, 0x01, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0xe2, 0xde, 0x21, 0x02, 0x08, 0x03, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x42, 0xa0, 0x02, 0xe8,
	0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x4e, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0xa2, 0x80, 0xd1, 0x02, 0x50, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x0a, 0x14, 0x63, 0x6f, 0x6d,
	0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x62, 0x2e, 0x76,
	0x31, 0x42, 0x0f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x3b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	goten_meta_service_proto_v1_deployment_proto_rawDescOnce sync.Once
	goten_meta_service_proto_v1_deployment_proto_rawDescData = goten_meta_service_proto_v1_deployment_proto_rawDesc
)

func goten_meta_service_proto_v1_deployment_proto_rawDescGZIP() []byte {
	goten_meta_service_proto_v1_deployment_proto_rawDescOnce.Do(func() {
		goten_meta_service_proto_v1_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(goten_meta_service_proto_v1_deployment_proto_rawDescData)
	})
	return goten_meta_service_proto_v1_deployment_proto_rawDescData
}

var goten_meta_service_proto_v1_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var goten_meta_service_proto_v1_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var goten_meta_service_proto_v1_deployment_proto_goTypes = []interface{}{
	(Deployment_UpgradeState_Stage)(0),    // 0: goten.meta.v1.Deployment_UpgradeState_Stage
	(*Deployment)(nil),                    // 1: goten.meta.v1.Deployment
	(*Deployment_Location)(nil),           // 2: goten.meta.v1.Deployment.Location
	(*Deployment_UpgradeState)(nil),       // 3: goten.meta.v1.Deployment.UpgradeState
	(*Deployment_AvailableUpgrade)(nil),   // 4: goten.meta.v1.Deployment.AvailableUpgrade
	(*Deployment_DbUpdateTaskStatus)(nil), // 5: goten.meta.v1.Deployment.DbUpdateTaskStatus
	(*meta.Meta)(nil),                     // 6: goten.types.Meta
	(*common.LabelledDomain)(nil),         // 7: goten.meta.v1.LabelledDomain
	(*structpb.Struct)(nil),               // 8: google.protobuf.Struct
}
var goten_meta_service_proto_v1_deployment_proto_depIdxs = []int32{
	6, // 0: goten.meta.v1.Deployment.metadata:type_name -> goten.types.Meta
	7, // 1: goten.meta.v1.Deployment.labelled_domains:type_name -> goten.meta.v1.LabelledDomain
	2, // 2: goten.meta.v1.Deployment.location:type_name -> goten.meta.v1.Deployment.Location
	4, // 3: goten.meta.v1.Deployment.available_upgrade:type_name -> goten.meta.v1.Deployment.AvailableUpgrade
	3, // 4: goten.meta.v1.Deployment.upgrade_state:type_name -> goten.meta.v1.Deployment.UpgradeState
	5, // 5: goten.meta.v1.Deployment.data_update_statuses:type_name -> goten.meta.v1.Deployment.DbUpdateTaskStatus
	0, // 6: goten.meta.v1.Deployment.UpgradeState.stage:type_name -> goten.meta.v1.Deployment_UpgradeState_Stage
	8, // 7: goten.meta.v1.Deployment.DbUpdateTaskStatus.progress_bar:type_name -> google.protobuf.Struct
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { goten_meta_service_proto_v1_deployment_proto_init() }
func goten_meta_service_proto_v1_deployment_proto_init() {
	if goten_meta_service_proto_v1_deployment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		goten_meta_service_proto_v1_deployment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_meta_service_proto_v1_deployment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_meta_service_proto_v1_deployment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_UpgradeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_meta_service_proto_v1_deployment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_AvailableUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_meta_service_proto_v1_deployment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_DbUpdateTaskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: goten_meta_service_proto_v1_deployment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           goten_meta_service_proto_v1_deployment_proto_goTypes,
		DependencyIndexes: goten_meta_service_proto_v1_deployment_proto_depIdxs,
		EnumInfos:         goten_meta_service_proto_v1_deployment_proto_enumTypes,
		MessageInfos:      goten_meta_service_proto_v1_deployment_proto_msgTypes,
	}.Build()
	goten_meta_service_proto_v1_deployment_proto = out.File
	goten_meta_service_proto_v1_deployment_proto_rawDesc = nil
	goten_meta_service_proto_v1_deployment_proto_goTypes = nil
	goten_meta_service_proto_v1_deployment_proto_depIdxs = nil
}
