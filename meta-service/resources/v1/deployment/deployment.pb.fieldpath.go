// Code generated by protoc-gen-goten-object
// File: goten/meta-service/proto/v1/deployment.proto
// DO NOT EDIT!!!

package deployment

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
	"github.com/cloudwan/goten-sdk/runtime/strcase"
)

// proto imports
import (
	common "github.com/cloudwan/goten-sdk/meta-service/resources/v1/common"
	region "github.com/cloudwan/goten-sdk/meta-service/resources/v1/region"
	service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &structpb.Struct{}
	_ = &common.LabelledDomain{}
	_ = &region.Region{}
	_ = &service.Service{}
	_ = &meta.Meta{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Deployment_FieldPath interface {
	gotenobject.FieldPath
	Selector() Deployment_FieldPathSelector
	Get(source *Deployment) []interface{}
	GetSingle(source *Deployment) (interface{}, bool)
	ClearValue(item *Deployment)

	// Those methods build corresponding Deployment_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Deployment_FieldPathValue
	WithIArrayOfValues(values interface{}) Deployment_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Deployment_FieldPathArrayItemValue
}

type Deployment_FieldPathSelector int32

const (
	Deployment_FieldPathSelectorName                   Deployment_FieldPathSelector = 0
	Deployment_FieldPathSelectorMetadata               Deployment_FieldPathSelector = 1
	Deployment_FieldPathSelectorServiceName            Deployment_FieldPathSelector = 2
	Deployment_FieldPathSelectorRegion                 Deployment_FieldPathSelector = 3
	Deployment_FieldPathSelectorPublicDomain           Deployment_FieldPathSelector = 4
	Deployment_FieldPathSelectorPrivateDomain          Deployment_FieldPathSelector = 5
	Deployment_FieldPathSelectorLabelledDomains        Deployment_FieldPathSelector = 6
	Deployment_FieldPathSelectorLocalNetworkId         Deployment_FieldPathSelector = 7
	Deployment_FieldPathSelectorLocation               Deployment_FieldPathSelector = 8
	Deployment_FieldPathSelectorIsDisabled             Deployment_FieldPathSelector = 9
	Deployment_FieldPathSelectorEnvRegistryGeneration  Deployment_FieldPathSelector = 10
	Deployment_FieldPathSelectorCurrentVersion         Deployment_FieldPathSelector = 11
	Deployment_FieldPathSelectorDbDataVersion          Deployment_FieldPathSelector = 12
	Deployment_FieldPathSelectorDbLocationTag          Deployment_FieldPathSelector = 13
	Deployment_FieldPathSelectorAutomaticVersionSwitch Deployment_FieldPathSelector = 14
	Deployment_FieldPathSelectorAvailableUpgrade       Deployment_FieldPathSelector = 15
	Deployment_FieldPathSelectorUpgradeState           Deployment_FieldPathSelector = 16
	Deployment_FieldPathSelectorDataUpdateStatuses     Deployment_FieldPathSelector = 17
)

func (s Deployment_FieldPathSelector) String() string {
	switch s {
	case Deployment_FieldPathSelectorName:
		return "name"
	case Deployment_FieldPathSelectorMetadata:
		return "metadata"
	case Deployment_FieldPathSelectorServiceName:
		return "service_name"
	case Deployment_FieldPathSelectorRegion:
		return "region"
	case Deployment_FieldPathSelectorPublicDomain:
		return "public_domain"
	case Deployment_FieldPathSelectorPrivateDomain:
		return "private_domain"
	case Deployment_FieldPathSelectorLabelledDomains:
		return "labelled_domains"
	case Deployment_FieldPathSelectorLocalNetworkId:
		return "local_network_id"
	case Deployment_FieldPathSelectorLocation:
		return "location"
	case Deployment_FieldPathSelectorIsDisabled:
		return "is_disabled"
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		return "env_registry_generation"
	case Deployment_FieldPathSelectorCurrentVersion:
		return "current_version"
	case Deployment_FieldPathSelectorDbDataVersion:
		return "db_data_version"
	case Deployment_FieldPathSelectorDbLocationTag:
		return "db_location_tag"
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		return "automatic_version_switch"
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return "available_upgrade"
	case Deployment_FieldPathSelectorUpgradeState:
		return "upgrade_state"
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return "data_update_statuses"
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", s))
	}
}

func BuildDeployment_FieldPath(fp gotenobject.RawFieldPath) (Deployment_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Deployment")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorName}, nil
		case "metadata":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorMetadata}, nil
		case "service_name", "serviceName", "service-name":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorServiceName}, nil
		case "region":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorRegion}, nil
		case "public_domain", "publicDomain", "public-domain":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorPublicDomain}, nil
		case "private_domain", "privateDomain", "private-domain":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorPrivateDomain}, nil
		case "labelled_domains", "labelledDomains", "labelled-domains":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorLabelledDomains}, nil
		case "local_network_id", "localNetworkId", "local-network-id":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorLocalNetworkId}, nil
		case "location":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorLocation}, nil
		case "is_disabled", "isDisabled", "is-disabled":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorIsDisabled}, nil
		case "env_registry_generation", "envRegistryGeneration", "env-registry-generation":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorEnvRegistryGeneration}, nil
		case "current_version", "currentVersion", "current-version":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorCurrentVersion}, nil
		case "db_data_version", "dbDataVersion", "db-data-version":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorDbDataVersion}, nil
		case "db_location_tag", "dbLocationTag", "db-location-tag":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorDbLocationTag}, nil
		case "automatic_version_switch", "automaticVersionSwitch", "automatic-version-switch":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorAutomaticVersionSwitch}, nil
		case "available_upgrade", "availableUpgrade", "available-upgrade":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorAvailableUpgrade}, nil
		case "upgrade_state", "upgradeState", "upgrade-state":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorUpgradeState}, nil
		case "data_update_statuses", "dataUpdateStatuses", "data-update-statuses":
			return &Deployment_FieldTerminalPath{selector: Deployment_FieldPathSelectorDataUpdateStatuses}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "labelled_domains", "labelledDomains", "labelled-domains":
			if subpath, err := common.BuildLabelledDomain_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorLabelledDomains, subPath: subpath}, nil
			}
		case "location":
			if subpath, err := BuildDeploymentLocation_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorLocation, subPath: subpath}, nil
			}
		case "available_upgrade", "availableUpgrade", "available-upgrade":
			if subpath, err := BuildDeploymentAvailableUpgrade_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorAvailableUpgrade, subPath: subpath}, nil
			}
		case "upgrade_state", "upgradeState", "upgrade-state":
			if subpath, err := BuildDeploymentUpgradeState_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorUpgradeState, subPath: subpath}, nil
			}
		case "data_update_statuses", "dataUpdateStatuses", "data-update-statuses":
			if subpath, err := BuildDeploymentDbUpdateTaskStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Deployment_FieldSubPath{selector: Deployment_FieldPathSelectorDataUpdateStatuses, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Deployment", fp)
}

func ParseDeployment_FieldPath(rawField string) (Deployment_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeployment_FieldPath(fp)
}

func MustParseDeployment_FieldPath(rawField string) Deployment_FieldPath {
	fp, err := ParseDeployment_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Deployment_FieldTerminalPath struct {
	selector Deployment_FieldPathSelector
}

var _ Deployment_FieldPath = (*Deployment_FieldTerminalPath)(nil)

func (fp *Deployment_FieldTerminalPath) Selector() Deployment_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Deployment_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Deployment_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Deployment
func (fp *Deployment_FieldTerminalPath) Get(source *Deployment) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Deployment_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Deployment_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Deployment_FieldPathSelectorServiceName:
			values = append(values, source.ServiceName)
		case Deployment_FieldPathSelectorRegion:
			if source.Region != nil {
				values = append(values, source.Region)
			}
		case Deployment_FieldPathSelectorPublicDomain:
			values = append(values, source.PublicDomain)
		case Deployment_FieldPathSelectorPrivateDomain:
			values = append(values, source.PrivateDomain)
		case Deployment_FieldPathSelectorLabelledDomains:
			for _, value := range source.GetLabelledDomains() {
				values = append(values, value)
			}
		case Deployment_FieldPathSelectorLocalNetworkId:
			values = append(values, source.LocalNetworkId)
		case Deployment_FieldPathSelectorLocation:
			if source.Location != nil {
				values = append(values, source.Location)
			}
		case Deployment_FieldPathSelectorIsDisabled:
			values = append(values, source.IsDisabled)
		case Deployment_FieldPathSelectorEnvRegistryGeneration:
			values = append(values, source.EnvRegistryGeneration)
		case Deployment_FieldPathSelectorCurrentVersion:
			values = append(values, source.CurrentVersion)
		case Deployment_FieldPathSelectorDbDataVersion:
			values = append(values, source.DbDataVersion)
		case Deployment_FieldPathSelectorDbLocationTag:
			values = append(values, source.DbLocationTag)
		case Deployment_FieldPathSelectorAutomaticVersionSwitch:
			values = append(values, source.AutomaticVersionSwitch)
		case Deployment_FieldPathSelectorAvailableUpgrade:
			if source.AvailableUpgrade != nil {
				values = append(values, source.AvailableUpgrade)
			}
		case Deployment_FieldPathSelectorUpgradeState:
			if source.UpgradeState != nil {
				values = append(values, source.UpgradeState)
			}
		case Deployment_FieldPathSelectorDataUpdateStatuses:
			for _, value := range source.GetDataUpdateStatuses() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
		}
	}
	return
}

func (fp *Deployment_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Deployment))
}

// GetSingle returns value pointed by specific field of from source Deployment
func (fp *Deployment_FieldTerminalPath) GetSingle(source *Deployment) (interface{}, bool) {
	switch fp.selector {
	case Deployment_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Deployment_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Deployment_FieldPathSelectorServiceName:
		return source.GetServiceName(), source != nil
	case Deployment_FieldPathSelectorRegion:
		res := source.GetRegion()
		return res, res != nil
	case Deployment_FieldPathSelectorPublicDomain:
		return source.GetPublicDomain(), source != nil
	case Deployment_FieldPathSelectorPrivateDomain:
		return source.GetPrivateDomain(), source != nil
	case Deployment_FieldPathSelectorLabelledDomains:
		res := source.GetLabelledDomains()
		return res, res != nil
	case Deployment_FieldPathSelectorLocalNetworkId:
		return source.GetLocalNetworkId(), source != nil
	case Deployment_FieldPathSelectorLocation:
		res := source.GetLocation()
		return res, res != nil
	case Deployment_FieldPathSelectorIsDisabled:
		return source.GetIsDisabled(), source != nil
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		return source.GetEnvRegistryGeneration(), source != nil
	case Deployment_FieldPathSelectorCurrentVersion:
		return source.GetCurrentVersion(), source != nil
	case Deployment_FieldPathSelectorDbDataVersion:
		return source.GetDbDataVersion(), source != nil
	case Deployment_FieldPathSelectorDbLocationTag:
		return source.GetDbLocationTag(), source != nil
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		return source.GetAutomaticVersionSwitch(), source != nil
	case Deployment_FieldPathSelectorAvailableUpgrade:
		res := source.GetAvailableUpgrade()
		return res, res != nil
	case Deployment_FieldPathSelectorUpgradeState:
		res := source.GetUpgradeState()
		return res, res != nil
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		res := source.GetDataUpdateStatuses()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
	}
}

func (fp *Deployment_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Deployment))
}

// GetDefault returns a default value of the field type
func (fp *Deployment_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Deployment_FieldPathSelectorName:
		return (*Name)(nil)
	case Deployment_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Deployment_FieldPathSelectorServiceName:
		return ""
	case Deployment_FieldPathSelectorRegion:
		return (*region.Reference)(nil)
	case Deployment_FieldPathSelectorPublicDomain:
		return ""
	case Deployment_FieldPathSelectorPrivateDomain:
		return ""
	case Deployment_FieldPathSelectorLabelledDomains:
		return ([]*common.LabelledDomain)(nil)
	case Deployment_FieldPathSelectorLocalNetworkId:
		return ""
	case Deployment_FieldPathSelectorLocation:
		return (*Deployment_Location)(nil)
	case Deployment_FieldPathSelectorIsDisabled:
		return false
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		return int32(0)
	case Deployment_FieldPathSelectorCurrentVersion:
		return ""
	case Deployment_FieldPathSelectorDbDataVersion:
		return ""
	case Deployment_FieldPathSelectorDbLocationTag:
		return ""
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		return false
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return (*Deployment_AvailableUpgrade)(nil)
	case Deployment_FieldPathSelectorUpgradeState:
		return (*Deployment_UpgradeState)(nil)
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return ([]*Deployment_DbUpdateTaskStatus)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
	}
}

func (fp *Deployment_FieldTerminalPath) ClearValue(item *Deployment) {
	if item != nil {
		switch fp.selector {
		case Deployment_FieldPathSelectorName:
			item.Name = nil
		case Deployment_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Deployment_FieldPathSelectorServiceName:
			item.ServiceName = ""
		case Deployment_FieldPathSelectorRegion:
			item.Region = nil
		case Deployment_FieldPathSelectorPublicDomain:
			item.PublicDomain = ""
		case Deployment_FieldPathSelectorPrivateDomain:
			item.PrivateDomain = ""
		case Deployment_FieldPathSelectorLabelledDomains:
			item.LabelledDomains = nil
		case Deployment_FieldPathSelectorLocalNetworkId:
			item.LocalNetworkId = ""
		case Deployment_FieldPathSelectorLocation:
			item.Location = nil
		case Deployment_FieldPathSelectorIsDisabled:
			item.IsDisabled = false
		case Deployment_FieldPathSelectorEnvRegistryGeneration:
			item.EnvRegistryGeneration = int32(0)
		case Deployment_FieldPathSelectorCurrentVersion:
			item.CurrentVersion = ""
		case Deployment_FieldPathSelectorDbDataVersion:
			item.DbDataVersion = ""
		case Deployment_FieldPathSelectorDbLocationTag:
			item.DbLocationTag = ""
		case Deployment_FieldPathSelectorAutomaticVersionSwitch:
			item.AutomaticVersionSwitch = false
		case Deployment_FieldPathSelectorAvailableUpgrade:
			item.AvailableUpgrade = nil
		case Deployment_FieldPathSelectorUpgradeState:
			item.UpgradeState = nil
		case Deployment_FieldPathSelectorDataUpdateStatuses:
			item.DataUpdateStatuses = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
		}
	}
}

func (fp *Deployment_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Deployment))
}

// IsLeaf - whether field path is holds simple value
func (fp *Deployment_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Deployment_FieldPathSelectorName ||
		fp.selector == Deployment_FieldPathSelectorServiceName ||
		fp.selector == Deployment_FieldPathSelectorRegion ||
		fp.selector == Deployment_FieldPathSelectorPublicDomain ||
		fp.selector == Deployment_FieldPathSelectorPrivateDomain ||
		fp.selector == Deployment_FieldPathSelectorLocalNetworkId ||
		fp.selector == Deployment_FieldPathSelectorIsDisabled ||
		fp.selector == Deployment_FieldPathSelectorEnvRegistryGeneration ||
		fp.selector == Deployment_FieldPathSelectorCurrentVersion ||
		fp.selector == Deployment_FieldPathSelectorDbDataVersion ||
		fp.selector == Deployment_FieldPathSelectorDbLocationTag ||
		fp.selector == Deployment_FieldPathSelectorAutomaticVersionSwitch
}

func (fp *Deployment_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Deployment_FieldTerminalPath) WithIValue(value interface{}) Deployment_FieldPathValue {
	switch fp.selector {
	case Deployment_FieldPathSelectorName:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(*Name)}
	case Deployment_FieldPathSelectorMetadata:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Deployment_FieldPathSelectorServiceName:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorRegion:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(*region.Reference)}
	case Deployment_FieldPathSelectorPublicDomain:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorPrivateDomain:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorLabelledDomains:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.([]*common.LabelledDomain)}
	case Deployment_FieldPathSelectorLocalNetworkId:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorLocation:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(*Deployment_Location)}
	case Deployment_FieldPathSelectorIsDisabled:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(bool)}
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(int32)}
	case Deployment_FieldPathSelectorCurrentVersion:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorDbDataVersion:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorDbLocationTag:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(string)}
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(bool)}
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(*Deployment_AvailableUpgrade)}
	case Deployment_FieldPathSelectorUpgradeState:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.(*Deployment_UpgradeState)}
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return &Deployment_FieldTerminalPathValue{Deployment_FieldTerminalPath: *fp, value: value.([]*Deployment_DbUpdateTaskStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
	}
}

func (fp *Deployment_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Deployment_FieldTerminalPath) WithIArrayOfValues(values interface{}) Deployment_FieldPathArrayOfValues {
	fpaov := &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp}
	switch fp.selector {
	case Deployment_FieldPathSelectorName:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Deployment_FieldPathSelectorMetadata:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Deployment_FieldPathSelectorServiceName:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorRegion:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]*region.Reference)}
	case Deployment_FieldPathSelectorPublicDomain:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorPrivateDomain:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorLabelledDomains:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([][]*common.LabelledDomain)}
	case Deployment_FieldPathSelectorLocalNetworkId:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorLocation:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]*Deployment_Location)}
	case Deployment_FieldPathSelectorIsDisabled:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]bool)}
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]int32)}
	case Deployment_FieldPathSelectorCurrentVersion:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorDbDataVersion:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorDbLocationTag:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]string)}
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]bool)}
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]*Deployment_AvailableUpgrade)}
	case Deployment_FieldPathSelectorUpgradeState:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([]*Deployment_UpgradeState)}
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return &Deployment_FieldTerminalPathArrayOfValues{Deployment_FieldTerminalPath: *fp, values: values.([][]*Deployment_DbUpdateTaskStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
	}
	return fpaov
}

func (fp *Deployment_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Deployment_FieldTerminalPath) WithIArrayItemValue(value interface{}) Deployment_FieldPathArrayItemValue {
	switch fp.selector {
	case Deployment_FieldPathSelectorLabelledDomains:
		return &Deployment_FieldTerminalPathArrayItemValue{Deployment_FieldTerminalPath: *fp, value: value.(*common.LabelledDomain)}
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return &Deployment_FieldTerminalPathArrayItemValue{Deployment_FieldTerminalPath: *fp, value: value.(*Deployment_DbUpdateTaskStatus)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fp.selector))
	}
}

func (fp *Deployment_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Deployment_FieldSubPath struct {
	selector Deployment_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Deployment_FieldPath = (*Deployment_FieldSubPath)(nil)

func (fps *Deployment_FieldSubPath) Selector() Deployment_FieldPathSelector {
	return fps.selector
}
func (fps *Deployment_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Deployment_FieldSubPath) AsLabelledDomainsSubPath() (common.LabelledDomain_FieldPath, bool) {
	res, ok := fps.subPath.(common.LabelledDomain_FieldPath)
	return res, ok
}
func (fps *Deployment_FieldSubPath) AsLocationSubPath() (DeploymentLocation_FieldPath, bool) {
	res, ok := fps.subPath.(DeploymentLocation_FieldPath)
	return res, ok
}
func (fps *Deployment_FieldSubPath) AsAvailableUpgradeSubPath() (DeploymentAvailableUpgrade_FieldPath, bool) {
	res, ok := fps.subPath.(DeploymentAvailableUpgrade_FieldPath)
	return res, ok
}
func (fps *Deployment_FieldSubPath) AsUpgradeStateSubPath() (DeploymentUpgradeState_FieldPath, bool) {
	res, ok := fps.subPath.(DeploymentUpgradeState_FieldPath)
	return res, ok
}
func (fps *Deployment_FieldSubPath) AsDataUpdateStatusesSubPath() (DeploymentDbUpdateTaskStatus_FieldPath, bool) {
	res, ok := fps.subPath.(DeploymentDbUpdateTaskStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Deployment_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Deployment_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Deployment
func (fps *Deployment_FieldSubPath) Get(source *Deployment) (values []interface{}) {
	switch fps.selector {
	case Deployment_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Deployment_FieldPathSelectorLabelledDomains:
		for _, item := range source.GetLabelledDomains() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case Deployment_FieldPathSelectorLocation:
		values = append(values, fps.subPath.GetRaw(source.GetLocation())...)
	case Deployment_FieldPathSelectorAvailableUpgrade:
		values = append(values, fps.subPath.GetRaw(source.GetAvailableUpgrade())...)
	case Deployment_FieldPathSelectorUpgradeState:
		values = append(values, fps.subPath.GetRaw(source.GetUpgradeState())...)
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		for _, item := range source.GetDataUpdateStatuses() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fps.selector))
	}
	return
}

func (fps *Deployment_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Deployment))
}

// GetSingle returns value of selected field from source Deployment
func (fps *Deployment_FieldSubPath) GetSingle(source *Deployment) (interface{}, bool) {
	switch fps.selector {
	case Deployment_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Deployment_FieldPathSelectorLabelledDomains:
		if len(source.GetLabelledDomains()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLabelledDomains()[0])
	case Deployment_FieldPathSelectorLocation:
		if source.GetLocation() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetLocation())
	case Deployment_FieldPathSelectorAvailableUpgrade:
		if source.GetAvailableUpgrade() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAvailableUpgrade())
	case Deployment_FieldPathSelectorUpgradeState:
		if source.GetUpgradeState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetUpgradeState())
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		if len(source.GetDataUpdateStatuses()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetDataUpdateStatuses()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fps.selector))
	}
}

func (fps *Deployment_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Deployment))
}

// GetDefault returns a default value of the field type
func (fps *Deployment_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Deployment_FieldSubPath) ClearValue(item *Deployment) {
	if item != nil {
		switch fps.selector {
		case Deployment_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Deployment_FieldPathSelectorLabelledDomains:
			for _, subItem := range item.LabelledDomains {
				fps.subPath.ClearValueRaw(subItem)
			}
		case Deployment_FieldPathSelectorLocation:
			fps.subPath.ClearValueRaw(item.Location)
		case Deployment_FieldPathSelectorAvailableUpgrade:
			fps.subPath.ClearValueRaw(item.AvailableUpgrade)
		case Deployment_FieldPathSelectorUpgradeState:
			fps.subPath.ClearValueRaw(item.UpgradeState)
		case Deployment_FieldPathSelectorDataUpdateStatuses:
			for _, subItem := range item.DataUpdateStatuses {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment: %d", fps.selector))
		}
	}
}

func (fps *Deployment_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Deployment))
}

// IsLeaf - whether field path is holds simple value
func (fps *Deployment_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Deployment_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Deployment_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Deployment_FieldSubPath) WithIValue(value interface{}) Deployment_FieldPathValue {
	return &Deployment_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Deployment_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Deployment_FieldSubPath) WithIArrayOfValues(values interface{}) Deployment_FieldPathArrayOfValues {
	return &Deployment_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Deployment_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Deployment_FieldSubPath) WithIArrayItemValue(value interface{}) Deployment_FieldPathArrayItemValue {
	return &Deployment_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Deployment_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Deployment_FieldPathValue allows storing values for Deployment fields according to their type
type Deployment_FieldPathValue interface {
	Deployment_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Deployment)
	CompareWith(*Deployment) (cmp int, comparable bool)
}

func ParseDeployment_FieldPathValue(pathStr, valueStr string) (Deployment_FieldPathValue, error) {
	fp, err := ParseDeployment_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Deployment field path value from %s: %v", valueStr, err)
	}
	return fpv.(Deployment_FieldPathValue), nil
}

func MustParseDeployment_FieldPathValue(pathStr, valueStr string) Deployment_FieldPathValue {
	fpv, err := ParseDeployment_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Deployment_FieldTerminalPathValue struct {
	Deployment_FieldTerminalPath
	value interface{}
}

var _ Deployment_FieldPathValue = (*Deployment_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Deployment' as interface{}
func (fpv *Deployment_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Deployment_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsServiceNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsRegionValue() (*region.Reference, bool) {
	res, ok := fpv.value.(*region.Reference)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsPublicDomainValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsPrivateDomainValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsLabelledDomainsValue() ([]*common.LabelledDomain, bool) {
	res, ok := fpv.value.([]*common.LabelledDomain)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsLocalNetworkIdValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsLocationValue() (*Deployment_Location, bool) {
	res, ok := fpv.value.(*Deployment_Location)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsIsDisabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsEnvRegistryGenerationValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsCurrentVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsDbDataVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsDbLocationTagValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsAutomaticVersionSwitchValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsAvailableUpgradeValue() (*Deployment_AvailableUpgrade, bool) {
	res, ok := fpv.value.(*Deployment_AvailableUpgrade)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsUpgradeStateValue() (*Deployment_UpgradeState, bool) {
	res, ok := fpv.value.(*Deployment_UpgradeState)
	return res, ok
}
func (fpv *Deployment_FieldTerminalPathValue) AsDataUpdateStatusesValue() ([]*Deployment_DbUpdateTaskStatus, bool) {
	res, ok := fpv.value.([]*Deployment_DbUpdateTaskStatus)
	return res, ok
}

// SetTo stores value for selected field for object Deployment
func (fpv *Deployment_FieldTerminalPathValue) SetTo(target **Deployment) {
	if *target == nil {
		*target = new(Deployment)
	}
	switch fpv.selector {
	case Deployment_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Deployment_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Deployment_FieldPathSelectorServiceName:
		(*target).ServiceName = fpv.value.(string)
	case Deployment_FieldPathSelectorRegion:
		(*target).Region = fpv.value.(*region.Reference)
	case Deployment_FieldPathSelectorPublicDomain:
		(*target).PublicDomain = fpv.value.(string)
	case Deployment_FieldPathSelectorPrivateDomain:
		(*target).PrivateDomain = fpv.value.(string)
	case Deployment_FieldPathSelectorLabelledDomains:
		(*target).LabelledDomains = fpv.value.([]*common.LabelledDomain)
	case Deployment_FieldPathSelectorLocalNetworkId:
		(*target).LocalNetworkId = fpv.value.(string)
	case Deployment_FieldPathSelectorLocation:
		(*target).Location = fpv.value.(*Deployment_Location)
	case Deployment_FieldPathSelectorIsDisabled:
		(*target).IsDisabled = fpv.value.(bool)
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		(*target).EnvRegistryGeneration = fpv.value.(int32)
	case Deployment_FieldPathSelectorCurrentVersion:
		(*target).CurrentVersion = fpv.value.(string)
	case Deployment_FieldPathSelectorDbDataVersion:
		(*target).DbDataVersion = fpv.value.(string)
	case Deployment_FieldPathSelectorDbLocationTag:
		(*target).DbLocationTag = fpv.value.(string)
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		(*target).AutomaticVersionSwitch = fpv.value.(bool)
	case Deployment_FieldPathSelectorAvailableUpgrade:
		(*target).AvailableUpgrade = fpv.value.(*Deployment_AvailableUpgrade)
	case Deployment_FieldPathSelectorUpgradeState:
		(*target).UpgradeState = fpv.value.(*Deployment_UpgradeState)
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		(*target).DataUpdateStatuses = fpv.value.([]*Deployment_DbUpdateTaskStatus)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fpv.selector))
	}
}

func (fpv *Deployment_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Deployment)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Deployment_FieldTerminalPathValue' with the value under path in 'Deployment'.
func (fpv *Deployment_FieldTerminalPathValue) CompareWith(source *Deployment) (int, bool) {
	switch fpv.selector {
	case Deployment_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorMetadata:
		return 0, false
	case Deployment_FieldPathSelectorServiceName:
		leftValue := fpv.value.(string)
		rightValue := source.GetServiceName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorRegion:
		leftValue := fpv.value.(*region.Reference)
		rightValue := source.GetRegion()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorPublicDomain:
		leftValue := fpv.value.(string)
		rightValue := source.GetPublicDomain()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorPrivateDomain:
		leftValue := fpv.value.(string)
		rightValue := source.GetPrivateDomain()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorLabelledDomains:
		return 0, false
	case Deployment_FieldPathSelectorLocalNetworkId:
		leftValue := fpv.value.(string)
		rightValue := source.GetLocalNetworkId()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorLocation:
		return 0, false
	case Deployment_FieldPathSelectorIsDisabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsDisabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		leftValue := fpv.value.(int32)
		rightValue := source.GetEnvRegistryGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorCurrentVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetCurrentVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorDbDataVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDbDataVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorDbLocationTag:
		leftValue := fpv.value.(string)
		rightValue := source.GetDbLocationTag()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAutomaticVersionSwitch()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return 0, false
	case Deployment_FieldPathSelectorUpgradeState:
		return 0, false
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fpv.selector))
	}
}

func (fpv *Deployment_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Deployment))
}

type Deployment_FieldSubPathValue struct {
	Deployment_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Deployment_FieldPathValue = (*Deployment_FieldSubPathValue)(nil)

func (fpvs *Deployment_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Deployment_FieldSubPathValue) AsLabelledDomainsPathValue() (common.LabelledDomain_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(common.LabelledDomain_FieldPathValue)
	return res, ok
}
func (fpvs *Deployment_FieldSubPathValue) AsLocationPathValue() (DeploymentLocation_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeploymentLocation_FieldPathValue)
	return res, ok
}
func (fpvs *Deployment_FieldSubPathValue) AsAvailableUpgradePathValue() (DeploymentAvailableUpgrade_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeploymentAvailableUpgrade_FieldPathValue)
	return res, ok
}
func (fpvs *Deployment_FieldSubPathValue) AsUpgradeStatePathValue() (DeploymentUpgradeState_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeploymentUpgradeState_FieldPathValue)
	return res, ok
}
func (fpvs *Deployment_FieldSubPathValue) AsDataUpdateStatusesPathValue() (DeploymentDbUpdateTaskStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(DeploymentDbUpdateTaskStatus_FieldPathValue)
	return res, ok
}

func (fpvs *Deployment_FieldSubPathValue) SetTo(target **Deployment) {
	if *target == nil {
		*target = new(Deployment)
	}
	switch fpvs.Selector() {
	case Deployment_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Deployment_FieldPathSelectorLabelledDomains:
		panic("FieldPath setter is unsupported for array subpaths")
	case Deployment_FieldPathSelectorLocation:
		fpvs.subPathValue.(DeploymentLocation_FieldPathValue).SetTo(&(*target).Location)
	case Deployment_FieldPathSelectorAvailableUpgrade:
		fpvs.subPathValue.(DeploymentAvailableUpgrade_FieldPathValue).SetTo(&(*target).AvailableUpgrade)
	case Deployment_FieldPathSelectorUpgradeState:
		fpvs.subPathValue.(DeploymentUpgradeState_FieldPathValue).SetTo(&(*target).UpgradeState)
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fpvs.Selector()))
	}
}

func (fpvs *Deployment_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Deployment)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Deployment_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Deployment_FieldSubPathValue) CompareWith(source *Deployment) (int, bool) {
	switch fpvs.Selector() {
	case Deployment_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Deployment_FieldPathSelectorLabelledDomains:
		return 0, false // repeated field
	case Deployment_FieldPathSelectorLocation:
		return fpvs.subPathValue.(DeploymentLocation_FieldPathValue).CompareWith(source.GetLocation())
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return fpvs.subPathValue.(DeploymentAvailableUpgrade_FieldPathValue).CompareWith(source.GetAvailableUpgrade())
	case Deployment_FieldPathSelectorUpgradeState:
		return fpvs.subPathValue.(DeploymentUpgradeState_FieldPathValue).CompareWith(source.GetUpgradeState())
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fpvs.Selector()))
	}
}

func (fpvs *Deployment_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Deployment))
}

// Deployment_FieldPathArrayItemValue allows storing single item in Path-specific values for Deployment according to their type
// Present only for array (repeated) types.
type Deployment_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Deployment_FieldPath
	ContainsValue(*Deployment) bool
}

// ParseDeployment_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeployment_FieldPathArrayItemValue(pathStr, valueStr string) (Deployment_FieldPathArrayItemValue, error) {
	fp, err := ParseDeployment_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Deployment field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Deployment_FieldPathArrayItemValue), nil
}

func MustParseDeployment_FieldPathArrayItemValue(pathStr, valueStr string) Deployment_FieldPathArrayItemValue {
	fpaiv, err := ParseDeployment_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Deployment_FieldTerminalPathArrayItemValue struct {
	Deployment_FieldTerminalPath
	value interface{}
}

var _ Deployment_FieldPathArrayItemValue = (*Deployment_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Deployment as interface{}
func (fpaiv *Deployment_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Deployment_FieldTerminalPathArrayItemValue) AsLabelledDomainsItemValue() (*common.LabelledDomain, bool) {
	res, ok := fpaiv.value.(*common.LabelledDomain)
	return res, ok
}
func (fpaiv *Deployment_FieldTerminalPathArrayItemValue) AsDataUpdateStatusesItemValue() (*Deployment_DbUpdateTaskStatus, bool) {
	res, ok := fpaiv.value.(*Deployment_DbUpdateTaskStatus)
	return res, ok
}

func (fpaiv *Deployment_FieldTerminalPathArrayItemValue) GetSingle(source *Deployment) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Deployment_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Deployment))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Deployment'
func (fpaiv *Deployment_FieldTerminalPathArrayItemValue) ContainsValue(source *Deployment) bool {
	slice := fpaiv.Deployment_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Deployment_FieldSubPathArrayItemValue struct {
	Deployment_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Deployment_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Deployment_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Deployment_FieldSubPathArrayItemValue) AsLabelledDomainsPathItemValue() (common.LabelledDomain_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(common.LabelledDomain_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Deployment_FieldSubPathArrayItemValue) AsLocationPathItemValue() (DeploymentLocation_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeploymentLocation_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Deployment_FieldSubPathArrayItemValue) AsAvailableUpgradePathItemValue() (DeploymentAvailableUpgrade_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeploymentAvailableUpgrade_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Deployment_FieldSubPathArrayItemValue) AsUpgradeStatePathItemValue() (DeploymentUpgradeState_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeploymentUpgradeState_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Deployment_FieldSubPathArrayItemValue) AsDataUpdateStatusesPathItemValue() (DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Deployment'
func (fpaivs *Deployment_FieldSubPathArrayItemValue) ContainsValue(source *Deployment) bool {
	switch fpaivs.Selector() {
	case Deployment_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Deployment_FieldPathSelectorLabelledDomains:
		return false // repeated/map field
	case Deployment_FieldPathSelectorLocation:
		return fpaivs.subPathItemValue.(DeploymentLocation_FieldPathArrayItemValue).ContainsValue(source.GetLocation())
	case Deployment_FieldPathSelectorAvailableUpgrade:
		return fpaivs.subPathItemValue.(DeploymentAvailableUpgrade_FieldPathArrayItemValue).ContainsValue(source.GetAvailableUpgrade())
	case Deployment_FieldPathSelectorUpgradeState:
		return fpaivs.subPathItemValue.(DeploymentUpgradeState_FieldPathArrayItemValue).ContainsValue(source.GetUpgradeState())
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment: %d", fpaivs.Selector()))
	}
}

// Deployment_FieldPathArrayOfValues allows storing slice of values for Deployment fields according to their type
type Deployment_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Deployment_FieldPath
}

func ParseDeployment_FieldPathArrayOfValues(pathStr, valuesStr string) (Deployment_FieldPathArrayOfValues, error) {
	fp, err := ParseDeployment_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Deployment field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Deployment_FieldPathArrayOfValues), nil
}

func MustParseDeployment_FieldPathArrayOfValues(pathStr, valuesStr string) Deployment_FieldPathArrayOfValues {
	fpaov, err := ParseDeployment_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Deployment_FieldTerminalPathArrayOfValues struct {
	Deployment_FieldTerminalPath
	values interface{}
}

var _ Deployment_FieldPathArrayOfValues = (*Deployment_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Deployment_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Deployment_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorServiceName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorRegion:
		for _, v := range fpaov.values.([]*region.Reference) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorPublicDomain:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorPrivateDomain:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorLabelledDomains:
		for _, v := range fpaov.values.([][]*common.LabelledDomain) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorLocalNetworkId:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorLocation:
		for _, v := range fpaov.values.([]*Deployment_Location) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorIsDisabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorEnvRegistryGeneration:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorCurrentVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorDbDataVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorDbLocationTag:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorAutomaticVersionSwitch:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorAvailableUpgrade:
		for _, v := range fpaov.values.([]*Deployment_AvailableUpgrade) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorUpgradeState:
		for _, v := range fpaov.values.([]*Deployment_UpgradeState) {
			values = append(values, v)
		}
	case Deployment_FieldPathSelectorDataUpdateStatuses:
		for _, v := range fpaov.values.([][]*Deployment_DbUpdateTaskStatus) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsServiceNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsRegionArrayOfValues() ([]*region.Reference, bool) {
	res, ok := fpaov.values.([]*region.Reference)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsPublicDomainArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsPrivateDomainArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsLabelledDomainsArrayOfValues() ([][]*common.LabelledDomain, bool) {
	res, ok := fpaov.values.([][]*common.LabelledDomain)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsLocalNetworkIdArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsLocationArrayOfValues() ([]*Deployment_Location, bool) {
	res, ok := fpaov.values.([]*Deployment_Location)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsIsDisabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsEnvRegistryGenerationArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsCurrentVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsDbDataVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsDbLocationTagArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsAutomaticVersionSwitchArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsAvailableUpgradeArrayOfValues() ([]*Deployment_AvailableUpgrade, bool) {
	res, ok := fpaov.values.([]*Deployment_AvailableUpgrade)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsUpgradeStateArrayOfValues() ([]*Deployment_UpgradeState, bool) {
	res, ok := fpaov.values.([]*Deployment_UpgradeState)
	return res, ok
}
func (fpaov *Deployment_FieldTerminalPathArrayOfValues) AsDataUpdateStatusesArrayOfValues() ([][]*Deployment_DbUpdateTaskStatus, bool) {
	res, ok := fpaov.values.([][]*Deployment_DbUpdateTaskStatus)
	return res, ok
}

type Deployment_FieldSubPathArrayOfValues struct {
	Deployment_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Deployment_FieldPathArrayOfValues = (*Deployment_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Deployment_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Deployment_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Deployment_FieldSubPathArrayOfValues) AsLabelledDomainsPathArrayOfValues() (common.LabelledDomain_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(common.LabelledDomain_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Deployment_FieldSubPathArrayOfValues) AsLocationPathArrayOfValues() (DeploymentLocation_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeploymentLocation_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Deployment_FieldSubPathArrayOfValues) AsAvailableUpgradePathArrayOfValues() (DeploymentAvailableUpgrade_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeploymentAvailableUpgrade_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Deployment_FieldSubPathArrayOfValues) AsUpgradeStatePathArrayOfValues() (DeploymentUpgradeState_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeploymentUpgradeState_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Deployment_FieldSubPathArrayOfValues) AsDataUpdateStatusesPathArrayOfValues() (DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeploymentLocation_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeploymentLocation_FieldPathSelector
	Get(source *Deployment_Location) []interface{}
	GetSingle(source *Deployment_Location) (interface{}, bool)
	ClearValue(item *Deployment_Location)

	// Those methods build corresponding DeploymentLocation_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeploymentLocation_FieldPathValue
	WithIArrayOfValues(values interface{}) DeploymentLocation_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeploymentLocation_FieldPathArrayItemValue
}

type DeploymentLocation_FieldPathSelector int32

const (
	DeploymentLocation_FieldPathSelectorContinent     DeploymentLocation_FieldPathSelector = 0
	DeploymentLocation_FieldPathSelectorCountry       DeploymentLocation_FieldPathSelector = 1
	DeploymentLocation_FieldPathSelectorAgglomeration DeploymentLocation_FieldPathSelector = 2
	DeploymentLocation_FieldPathSelectorCity          DeploymentLocation_FieldPathSelector = 3
	DeploymentLocation_FieldPathSelectorCloud         DeploymentLocation_FieldPathSelector = 4
)

func (s DeploymentLocation_FieldPathSelector) String() string {
	switch s {
	case DeploymentLocation_FieldPathSelectorContinent:
		return "continent"
	case DeploymentLocation_FieldPathSelectorCountry:
		return "country"
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		return "agglomeration"
	case DeploymentLocation_FieldPathSelectorCity:
		return "city"
	case DeploymentLocation_FieldPathSelectorCloud:
		return "cloud"
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", s))
	}
}

func BuildDeploymentLocation_FieldPath(fp gotenobject.RawFieldPath) (DeploymentLocation_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Deployment_Location")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "continent":
			return &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorContinent}, nil
		case "country":
			return &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorCountry}, nil
		case "agglomeration":
			return &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorAgglomeration}, nil
		case "city":
			return &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorCity}, nil
		case "cloud":
			return &DeploymentLocation_FieldTerminalPath{selector: DeploymentLocation_FieldPathSelectorCloud}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Deployment_Location", fp)
}

func ParseDeploymentLocation_FieldPath(rawField string) (DeploymentLocation_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeploymentLocation_FieldPath(fp)
}

func MustParseDeploymentLocation_FieldPath(rawField string) DeploymentLocation_FieldPath {
	fp, err := ParseDeploymentLocation_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeploymentLocation_FieldTerminalPath struct {
	selector DeploymentLocation_FieldPathSelector
}

var _ DeploymentLocation_FieldPath = (*DeploymentLocation_FieldTerminalPath)(nil)

func (fp *DeploymentLocation_FieldTerminalPath) Selector() DeploymentLocation_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeploymentLocation_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeploymentLocation_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Deployment_Location
func (fp *DeploymentLocation_FieldTerminalPath) Get(source *Deployment_Location) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeploymentLocation_FieldPathSelectorContinent:
			values = append(values, source.Continent)
		case DeploymentLocation_FieldPathSelectorCountry:
			values = append(values, source.Country)
		case DeploymentLocation_FieldPathSelectorAgglomeration:
			values = append(values, source.Agglomeration)
		case DeploymentLocation_FieldPathSelectorCity:
			values = append(values, source.City)
		case DeploymentLocation_FieldPathSelectorCloud:
			values = append(values, source.Cloud)
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
		}
	}
	return
}

func (fp *DeploymentLocation_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Deployment_Location))
}

// GetSingle returns value pointed by specific field of from source Deployment_Location
func (fp *DeploymentLocation_FieldTerminalPath) GetSingle(source *Deployment_Location) (interface{}, bool) {
	switch fp.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		return source.GetContinent(), source != nil
	case DeploymentLocation_FieldPathSelectorCountry:
		return source.GetCountry(), source != nil
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		return source.GetAgglomeration(), source != nil
	case DeploymentLocation_FieldPathSelectorCity:
		return source.GetCity(), source != nil
	case DeploymentLocation_FieldPathSelectorCloud:
		return source.GetCloud(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
	}
}

func (fp *DeploymentLocation_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Deployment_Location))
}

// GetDefault returns a default value of the field type
func (fp *DeploymentLocation_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		return ""
	case DeploymentLocation_FieldPathSelectorCountry:
		return ""
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		return ""
	case DeploymentLocation_FieldPathSelectorCity:
		return ""
	case DeploymentLocation_FieldPathSelectorCloud:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
	}
}

func (fp *DeploymentLocation_FieldTerminalPath) ClearValue(item *Deployment_Location) {
	if item != nil {
		switch fp.selector {
		case DeploymentLocation_FieldPathSelectorContinent:
			item.Continent = ""
		case DeploymentLocation_FieldPathSelectorCountry:
			item.Country = ""
		case DeploymentLocation_FieldPathSelectorAgglomeration:
			item.Agglomeration = ""
		case DeploymentLocation_FieldPathSelectorCity:
			item.City = ""
		case DeploymentLocation_FieldPathSelectorCloud:
			item.Cloud = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
		}
	}
}

func (fp *DeploymentLocation_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Deployment_Location))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeploymentLocation_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeploymentLocation_FieldPathSelectorContinent ||
		fp.selector == DeploymentLocation_FieldPathSelectorCountry ||
		fp.selector == DeploymentLocation_FieldPathSelectorAgglomeration ||
		fp.selector == DeploymentLocation_FieldPathSelectorCity ||
		fp.selector == DeploymentLocation_FieldPathSelectorCloud
}

func (fp *DeploymentLocation_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeploymentLocation_FieldTerminalPath) WithIValue(value interface{}) DeploymentLocation_FieldPathValue {
	switch fp.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		return &DeploymentLocation_FieldTerminalPathValue{DeploymentLocation_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentLocation_FieldPathSelectorCountry:
		return &DeploymentLocation_FieldTerminalPathValue{DeploymentLocation_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		return &DeploymentLocation_FieldTerminalPathValue{DeploymentLocation_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentLocation_FieldPathSelectorCity:
		return &DeploymentLocation_FieldTerminalPathValue{DeploymentLocation_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentLocation_FieldPathSelectorCloud:
		return &DeploymentLocation_FieldTerminalPathValue{DeploymentLocation_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
	}
}

func (fp *DeploymentLocation_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeploymentLocation_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeploymentLocation_FieldPathArrayOfValues {
	fpaov := &DeploymentLocation_FieldTerminalPathArrayOfValues{DeploymentLocation_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		return &DeploymentLocation_FieldTerminalPathArrayOfValues{DeploymentLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentLocation_FieldPathSelectorCountry:
		return &DeploymentLocation_FieldTerminalPathArrayOfValues{DeploymentLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		return &DeploymentLocation_FieldTerminalPathArrayOfValues{DeploymentLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentLocation_FieldPathSelectorCity:
		return &DeploymentLocation_FieldTerminalPathArrayOfValues{DeploymentLocation_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentLocation_FieldPathSelectorCloud:
		return &DeploymentLocation_FieldTerminalPathArrayOfValues{DeploymentLocation_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeploymentLocation_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeploymentLocation_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeploymentLocation_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fp.selector))
	}
}

func (fp *DeploymentLocation_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeploymentLocation_FieldPathValue allows storing values for Location fields according to their type
type DeploymentLocation_FieldPathValue interface {
	DeploymentLocation_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Deployment_Location)
	CompareWith(*Deployment_Location) (cmp int, comparable bool)
}

func ParseDeploymentLocation_FieldPathValue(pathStr, valueStr string) (DeploymentLocation_FieldPathValue, error) {
	fp, err := ParseDeploymentLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Location field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeploymentLocation_FieldPathValue), nil
}

func MustParseDeploymentLocation_FieldPathValue(pathStr, valueStr string) DeploymentLocation_FieldPathValue {
	fpv, err := ParseDeploymentLocation_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeploymentLocation_FieldTerminalPathValue struct {
	DeploymentLocation_FieldTerminalPath
	value interface{}
}

var _ DeploymentLocation_FieldPathValue = (*DeploymentLocation_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Location' as interface{}
func (fpv *DeploymentLocation_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeploymentLocation_FieldTerminalPathValue) AsContinentValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentLocation_FieldTerminalPathValue) AsCountryValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentLocation_FieldTerminalPathValue) AsAgglomerationValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentLocation_FieldTerminalPathValue) AsCityValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentLocation_FieldTerminalPathValue) AsCloudValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Location
func (fpv *DeploymentLocation_FieldTerminalPathValue) SetTo(target **Deployment_Location) {
	if *target == nil {
		*target = new(Deployment_Location)
	}
	switch fpv.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		(*target).Continent = fpv.value.(string)
	case DeploymentLocation_FieldPathSelectorCountry:
		(*target).Country = fpv.value.(string)
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		(*target).Agglomeration = fpv.value.(string)
	case DeploymentLocation_FieldPathSelectorCity:
		(*target).City = fpv.value.(string)
	case DeploymentLocation_FieldPathSelectorCloud:
		(*target).Cloud = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fpv.selector))
	}
}

func (fpv *DeploymentLocation_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Deployment_Location)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeploymentLocation_FieldTerminalPathValue' with the value under path in 'Deployment_Location'.
func (fpv *DeploymentLocation_FieldTerminalPathValue) CompareWith(source *Deployment_Location) (int, bool) {
	switch fpv.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		leftValue := fpv.value.(string)
		rightValue := source.GetContinent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentLocation_FieldPathSelectorCountry:
		leftValue := fpv.value.(string)
		rightValue := source.GetCountry()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		leftValue := fpv.value.(string)
		rightValue := source.GetAgglomeration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentLocation_FieldPathSelectorCity:
		leftValue := fpv.value.(string)
		rightValue := source.GetCity()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentLocation_FieldPathSelectorCloud:
		leftValue := fpv.value.(string)
		rightValue := source.GetCloud()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_Location: %d", fpv.selector))
	}
}

func (fpv *DeploymentLocation_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Deployment_Location))
}

// DeploymentLocation_FieldPathArrayItemValue allows storing single item in Path-specific values for Location according to their type
// Present only for array (repeated) types.
type DeploymentLocation_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeploymentLocation_FieldPath
	ContainsValue(*Deployment_Location) bool
}

// ParseDeploymentLocation_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeploymentLocation_FieldPathArrayItemValue(pathStr, valueStr string) (DeploymentLocation_FieldPathArrayItemValue, error) {
	fp, err := ParseDeploymentLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Location field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeploymentLocation_FieldPathArrayItemValue), nil
}

func MustParseDeploymentLocation_FieldPathArrayItemValue(pathStr, valueStr string) DeploymentLocation_FieldPathArrayItemValue {
	fpaiv, err := ParseDeploymentLocation_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeploymentLocation_FieldTerminalPathArrayItemValue struct {
	DeploymentLocation_FieldTerminalPath
	value interface{}
}

var _ DeploymentLocation_FieldPathArrayItemValue = (*DeploymentLocation_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Deployment_Location as interface{}
func (fpaiv *DeploymentLocation_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeploymentLocation_FieldTerminalPathArrayItemValue) GetSingle(source *Deployment_Location) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeploymentLocation_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Deployment_Location))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Location'
func (fpaiv *DeploymentLocation_FieldTerminalPathArrayItemValue) ContainsValue(source *Deployment_Location) bool {
	slice := fpaiv.DeploymentLocation_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeploymentLocation_FieldPathArrayOfValues allows storing slice of values for Location fields according to their type
type DeploymentLocation_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeploymentLocation_FieldPath
}

func ParseDeploymentLocation_FieldPathArrayOfValues(pathStr, valuesStr string) (DeploymentLocation_FieldPathArrayOfValues, error) {
	fp, err := ParseDeploymentLocation_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Location field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeploymentLocation_FieldPathArrayOfValues), nil
}

func MustParseDeploymentLocation_FieldPathArrayOfValues(pathStr, valuesStr string) DeploymentLocation_FieldPathArrayOfValues {
	fpaov, err := ParseDeploymentLocation_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeploymentLocation_FieldTerminalPathArrayOfValues struct {
	DeploymentLocation_FieldTerminalPath
	values interface{}
}

var _ DeploymentLocation_FieldPathArrayOfValues = (*DeploymentLocation_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeploymentLocation_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeploymentLocation_FieldPathSelectorContinent:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentLocation_FieldPathSelectorCountry:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentLocation_FieldPathSelectorAgglomeration:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentLocation_FieldPathSelectorCity:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentLocation_FieldPathSelectorCloud:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeploymentLocation_FieldTerminalPathArrayOfValues) AsContinentArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentLocation_FieldTerminalPathArrayOfValues) AsCountryArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentLocation_FieldTerminalPathArrayOfValues) AsAgglomerationArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentLocation_FieldTerminalPathArrayOfValues) AsCityArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentLocation_FieldTerminalPathArrayOfValues) AsCloudArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeploymentUpgradeState_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeploymentUpgradeState_FieldPathSelector
	Get(source *Deployment_UpgradeState) []interface{}
	GetSingle(source *Deployment_UpgradeState) (interface{}, bool)
	ClearValue(item *Deployment_UpgradeState)

	// Those methods build corresponding DeploymentUpgradeState_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeploymentUpgradeState_FieldPathValue
	WithIArrayOfValues(values interface{}) DeploymentUpgradeState_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeploymentUpgradeState_FieldPathArrayItemValue
}

type DeploymentUpgradeState_FieldPathSelector int32

const (
	DeploymentUpgradeState_FieldPathSelectorTargetVersion       DeploymentUpgradeState_FieldPathSelector = 0
	DeploymentUpgradeState_FieldPathSelectorReadyShards         DeploymentUpgradeState_FieldPathSelector = 1
	DeploymentUpgradeState_FieldPathSelectorPendingShards       DeploymentUpgradeState_FieldPathSelector = 2
	DeploymentUpgradeState_FieldPathSelectorStage               DeploymentUpgradeState_FieldPathSelector = 3
	DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion DeploymentUpgradeState_FieldPathSelector = 4
	DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag DeploymentUpgradeState_FieldPathSelector = 5
)

func (s DeploymentUpgradeState_FieldPathSelector) String() string {
	switch s {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		return "target_version"
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		return "ready_shards"
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		return "pending_shards"
	case DeploymentUpgradeState_FieldPathSelectorStage:
		return "stage"
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		return "db_data_target_version"
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		return "db_target_location_tag"
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", s))
	}
}

func BuildDeploymentUpgradeState_FieldPath(fp gotenobject.RawFieldPath) (DeploymentUpgradeState_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Deployment_UpgradeState")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "target_version", "targetVersion", "target-version":
			return &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorTargetVersion}, nil
		case "ready_shards", "readyShards", "ready-shards":
			return &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorReadyShards}, nil
		case "pending_shards", "pendingShards", "pending-shards":
			return &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorPendingShards}, nil
		case "stage":
			return &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorStage}, nil
		case "db_data_target_version", "dbDataTargetVersion", "db-data-target-version":
			return &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion}, nil
		case "db_target_location_tag", "dbTargetLocationTag", "db-target-location-tag":
			return &DeploymentUpgradeState_FieldTerminalPath{selector: DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Deployment_UpgradeState", fp)
}

func ParseDeploymentUpgradeState_FieldPath(rawField string) (DeploymentUpgradeState_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeploymentUpgradeState_FieldPath(fp)
}

func MustParseDeploymentUpgradeState_FieldPath(rawField string) DeploymentUpgradeState_FieldPath {
	fp, err := ParseDeploymentUpgradeState_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeploymentUpgradeState_FieldTerminalPath struct {
	selector DeploymentUpgradeState_FieldPathSelector
}

var _ DeploymentUpgradeState_FieldPath = (*DeploymentUpgradeState_FieldTerminalPath)(nil)

func (fp *DeploymentUpgradeState_FieldTerminalPath) Selector() DeploymentUpgradeState_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeploymentUpgradeState_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeploymentUpgradeState_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Deployment_UpgradeState
func (fp *DeploymentUpgradeState_FieldTerminalPath) Get(source *Deployment_UpgradeState) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
			values = append(values, source.TargetVersion)
		case DeploymentUpgradeState_FieldPathSelectorReadyShards:
			for _, value := range source.GetReadyShards() {
				values = append(values, value)
			}
		case DeploymentUpgradeState_FieldPathSelectorPendingShards:
			for _, value := range source.GetPendingShards() {
				values = append(values, value)
			}
		case DeploymentUpgradeState_FieldPathSelectorStage:
			values = append(values, source.Stage)
		case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
			values = append(values, source.DbDataTargetVersion)
		case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
			values = append(values, source.DbTargetLocationTag)
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
		}
	}
	return
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Deployment_UpgradeState))
}

// GetSingle returns value pointed by specific field of from source Deployment_UpgradeState
func (fp *DeploymentUpgradeState_FieldTerminalPath) GetSingle(source *Deployment_UpgradeState) (interface{}, bool) {
	switch fp.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		return source.GetTargetVersion(), source != nil
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		res := source.GetReadyShards()
		return res, res != nil
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		res := source.GetPendingShards()
		return res, res != nil
	case DeploymentUpgradeState_FieldPathSelectorStage:
		return source.GetStage(), source != nil
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		return source.GetDbDataTargetVersion(), source != nil
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		return source.GetDbTargetLocationTag(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
	}
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Deployment_UpgradeState))
}

// GetDefault returns a default value of the field type
func (fp *DeploymentUpgradeState_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		return ""
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		return ([]int64)(nil)
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		return ([]int64)(nil)
	case DeploymentUpgradeState_FieldPathSelectorStage:
		return Deployment_UpgradeState_READY
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		return ""
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
	}
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) ClearValue(item *Deployment_UpgradeState) {
	if item != nil {
		switch fp.selector {
		case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
			item.TargetVersion = ""
		case DeploymentUpgradeState_FieldPathSelectorReadyShards:
			item.ReadyShards = nil
		case DeploymentUpgradeState_FieldPathSelectorPendingShards:
			item.PendingShards = nil
		case DeploymentUpgradeState_FieldPathSelectorStage:
			item.Stage = Deployment_UpgradeState_READY
		case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
			item.DbDataTargetVersion = ""
		case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
			item.DbTargetLocationTag = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
		}
	}
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Deployment_UpgradeState))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeploymentUpgradeState_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeploymentUpgradeState_FieldPathSelectorTargetVersion ||
		fp.selector == DeploymentUpgradeState_FieldPathSelectorReadyShards ||
		fp.selector == DeploymentUpgradeState_FieldPathSelectorPendingShards ||
		fp.selector == DeploymentUpgradeState_FieldPathSelectorStage ||
		fp.selector == DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion ||
		fp.selector == DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) WithIValue(value interface{}) DeploymentUpgradeState_FieldPathValue {
	switch fp.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		return &DeploymentUpgradeState_FieldTerminalPathValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		return &DeploymentUpgradeState_FieldTerminalPathValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.([]int64)}
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		return &DeploymentUpgradeState_FieldTerminalPathValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.([]int64)}
	case DeploymentUpgradeState_FieldPathSelectorStage:
		return &DeploymentUpgradeState_FieldTerminalPathValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.(Deployment_UpgradeState_Stage)}
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		return &DeploymentUpgradeState_FieldTerminalPathValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		return &DeploymentUpgradeState_FieldTerminalPathValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
	}
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeploymentUpgradeState_FieldPathArrayOfValues {
	fpaov := &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		return &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		return &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp, values: values.([][]int64)}
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		return &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp, values: values.([][]int64)}
	case DeploymentUpgradeState_FieldPathSelectorStage:
		return &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp, values: values.([]Deployment_UpgradeState_Stage)}
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		return &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		return &DeploymentUpgradeState_FieldTerminalPathArrayOfValues{DeploymentUpgradeState_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeploymentUpgradeState_FieldPathArrayItemValue {
	switch fp.selector {
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		return &DeploymentUpgradeState_FieldTerminalPathArrayItemValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.(int64)}
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		return &DeploymentUpgradeState_FieldTerminalPathArrayItemValue{DeploymentUpgradeState_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fp.selector))
	}
}

func (fp *DeploymentUpgradeState_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeploymentUpgradeState_FieldPathValue allows storing values for UpgradeState fields according to their type
type DeploymentUpgradeState_FieldPathValue interface {
	DeploymentUpgradeState_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Deployment_UpgradeState)
	CompareWith(*Deployment_UpgradeState) (cmp int, comparable bool)
}

func ParseDeploymentUpgradeState_FieldPathValue(pathStr, valueStr string) (DeploymentUpgradeState_FieldPathValue, error) {
	fp, err := ParseDeploymentUpgradeState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpgradeState field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeploymentUpgradeState_FieldPathValue), nil
}

func MustParseDeploymentUpgradeState_FieldPathValue(pathStr, valueStr string) DeploymentUpgradeState_FieldPathValue {
	fpv, err := ParseDeploymentUpgradeState_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeploymentUpgradeState_FieldTerminalPathValue struct {
	DeploymentUpgradeState_FieldTerminalPath
	value interface{}
}

var _ DeploymentUpgradeState_FieldPathValue = (*DeploymentUpgradeState_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpgradeState' as interface{}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) AsTargetVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) AsReadyShardsValue() ([]int64, bool) {
	res, ok := fpv.value.([]int64)
	return res, ok
}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) AsPendingShardsValue() ([]int64, bool) {
	res, ok := fpv.value.([]int64)
	return res, ok
}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) AsStageValue() (Deployment_UpgradeState_Stage, bool) {
	res, ok := fpv.value.(Deployment_UpgradeState_Stage)
	return res, ok
}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) AsDbDataTargetVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) AsDbTargetLocationTagValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object UpgradeState
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) SetTo(target **Deployment_UpgradeState) {
	if *target == nil {
		*target = new(Deployment_UpgradeState)
	}
	switch fpv.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		(*target).TargetVersion = fpv.value.(string)
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		(*target).ReadyShards = fpv.value.([]int64)
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		(*target).PendingShards = fpv.value.([]int64)
	case DeploymentUpgradeState_FieldPathSelectorStage:
		(*target).Stage = fpv.value.(Deployment_UpgradeState_Stage)
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		(*target).DbDataTargetVersion = fpv.value.(string)
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		(*target).DbTargetLocationTag = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fpv.selector))
	}
}

func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Deployment_UpgradeState)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeploymentUpgradeState_FieldTerminalPathValue' with the value under path in 'Deployment_UpgradeState'.
func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) CompareWith(source *Deployment_UpgradeState) (int, bool) {
	switch fpv.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetTargetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		return 0, false
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		return 0, false
	case DeploymentUpgradeState_FieldPathSelectorStage:
		leftValue := fpv.value.(Deployment_UpgradeState_Stage)
		rightValue := source.GetStage()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDbDataTargetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		leftValue := fpv.value.(string)
		rightValue := source.GetDbTargetLocationTag()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_UpgradeState: %d", fpv.selector))
	}
}

func (fpv *DeploymentUpgradeState_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Deployment_UpgradeState))
}

// DeploymentUpgradeState_FieldPathArrayItemValue allows storing single item in Path-specific values for UpgradeState according to their type
// Present only for array (repeated) types.
type DeploymentUpgradeState_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeploymentUpgradeState_FieldPath
	ContainsValue(*Deployment_UpgradeState) bool
}

// ParseDeploymentUpgradeState_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeploymentUpgradeState_FieldPathArrayItemValue(pathStr, valueStr string) (DeploymentUpgradeState_FieldPathArrayItemValue, error) {
	fp, err := ParseDeploymentUpgradeState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpgradeState field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeploymentUpgradeState_FieldPathArrayItemValue), nil
}

func MustParseDeploymentUpgradeState_FieldPathArrayItemValue(pathStr, valueStr string) DeploymentUpgradeState_FieldPathArrayItemValue {
	fpaiv, err := ParseDeploymentUpgradeState_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeploymentUpgradeState_FieldTerminalPathArrayItemValue struct {
	DeploymentUpgradeState_FieldTerminalPath
	value interface{}
}

var _ DeploymentUpgradeState_FieldPathArrayItemValue = (*DeploymentUpgradeState_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Deployment_UpgradeState as interface{}
func (fpaiv *DeploymentUpgradeState_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeploymentUpgradeState_FieldTerminalPathArrayItemValue) AsReadyShardsItemValue() (int64, bool) {
	res, ok := fpaiv.value.(int64)
	return res, ok
}
func (fpaiv *DeploymentUpgradeState_FieldTerminalPathArrayItemValue) AsPendingShardsItemValue() (int64, bool) {
	res, ok := fpaiv.value.(int64)
	return res, ok
}

func (fpaiv *DeploymentUpgradeState_FieldTerminalPathArrayItemValue) GetSingle(source *Deployment_UpgradeState) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeploymentUpgradeState_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Deployment_UpgradeState))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpgradeState'
func (fpaiv *DeploymentUpgradeState_FieldTerminalPathArrayItemValue) ContainsValue(source *Deployment_UpgradeState) bool {
	slice := fpaiv.DeploymentUpgradeState_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeploymentUpgradeState_FieldPathArrayOfValues allows storing slice of values for UpgradeState fields according to their type
type DeploymentUpgradeState_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeploymentUpgradeState_FieldPath
}

func ParseDeploymentUpgradeState_FieldPathArrayOfValues(pathStr, valuesStr string) (DeploymentUpgradeState_FieldPathArrayOfValues, error) {
	fp, err := ParseDeploymentUpgradeState_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpgradeState field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeploymentUpgradeState_FieldPathArrayOfValues), nil
}

func MustParseDeploymentUpgradeState_FieldPathArrayOfValues(pathStr, valuesStr string) DeploymentUpgradeState_FieldPathArrayOfValues {
	fpaov, err := ParseDeploymentUpgradeState_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeploymentUpgradeState_FieldTerminalPathArrayOfValues struct {
	DeploymentUpgradeState_FieldTerminalPath
	values interface{}
}

var _ DeploymentUpgradeState_FieldPathArrayOfValues = (*DeploymentUpgradeState_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeploymentUpgradeState_FieldPathSelectorTargetVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentUpgradeState_FieldPathSelectorReadyShards:
		for _, v := range fpaov.values.([][]int64) {
			values = append(values, v)
		}
	case DeploymentUpgradeState_FieldPathSelectorPendingShards:
		for _, v := range fpaov.values.([][]int64) {
			values = append(values, v)
		}
	case DeploymentUpgradeState_FieldPathSelectorStage:
		for _, v := range fpaov.values.([]Deployment_UpgradeState_Stage) {
			values = append(values, v)
		}
	case DeploymentUpgradeState_FieldPathSelectorDbDataTargetVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentUpgradeState_FieldPathSelectorDbTargetLocationTag:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) AsTargetVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) AsReadyShardsArrayOfValues() ([][]int64, bool) {
	res, ok := fpaov.values.([][]int64)
	return res, ok
}
func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) AsPendingShardsArrayOfValues() ([][]int64, bool) {
	res, ok := fpaov.values.([][]int64)
	return res, ok
}
func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) AsStageArrayOfValues() ([]Deployment_UpgradeState_Stage, bool) {
	res, ok := fpaov.values.([]Deployment_UpgradeState_Stage)
	return res, ok
}
func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) AsDbDataTargetVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentUpgradeState_FieldTerminalPathArrayOfValues) AsDbTargetLocationTagArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeploymentAvailableUpgrade_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeploymentAvailableUpgrade_FieldPathSelector
	Get(source *Deployment_AvailableUpgrade) []interface{}
	GetSingle(source *Deployment_AvailableUpgrade) (interface{}, bool)
	ClearValue(item *Deployment_AvailableUpgrade)

	// Those methods build corresponding DeploymentAvailableUpgrade_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeploymentAvailableUpgrade_FieldPathValue
	WithIArrayOfValues(values interface{}) DeploymentAvailableUpgrade_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeploymentAvailableUpgrade_FieldPathArrayItemValue
}

type DeploymentAvailableUpgrade_FieldPathSelector int32

const (
	DeploymentAvailableUpgrade_FieldPathSelectorApiVersion       DeploymentAvailableUpgrade_FieldPathSelector = 0
	DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion    DeploymentAvailableUpgrade_FieldPathSelector = 1
	DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag    DeploymentAvailableUpgrade_FieldPathSelector = 2
	DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount DeploymentAvailableUpgrade_FieldPathSelector = 3
)

func (s DeploymentAvailableUpgrade_FieldPathSelector) String() string {
	switch s {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		return "api_version"
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		return "db_data_version"
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		return "db_location_tag"
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		return "total_shards_count"
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", s))
	}
}

func BuildDeploymentAvailableUpgrade_FieldPath(fp gotenobject.RawFieldPath) (DeploymentAvailableUpgrade_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Deployment_AvailableUpgrade")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "api_version", "apiVersion", "api-version":
			return &DeploymentAvailableUpgrade_FieldTerminalPath{selector: DeploymentAvailableUpgrade_FieldPathSelectorApiVersion}, nil
		case "db_data_version", "dbDataVersion", "db-data-version":
			return &DeploymentAvailableUpgrade_FieldTerminalPath{selector: DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion}, nil
		case "db_location_tag", "dbLocationTag", "db-location-tag":
			return &DeploymentAvailableUpgrade_FieldTerminalPath{selector: DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag}, nil
		case "total_shards_count", "totalShardsCount", "total-shards-count":
			return &DeploymentAvailableUpgrade_FieldTerminalPath{selector: DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Deployment_AvailableUpgrade", fp)
}

func ParseDeploymentAvailableUpgrade_FieldPath(rawField string) (DeploymentAvailableUpgrade_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeploymentAvailableUpgrade_FieldPath(fp)
}

func MustParseDeploymentAvailableUpgrade_FieldPath(rawField string) DeploymentAvailableUpgrade_FieldPath {
	fp, err := ParseDeploymentAvailableUpgrade_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeploymentAvailableUpgrade_FieldTerminalPath struct {
	selector DeploymentAvailableUpgrade_FieldPathSelector
}

var _ DeploymentAvailableUpgrade_FieldPath = (*DeploymentAvailableUpgrade_FieldTerminalPath)(nil)

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) Selector() DeploymentAvailableUpgrade_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Deployment_AvailableUpgrade
func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) Get(source *Deployment_AvailableUpgrade) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
			values = append(values, source.ApiVersion)
		case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
			values = append(values, source.DbDataVersion)
		case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
			values = append(values, source.DbLocationTag)
		case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
			values = append(values, source.TotalShardsCount)
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
		}
	}
	return
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Deployment_AvailableUpgrade))
}

// GetSingle returns value pointed by specific field of from source Deployment_AvailableUpgrade
func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) GetSingle(source *Deployment_AvailableUpgrade) (interface{}, bool) {
	switch fp.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		return source.GetApiVersion(), source != nil
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		return source.GetDbDataVersion(), source != nil
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		return source.GetDbLocationTag(), source != nil
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		return source.GetTotalShardsCount(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
	}
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Deployment_AvailableUpgrade))
}

// GetDefault returns a default value of the field type
func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		return ""
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		return ""
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		return ""
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
	}
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) ClearValue(item *Deployment_AvailableUpgrade) {
	if item != nil {
		switch fp.selector {
		case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
			item.ApiVersion = ""
		case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
			item.DbDataVersion = ""
		case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
			item.DbLocationTag = ""
		case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
			item.TotalShardsCount = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
		}
	}
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Deployment_AvailableUpgrade))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeploymentAvailableUpgrade_FieldPathSelectorApiVersion ||
		fp.selector == DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion ||
		fp.selector == DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag ||
		fp.selector == DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) WithIValue(value interface{}) DeploymentAvailableUpgrade_FieldPathValue {
	switch fp.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		return &DeploymentAvailableUpgrade_FieldTerminalPathValue{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		return &DeploymentAvailableUpgrade_FieldTerminalPathValue{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		return &DeploymentAvailableUpgrade_FieldTerminalPathValue{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		return &DeploymentAvailableUpgrade_FieldTerminalPathValue{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
	}
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeploymentAvailableUpgrade_FieldPathArrayOfValues {
	fpaov := &DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues{DeploymentAvailableUpgrade_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		return &DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		return &DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		return &DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		return &DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues{DeploymentAvailableUpgrade_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeploymentAvailableUpgrade_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fp.selector))
	}
}

func (fp *DeploymentAvailableUpgrade_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeploymentAvailableUpgrade_FieldPathValue allows storing values for AvailableUpgrade fields according to their type
type DeploymentAvailableUpgrade_FieldPathValue interface {
	DeploymentAvailableUpgrade_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Deployment_AvailableUpgrade)
	CompareWith(*Deployment_AvailableUpgrade) (cmp int, comparable bool)
}

func ParseDeploymentAvailableUpgrade_FieldPathValue(pathStr, valueStr string) (DeploymentAvailableUpgrade_FieldPathValue, error) {
	fp, err := ParseDeploymentAvailableUpgrade_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AvailableUpgrade field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeploymentAvailableUpgrade_FieldPathValue), nil
}

func MustParseDeploymentAvailableUpgrade_FieldPathValue(pathStr, valueStr string) DeploymentAvailableUpgrade_FieldPathValue {
	fpv, err := ParseDeploymentAvailableUpgrade_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeploymentAvailableUpgrade_FieldTerminalPathValue struct {
	DeploymentAvailableUpgrade_FieldTerminalPath
	value interface{}
}

var _ DeploymentAvailableUpgrade_FieldPathValue = (*DeploymentAvailableUpgrade_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AvailableUpgrade' as interface{}
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) AsApiVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) AsDbDataVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) AsDbLocationTagValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) AsTotalShardsCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object AvailableUpgrade
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) SetTo(target **Deployment_AvailableUpgrade) {
	if *target == nil {
		*target = new(Deployment_AvailableUpgrade)
	}
	switch fpv.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		(*target).ApiVersion = fpv.value.(string)
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		(*target).DbDataVersion = fpv.value.(string)
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		(*target).DbLocationTag = fpv.value.(string)
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		(*target).TotalShardsCount = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fpv.selector))
	}
}

func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Deployment_AvailableUpgrade)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeploymentAvailableUpgrade_FieldTerminalPathValue' with the value under path in 'Deployment_AvailableUpgrade'.
func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) CompareWith(source *Deployment_AvailableUpgrade) (int, bool) {
	switch fpv.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetApiVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetDbDataVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		leftValue := fpv.value.(string)
		rightValue := source.GetDbLocationTag()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetTotalShardsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_AvailableUpgrade: %d", fpv.selector))
	}
}

func (fpv *DeploymentAvailableUpgrade_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Deployment_AvailableUpgrade))
}

// DeploymentAvailableUpgrade_FieldPathArrayItemValue allows storing single item in Path-specific values for AvailableUpgrade according to their type
// Present only for array (repeated) types.
type DeploymentAvailableUpgrade_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeploymentAvailableUpgrade_FieldPath
	ContainsValue(*Deployment_AvailableUpgrade) bool
}

// ParseDeploymentAvailableUpgrade_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeploymentAvailableUpgrade_FieldPathArrayItemValue(pathStr, valueStr string) (DeploymentAvailableUpgrade_FieldPathArrayItemValue, error) {
	fp, err := ParseDeploymentAvailableUpgrade_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AvailableUpgrade field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeploymentAvailableUpgrade_FieldPathArrayItemValue), nil
}

func MustParseDeploymentAvailableUpgrade_FieldPathArrayItemValue(pathStr, valueStr string) DeploymentAvailableUpgrade_FieldPathArrayItemValue {
	fpaiv, err := ParseDeploymentAvailableUpgrade_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeploymentAvailableUpgrade_FieldTerminalPathArrayItemValue struct {
	DeploymentAvailableUpgrade_FieldTerminalPath
	value interface{}
}

var _ DeploymentAvailableUpgrade_FieldPathArrayItemValue = (*DeploymentAvailableUpgrade_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Deployment_AvailableUpgrade as interface{}
func (fpaiv *DeploymentAvailableUpgrade_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeploymentAvailableUpgrade_FieldTerminalPathArrayItemValue) GetSingle(source *Deployment_AvailableUpgrade) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeploymentAvailableUpgrade_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Deployment_AvailableUpgrade))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AvailableUpgrade'
func (fpaiv *DeploymentAvailableUpgrade_FieldTerminalPathArrayItemValue) ContainsValue(source *Deployment_AvailableUpgrade) bool {
	slice := fpaiv.DeploymentAvailableUpgrade_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeploymentAvailableUpgrade_FieldPathArrayOfValues allows storing slice of values for AvailableUpgrade fields according to their type
type DeploymentAvailableUpgrade_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeploymentAvailableUpgrade_FieldPath
}

func ParseDeploymentAvailableUpgrade_FieldPathArrayOfValues(pathStr, valuesStr string) (DeploymentAvailableUpgrade_FieldPathArrayOfValues, error) {
	fp, err := ParseDeploymentAvailableUpgrade_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AvailableUpgrade field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeploymentAvailableUpgrade_FieldPathArrayOfValues), nil
}

func MustParseDeploymentAvailableUpgrade_FieldPathArrayOfValues(pathStr, valuesStr string) DeploymentAvailableUpgrade_FieldPathArrayOfValues {
	fpaov, err := ParseDeploymentAvailableUpgrade_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues struct {
	DeploymentAvailableUpgrade_FieldTerminalPath
	values interface{}
}

var _ DeploymentAvailableUpgrade_FieldPathArrayOfValues = (*DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeploymentAvailableUpgrade_FieldPathSelectorApiVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbDataVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentAvailableUpgrade_FieldPathSelectorDbLocationTag:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentAvailableUpgrade_FieldPathSelectorTotalShardsCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues) AsApiVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues) AsDbDataVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues) AsDbLocationTagArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentAvailableUpgrade_FieldTerminalPathArrayOfValues) AsTotalShardsCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeploymentDbUpdateTaskStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeploymentDbUpdateTaskStatus_FieldPathSelector
	Get(source *Deployment_DbUpdateTaskStatus) []interface{}
	GetSingle(source *Deployment_DbUpdateTaskStatus) (interface{}, bool)
	ClearValue(item *Deployment_DbUpdateTaskStatus)

	// Those methods build corresponding DeploymentDbUpdateTaskStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeploymentDbUpdateTaskStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue
}

type DeploymentDbUpdateTaskStatus_FieldPathSelector int32

const (
	DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag       DeploymentDbUpdateTaskStatus_FieldPathSelector = 0
	DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount   DeploymentDbUpdateTaskStatus_FieldPathSelector = 1
	DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards   DeploymentDbUpdateTaskStatus_FieldPathSelector = 2
	DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion DeploymentDbUpdateTaskStatus_FieldPathSelector = 3
	DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar   DeploymentDbUpdateTaskStatus_FieldPathSelector = 4
)

func (s DeploymentDbUpdateTaskStatus_FieldPathSelector) String() string {
	switch s {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		return "task_tag"
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		return "shards_count"
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		return "ready_shards"
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		return "target_version"
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		return "progress_bar"
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", s))
	}
}

func BuildDeploymentDbUpdateTaskStatus_FieldPath(fp gotenobject.RawFieldPath) (DeploymentDbUpdateTaskStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Deployment_DbUpdateTaskStatus")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "task_tag", "taskTag", "task-tag":
			return &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag}, nil
		case "shards_count", "shardsCount", "shards-count":
			return &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount}, nil
		case "ready_shards", "readyShards", "ready-shards":
			return &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards}, nil
		case "target_version", "targetVersion", "target-version":
			return &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion}, nil
		case "progress_bar", "progressBar", "progress-bar":
			return &DeploymentDbUpdateTaskStatus_FieldTerminalPath{selector: DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Deployment_DbUpdateTaskStatus", fp)
}

func ParseDeploymentDbUpdateTaskStatus_FieldPath(rawField string) (DeploymentDbUpdateTaskStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeploymentDbUpdateTaskStatus_FieldPath(fp)
}

func MustParseDeploymentDbUpdateTaskStatus_FieldPath(rawField string) DeploymentDbUpdateTaskStatus_FieldPath {
	fp, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeploymentDbUpdateTaskStatus_FieldTerminalPath struct {
	selector DeploymentDbUpdateTaskStatus_FieldPathSelector
}

var _ DeploymentDbUpdateTaskStatus_FieldPath = (*DeploymentDbUpdateTaskStatus_FieldTerminalPath)(nil)

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) Selector() DeploymentDbUpdateTaskStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Deployment_DbUpdateTaskStatus
func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) Get(source *Deployment_DbUpdateTaskStatus) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
			values = append(values, source.TaskTag)
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
			values = append(values, source.ShardsCount)
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
			for _, value := range source.GetReadyShards() {
				values = append(values, value)
			}
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
			values = append(values, source.TargetVersion)
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
			for _, value := range source.GetProgressBar() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
		}
	}
	return
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Deployment_DbUpdateTaskStatus))
}

// GetSingle returns value pointed by specific field of from source Deployment_DbUpdateTaskStatus
func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) GetSingle(source *Deployment_DbUpdateTaskStatus) (interface{}, bool) {
	switch fp.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		return source.GetTaskTag(), source != nil
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		return source.GetShardsCount(), source != nil
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		res := source.GetReadyShards()
		return res, res != nil
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		return source.GetTargetVersion(), source != nil
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		res := source.GetProgressBar()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
	}
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Deployment_DbUpdateTaskStatus))
}

// GetDefault returns a default value of the field type
func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		return ""
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		return int64(0)
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		return ([]int64)(nil)
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		return ""
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		return ([]*structpb.Struct)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
	}
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) ClearValue(item *Deployment_DbUpdateTaskStatus) {
	if item != nil {
		switch fp.selector {
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
			item.TaskTag = ""
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
			item.ShardsCount = int64(0)
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
			item.ReadyShards = nil
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
			item.TargetVersion = ""
		case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
			item.ProgressBar = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
		}
	}
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Deployment_DbUpdateTaskStatus))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag ||
		fp.selector == DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount ||
		fp.selector == DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards ||
		fp.selector == DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion ||
		fp.selector == DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) WithIValue(value interface{}) DeploymentDbUpdateTaskStatus_FieldPathValue {
	switch fp.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.(int64)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.([]int64)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.(string)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.([]*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
	}
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues {
	fpaov := &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, values: values.([]int64)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, values: values.([][]int64)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, values: values.([][]*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue {
	switch fp.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.(int64)}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		return &DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue{DeploymentDbUpdateTaskStatus_FieldTerminalPath: *fp, value: value.(*structpb.Struct)}
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fp.selector))
	}
}

func (fp *DeploymentDbUpdateTaskStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeploymentDbUpdateTaskStatus_FieldPathValue allows storing values for DbUpdateTaskStatus fields according to their type
type DeploymentDbUpdateTaskStatus_FieldPathValue interface {
	DeploymentDbUpdateTaskStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Deployment_DbUpdateTaskStatus)
	CompareWith(*Deployment_DbUpdateTaskStatus) (cmp int, comparable bool)
}

func ParseDeploymentDbUpdateTaskStatus_FieldPathValue(pathStr, valueStr string) (DeploymentDbUpdateTaskStatus_FieldPathValue, error) {
	fp, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DbUpdateTaskStatus field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeploymentDbUpdateTaskStatus_FieldPathValue), nil
}

func MustParseDeploymentDbUpdateTaskStatus_FieldPathValue(pathStr, valueStr string) DeploymentDbUpdateTaskStatus_FieldPathValue {
	fpv, err := ParseDeploymentDbUpdateTaskStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeploymentDbUpdateTaskStatus_FieldTerminalPathValue struct {
	DeploymentDbUpdateTaskStatus_FieldTerminalPath
	value interface{}
}

var _ DeploymentDbUpdateTaskStatus_FieldPathValue = (*DeploymentDbUpdateTaskStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DbUpdateTaskStatus' as interface{}
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) AsTaskTagValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) AsShardsCountValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) AsReadyShardsValue() ([]int64, bool) {
	res, ok := fpv.value.([]int64)
	return res, ok
}
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) AsTargetVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) AsProgressBarValue() ([]*structpb.Struct, bool) {
	res, ok := fpv.value.([]*structpb.Struct)
	return res, ok
}

// SetTo stores value for selected field for object DbUpdateTaskStatus
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) SetTo(target **Deployment_DbUpdateTaskStatus) {
	if *target == nil {
		*target = new(Deployment_DbUpdateTaskStatus)
	}
	switch fpv.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		(*target).TaskTag = fpv.value.(string)
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		(*target).ShardsCount = fpv.value.(int64)
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		(*target).ReadyShards = fpv.value.([]int64)
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		(*target).TargetVersion = fpv.value.(string)
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		(*target).ProgressBar = fpv.value.([]*structpb.Struct)
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fpv.selector))
	}
}

func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Deployment_DbUpdateTaskStatus)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeploymentDbUpdateTaskStatus_FieldTerminalPathValue' with the value under path in 'Deployment_DbUpdateTaskStatus'.
func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) CompareWith(source *Deployment_DbUpdateTaskStatus) (int, bool) {
	switch fpv.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		leftValue := fpv.value.(string)
		rightValue := source.GetTaskTag()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		leftValue := fpv.value.(int64)
		rightValue := source.GetShardsCount()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		return 0, false
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetTargetVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Deployment_DbUpdateTaskStatus: %d", fpv.selector))
	}
}

func (fpv *DeploymentDbUpdateTaskStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Deployment_DbUpdateTaskStatus))
}

// DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for DbUpdateTaskStatus according to their type
// Present only for array (repeated) types.
type DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeploymentDbUpdateTaskStatus_FieldPath
	ContainsValue(*Deployment_DbUpdateTaskStatus) bool
}

// ParseDeploymentDbUpdateTaskStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeploymentDbUpdateTaskStatus_FieldPathArrayItemValue(pathStr, valueStr string) (DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DbUpdateTaskStatus field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue), nil
}

func MustParseDeploymentDbUpdateTaskStatus_FieldPathArrayItemValue(pathStr, valueStr string) DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseDeploymentDbUpdateTaskStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue struct {
	DeploymentDbUpdateTaskStatus_FieldTerminalPath
	value interface{}
}

var _ DeploymentDbUpdateTaskStatus_FieldPathArrayItemValue = (*DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Deployment_DbUpdateTaskStatus as interface{}
func (fpaiv *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue) AsReadyShardsItemValue() (int64, bool) {
	res, ok := fpaiv.value.(int64)
	return res, ok
}
func (fpaiv *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue) AsProgressBarItemValue() (*structpb.Struct, bool) {
	res, ok := fpaiv.value.(*structpb.Struct)
	return res, ok
}

func (fpaiv *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue) GetSingle(source *Deployment_DbUpdateTaskStatus) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Deployment_DbUpdateTaskStatus))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DbUpdateTaskStatus'
func (fpaiv *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *Deployment_DbUpdateTaskStatus) bool {
	slice := fpaiv.DeploymentDbUpdateTaskStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues allows storing slice of values for DbUpdateTaskStatus fields according to their type
type DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeploymentDbUpdateTaskStatus_FieldPath
}

func ParseDeploymentDbUpdateTaskStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseDeploymentDbUpdateTaskStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DbUpdateTaskStatus field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues), nil
}

func MustParseDeploymentDbUpdateTaskStatus_FieldPathArrayOfValues(pathStr, valuesStr string) DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues {
	fpaov, err := ParseDeploymentDbUpdateTaskStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues struct {
	DeploymentDbUpdateTaskStatus_FieldTerminalPath
	values interface{}
}

var _ DeploymentDbUpdateTaskStatus_FieldPathArrayOfValues = (*DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTaskTag:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorShardsCount:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorReadyShards:
		for _, v := range fpaov.values.([][]int64) {
			values = append(values, v)
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorTargetVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case DeploymentDbUpdateTaskStatus_FieldPathSelectorProgressBar:
		for _, v := range fpaov.values.([][]*structpb.Struct) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues) AsTaskTagArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues) AsShardsCountArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues) AsReadyShardsArrayOfValues() ([][]int64, bool) {
	res, ok := fpaov.values.([][]int64)
	return res, ok
}
func (fpaov *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues) AsTargetVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *DeploymentDbUpdateTaskStatus_FieldTerminalPathArrayOfValues) AsProgressBarArrayOfValues() ([][]*structpb.Struct, bool) {
	res, ok := fpaov.values.([][]*structpb.Struct)
	return res, ok
}
