// Code generated by protoc-gen-goten-object
// File: goten/meta-service/proto/v1/common.proto
// DO NOT EDIT!!!

package common

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	googlefieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import ()

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = googlefieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var ()

func (o *LabelledDomain) GotenObjectExt() {}

func (o *LabelledDomain) MakeFullFieldMask() *LabelledDomain_FieldMask {
	return FullLabelledDomain_FieldMask()
}

func (o *LabelledDomain) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullLabelledDomain_FieldMask()
}

func (o *LabelledDomain) MakeDiffFieldMask(other *LabelledDomain) *LabelledDomain_FieldMask {
	if o == nil && other == nil {
		return &LabelledDomain_FieldMask{}
	}
	if o == nil || other == nil {
		return FullLabelledDomain_FieldMask()
	}

	res := &LabelledDomain_FieldMask{}
	if o.GetLabel() != other.GetLabel() {
		res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorLabel})
	}
	if o.GetDomain() != other.GetDomain() {
		res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorDomain})
	}

	if len(o.GetAvailableMixins()) == len(other.GetAvailableMixins()) {
		for i, lValue := range o.GetAvailableMixins() {
			rValue := other.GetAvailableMixins()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorAvailableMixins})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorAvailableMixins})
	}
	if o.GetWebGrpcAvailable() != other.GetWebGrpcAvailable() {
		res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorWebGrpcAvailable})
	}
	if o.GetRestApiAvailable() != other.GetRestApiAvailable() {
		res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorRestApiAvailable})
	}
	if o.GetIsPrivate() != other.GetIsPrivate() {
		res.Paths = append(res.Paths, &LabelledDomain_FieldTerminalPath{selector: LabelledDomain_FieldPathSelectorIsPrivate})
	}
	return res
}

func (o *LabelledDomain) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*LabelledDomain))
}

func (o *LabelledDomain) Clone() *LabelledDomain {
	if o == nil {
		return nil
	}
	result := &LabelledDomain{}
	result.Label = o.Label
	result.Domain = o.Domain
	result.AvailableMixins = make([]string, len(o.AvailableMixins))
	for i, sourceValue := range o.AvailableMixins {
		result.AvailableMixins[i] = sourceValue
	}
	result.WebGrpcAvailable = o.WebGrpcAvailable
	result.RestApiAvailable = o.RestApiAvailable
	result.IsPrivate = o.IsPrivate
	return result
}

func (o *LabelledDomain) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *LabelledDomain) Merge(source *LabelledDomain) {
	o.Label = source.GetLabel()
	o.Domain = source.GetDomain()
	for _, sourceValue := range source.GetAvailableMixins() {
		exists := false
		for _, currentValue := range o.AvailableMixins {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.AvailableMixins = append(o.AvailableMixins, newDstElement)
		}
	}

	o.WebGrpcAvailable = source.GetWebGrpcAvailable()
	o.RestApiAvailable = source.GetRestApiAvailable()
	o.IsPrivate = source.GetIsPrivate()
}

func (o *LabelledDomain) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*LabelledDomain))
}
