// Code generated by protoc-gen-goten-validate
// File: goten/meta-service/proto/v1/resource.proto
// DO NOT EDIT!!!

package resource

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	service "github.com/cloudwan/goten-sdk/meta-service/resources/v1/service"
	meta "github.com/cloudwan/goten-sdk/types/meta"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError

	validation_regex_Resource_plural_name_b99bfb8e949ab346f2bb6f65460fa43e = regexp.MustCompile("^[A-Z][a-zA-Z]{1,132}$")
)

// make sure we're using proto imports
var (
	_ = &service.Service{}
	_ = &meta.Meta{}
)

func (obj *Resource) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Resource", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	if !validation_regex_Resource_plural_name_b99bfb8e949ab346f2bb6f65460fa43e.Match([]byte(obj.PluralName)) {
		return gotenvalidate.NewValidationError("Resource", "pluralName", obj.PluralName, "field must match the regex ^[A-Z][a-zA-Z]{1,132}$", nil)
	}
	if obj.PluralName == "" {
		return gotenvalidate.NewValidationError("Resource", "pluralName", obj.PluralName, "field is required", nil)
	}
	if len(obj.Versions) < 1 {
		return gotenvalidate.NewValidationError("Resource", "versions", obj.Versions, "field must have at least 1 items", nil)
	}
	if len(obj.Versions) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.Versions {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("Resource", "versions", obj.Versions, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	for _, el := range obj.Versions {

		if len(el) > 64 {
			return gotenvalidate.NewValidationError("Resource", "versions", el, "field must contain at most 64 characters", nil)
		}
	}
	for idx, elem := range obj.VersionedInfos {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Resource", "versionedInfos", obj.VersionedInfos[idx], "nested object validation failed", err)
			}
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Resource_VersionedInfo) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.Version) > 64 {
		return gotenvalidate.NewValidationError("VersionedInfo", "version", obj.Version, "field must contain at most 64 characters", nil)
	}
	if obj.Version == "" {
		return gotenvalidate.NewValidationError("VersionedInfo", "version", obj.Version, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
