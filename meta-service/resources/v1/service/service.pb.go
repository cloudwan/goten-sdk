// Code generated by protoc-gen-goten-go
// File: goten/meta-service/proto/v1/service.proto
// DO NOT EDIT!!!

package service

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Service Resource contains service description like domain under which it can
// be accessed, versions, imported services and their versions.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of Service
	// When creating a new instance, this field is optional and if not provided,
	// it will be generated automatically. Last ID segment must conform to the
	// following regex: [a-z][a-z0-9\\-.]{0,28}[a-z0-9]
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Metadata is an object with information like create, update and delete time
	// (for async deleted resources), has user labels/annotations, sharding
	// information, multi-region syncing information and may have non-schema
	// owners (useful for taking ownership of resources belonging to lower level
	// services by higher ones).
	Metadata *meta.Meta `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	// Multi region policy defines in which region all kid resources (and their
	// kids) will by default belong and cross-region syncing policies.
	MultiRegionPolicy *multi_region_policy.MultiRegionPolicy `protobuf:"bytes,3,opt,name=multi_region_policy,json=multiRegionPolicy,proto3" json:"multi_region_policy,omitempty" firestore:"multiRegionPolicy"`
	// Service display name - it is lowerCamelCase of service name, but not
	// domain. It is taken from api-skeleton file, under "service.name" path.
	DisplayName string `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	// All supported versions.
	// This list will be sorted if created by meta service provided by Goten.
	// The newest version is first, the oldest last.
	AllVersions []string `protobuf:"bytes,5,rep,name=all_versions,json=allVersions,proto3" json:"all_versions,omitempty" firestore:"allVersions"`
	// Globally available domain for this service. Requests to it should
	// direct to most suitable (usually the nearest/healthy/most performant)
	// region.
	GlobalDomain string `protobuf:"bytes,6,opt,name=global_domain,json=globalDomain,proto3" json:"global_domain,omitempty" firestore:"globalDomain"`
	// All imported on schema-level services. This list declares that resources in
	// those services can be referenced by this service.
	ImportedServices []*Reference `protobuf:"bytes,7,rep,customtype=Reference,name=imported_services,json=importedServices,proto3" json:"imported_services,omitempty" firestore:"importedServices"`
	// All used services. Unlike imported, they are not imported on schema level.
	// Its just a declaration that given service may access other services, but
	// does not try to establish any references.
	UsedServices []*Reference `protobuf:"bytes,8,rep,customtype=Reference,name=used_services,json=usedServices,proto3" json:"used_services,omitempty" firestore:"usedServices"`
	// Information containing which imported service version is used by current
	// service version. This does not include any used services.
	ImportedVersions []*Service_ImportedVersions `protobuf:"bytes,9,rep,name=imported_versions,json=importedVersions,proto3" json:"imported_versions,omitempty" firestore:"importedVersions"`
	// Generation number used by EnvRegistry config to generate this resource.
	EnvRegistryGeneration int32 `protobuf:"varint,10,opt,name=env_registry_generation,json=envRegistryGeneration,proto3" json:"env_registry_generation,omitempty" firestore:"envRegistryGeneration"`
	// If true, then switch to the new version will be automatic (if there is
	// newer), once db upgrade finishes. Otherwise it will require manual call
	// from operator.
	AutomaticVersionSwitch bool `protobuf:"varint,11,opt,name=automatic_version_switch,json=automaticVersionSwitch,proto3" json:"automatic_version_switch,omitempty" firestore:"automaticVersionSwitch"`
}

func (m *Service) Reset() {
	*m = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Service) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Service) ProtoMessage() {}

func (m *Service) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Service) GotenMessage() {}

// Deprecated, Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_service_proto_rawDescGZIP(), []int{0}
}

func (m *Service) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Service) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Service) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Service) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Service) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *Service) GetMetadata() *meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Service) GetMultiRegionPolicy() *multi_region_policy.MultiRegionPolicy {
	if m != nil {
		return m.MultiRegionPolicy
	}
	return nil
}

func (m *Service) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Service) GetAllVersions() []string {
	if m != nil {
		return m.AllVersions
	}
	return nil
}

func (m *Service) GetGlobalDomain() string {
	if m != nil {
		return m.GlobalDomain
	}
	return ""
}

func (m *Service) GetImportedServices() []*Reference {
	if m != nil {
		return m.ImportedServices
	}
	return nil
}

func (m *Service) GetUsedServices() []*Reference {
	if m != nil {
		return m.UsedServices
	}
	return nil
}

func (m *Service) GetImportedVersions() []*Service_ImportedVersions {
	if m != nil {
		return m.ImportedVersions
	}
	return nil
}

func (m *Service) GetEnvRegistryGeneration() int32 {
	if m != nil {
		return m.EnvRegistryGeneration
	}
	return int32(0)
}

func (m *Service) GetAutomaticVersionSwitch() bool {
	if m != nil {
		return m.AutomaticVersionSwitch
	}
	return false
}

func (m *Service) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "Service"))
	}
	m.Name = fv
}

func (m *Service) SetMetadata(fv *meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "Service"))
	}
	m.Metadata = fv
}

func (m *Service) SetMultiRegionPolicy(fv *multi_region_policy.MultiRegionPolicy) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MultiRegionPolicy", "Service"))
	}
	m.MultiRegionPolicy = fv
}

func (m *Service) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "Service"))
	}
	m.DisplayName = fv
}

func (m *Service) SetAllVersions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllVersions", "Service"))
	}
	m.AllVersions = fv
}

func (m *Service) SetGlobalDomain(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "GlobalDomain", "Service"))
	}
	m.GlobalDomain = fv
}

func (m *Service) SetImportedServices(fv []*Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ImportedServices", "Service"))
	}
	m.ImportedServices = fv
}

func (m *Service) SetUsedServices(fv []*Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UsedServices", "Service"))
	}
	m.UsedServices = fv
}

func (m *Service) SetImportedVersions(fv []*Service_ImportedVersions) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ImportedVersions", "Service"))
	}
	m.ImportedVersions = fv
}

func (m *Service) SetEnvRegistryGeneration(fv int32) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnvRegistryGeneration", "Service"))
	}
	m.EnvRegistryGeneration = fv
}

func (m *Service) SetAutomaticVersionSwitch(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AutomaticVersionSwitch", "Service"))
	}
	m.AutomaticVersionSwitch = fv
}

// ImportedVersions contains information which version of the imported service
// is used by current service in specific version.
type Service_ImportedVersions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Imported service reference
	TargetService *Reference `protobuf:"bytes,1,opt,customtype=Reference,name=target_service,json=targetService,proto3" json:"target_service,omitempty" firestore:"targetService"`
	// Version of the imported service
	TargetServiceVersion string `protobuf:"bytes,2,opt,name=target_service_version,json=targetServiceVersion,proto3" json:"target_service_version,omitempty" firestore:"targetServiceVersion"`
	// Version of the current service that imports target service in its
	// version.
	CurrentServiceVersion string `protobuf:"bytes,3,opt,name=current_service_version,json=currentServiceVersion,proto3" json:"current_service_version,omitempty" firestore:"currentServiceVersion"`
}

func (m *Service_ImportedVersions) Reset() {
	*m = Service_ImportedVersions{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_meta_service_proto_v1_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Service_ImportedVersions) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Service_ImportedVersions) ProtoMessage() {}

func (m *Service_ImportedVersions) ProtoReflect() preflect.Message {
	mi := &goten_meta_service_proto_v1_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Service_ImportedVersions) GotenMessage() {}

// Deprecated, Use Service_ImportedVersions.ProtoReflect.Descriptor instead.
func (*Service_ImportedVersions) Descriptor() ([]byte, []int) {
	return goten_meta_service_proto_v1_service_proto_rawDescGZIP(), []int{0, 0}
}

func (m *Service_ImportedVersions) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Service_ImportedVersions) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Service_ImportedVersions) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Service_ImportedVersions) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Service_ImportedVersions) GetTargetService() *Reference {
	if m != nil {
		return m.TargetService
	}
	return nil
}

func (m *Service_ImportedVersions) GetTargetServiceVersion() string {
	if m != nil {
		return m.TargetServiceVersion
	}
	return ""
}

func (m *Service_ImportedVersions) GetCurrentServiceVersion() string {
	if m != nil {
		return m.CurrentServiceVersion
	}
	return ""
}

func (m *Service_ImportedVersions) SetTargetService(fv *Reference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetService", "Service_ImportedVersions"))
	}
	m.TargetService = fv
}

func (m *Service_ImportedVersions) SetTargetServiceVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetServiceVersion", "Service_ImportedVersions"))
	}
	m.TargetServiceVersion = fv
}

func (m *Service_ImportedVersions) SetCurrentServiceVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CurrentServiceVersion", "Service_ImportedVersions"))
	}
	m.CurrentServiceVersion = fv
}

var goten_meta_service_proto_v1_service_proto preflect.FileDescriptor

var goten_meta_service_proto_v1_service_proto_rawDesc = []byte{
	0x0a, 0x29, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x07,
	0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xb2, 0xda, 0x21, 0x0b, 0x0a, 0x09, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x58, 0x0a,
	0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xca, 0xc6, 0x27, 0x04,
	0x62, 0x02, 0x08, 0x01, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2f, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xc6, 0x27, 0x08, 0x2a, 0x06, 0x22, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14,
	0xca, 0xc6, 0x27, 0x10, 0x42, 0x0e, 0x0a, 0x02, 0x08, 0x01, 0x18, 0x01, 0x22, 0x06, 0x2a, 0x04,
	0x3a, 0x02, 0x08, 0x40, 0x52, 0x0b, 0x61, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x36, 0x0a, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xca, 0xc6, 0x27, 0x0d, 0x2a, 0x0b,
	0x22, 0x03, 0x08, 0xff, 0x01, 0x52, 0x02, 0x60, 0x01, 0x68, 0x01, 0x52, 0x0c, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x11, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x10, 0x01, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x54, 0x0a, 0x11, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x76, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x65, 0x6e, 0x76, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x1a, 0xd6, 0x01, 0x0a, 0x10, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38,
	0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xb2, 0xda, 0x21, 0x0d, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x06, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x16, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca, 0xc6, 0x27, 0x08, 0x2a, 0x06,
	0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x17,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xca,
	0xc6, 0x27, 0x08, 0x2a, 0x06, 0x3a, 0x02, 0x08, 0x40, 0x68, 0x01, 0x52, 0x15, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x75, 0xea, 0x41, 0x2c, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2a, 0x1e, 0x5b, 0x61, 0x2d,
	0x7a, 0x5d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5c, 0x2d, 0x2e, 0x5d, 0x7b, 0x30, 0x2c,
	0x32, 0x38, 0x7d, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x58, 0x01, 0xda, 0x94, 0x23,
	0x08, 0x12, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x42,
	0x8b, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x48, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f,
	0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0xa2, 0x80, 0xd1, 0x02, 0x4a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	goten_meta_service_proto_v1_service_proto_rawDescOnce sync.Once
	goten_meta_service_proto_v1_service_proto_rawDescData = goten_meta_service_proto_v1_service_proto_rawDesc
)

func goten_meta_service_proto_v1_service_proto_rawDescGZIP() []byte {
	goten_meta_service_proto_v1_service_proto_rawDescOnce.Do(func() {
		goten_meta_service_proto_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(goten_meta_service_proto_v1_service_proto_rawDescData)
	})
	return goten_meta_service_proto_v1_service_proto_rawDescData
}

var goten_meta_service_proto_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var goten_meta_service_proto_v1_service_proto_goTypes = []interface{}{
	(*Service)(nil),                               // 0: goten.meta.v1.Service
	(*Service_ImportedVersions)(nil),              // 1: goten.meta.v1.Service.ImportedVersions
	(*meta.Meta)(nil),                             // 2: goten.types.Meta
	(*multi_region_policy.MultiRegionPolicy)(nil), // 3: goten.types.MultiRegionPolicy
}
var goten_meta_service_proto_v1_service_proto_depIdxs = []int32{
	2, // 0: goten.meta.v1.Service.metadata:type_name -> goten.types.Meta
	3, // 1: goten.meta.v1.Service.multi_region_policy:type_name -> goten.types.MultiRegionPolicy
	1, // 2: goten.meta.v1.Service.imported_versions:type_name -> goten.meta.v1.Service.ImportedVersions
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { goten_meta_service_proto_v1_service_proto_init() }
func goten_meta_service_proto_v1_service_proto_init() {
	if goten_meta_service_proto_v1_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		goten_meta_service_proto_v1_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_meta_service_proto_v1_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service_ImportedVersions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: goten_meta_service_proto_v1_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           goten_meta_service_proto_v1_service_proto_goTypes,
		DependencyIndexes: goten_meta_service_proto_v1_service_proto_depIdxs,
		MessageInfos:      goten_meta_service_proto_v1_service_proto_msgTypes,
	}.Build()
	goten_meta_service_proto_v1_service_proto = out.File
	goten_meta_service_proto_v1_service_proto_rawDesc = nil
	goten_meta_service_proto_v1_service_proto_goTypes = nil
	goten_meta_service_proto_v1_service_proto_depIdxs = nil
}
