// Code generated by protoc-gen-goten-object
// File: goten/meta-service/proto/v1/service.proto
// DO NOT EDIT!!!

package service

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type Service_FieldPath interface {
	gotenobject.FieldPath
	Selector() Service_FieldPathSelector
	Get(source *Service) []interface{}
	GetSingle(source *Service) (interface{}, bool)
	ClearValue(item *Service)

	// Those methods build corresponding Service_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) Service_FieldPathValue
	WithIArrayOfValues(values interface{}) Service_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) Service_FieldPathArrayItemValue
}

type Service_FieldPathSelector int32

const (
	Service_FieldPathSelectorName                   Service_FieldPathSelector = 0
	Service_FieldPathSelectorMetadata               Service_FieldPathSelector = 1
	Service_FieldPathSelectorMultiRegionPolicy      Service_FieldPathSelector = 2
	Service_FieldPathSelectorDisplayName            Service_FieldPathSelector = 3
	Service_FieldPathSelectorAllVersions            Service_FieldPathSelector = 4
	Service_FieldPathSelectorGlobalDomain           Service_FieldPathSelector = 5
	Service_FieldPathSelectorImportedServices       Service_FieldPathSelector = 6
	Service_FieldPathSelectorUsedServices           Service_FieldPathSelector = 7
	Service_FieldPathSelectorImportedVersions       Service_FieldPathSelector = 8
	Service_FieldPathSelectorEnvRegistryGeneration  Service_FieldPathSelector = 9
	Service_FieldPathSelectorAutomaticVersionSwitch Service_FieldPathSelector = 10
	Service_FieldPathSelectorServicesCtrl           Service_FieldPathSelector = 11
)

func (s Service_FieldPathSelector) String() string {
	switch s {
	case Service_FieldPathSelectorName:
		return "name"
	case Service_FieldPathSelectorMetadata:
		return "metadata"
	case Service_FieldPathSelectorMultiRegionPolicy:
		return "multi_region_policy"
	case Service_FieldPathSelectorDisplayName:
		return "display_name"
	case Service_FieldPathSelectorAllVersions:
		return "all_versions"
	case Service_FieldPathSelectorGlobalDomain:
		return "global_domain"
	case Service_FieldPathSelectorImportedServices:
		return "imported_services"
	case Service_FieldPathSelectorUsedServices:
		return "used_services"
	case Service_FieldPathSelectorImportedVersions:
		return "imported_versions"
	case Service_FieldPathSelectorEnvRegistryGeneration:
		return "env_registry_generation"
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		return "automatic_version_switch"
	case Service_FieldPathSelectorServicesCtrl:
		return "services_ctrl"
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", s))
	}
}

func BuildService_FieldPath(fp gotenobject.RawFieldPath) (Service_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Service")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorName}, nil
		case "metadata":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorMetadata}, nil
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorMultiRegionPolicy}, nil
		case "display_name", "displayName", "display-name":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorDisplayName}, nil
		case "all_versions", "allVersions", "all-versions":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorAllVersions}, nil
		case "global_domain", "globalDomain", "global-domain":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorGlobalDomain}, nil
		case "imported_services", "importedServices", "imported-services":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorImportedServices}, nil
		case "used_services", "usedServices", "used-services":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorUsedServices}, nil
		case "imported_versions", "importedVersions", "imported-versions":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorImportedVersions}, nil
		case "env_registry_generation", "envRegistryGeneration", "env-registry-generation":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorEnvRegistryGeneration}, nil
		case "automatic_version_switch", "automaticVersionSwitch", "automatic-version-switch":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorAutomaticVersionSwitch}, nil
		case "services_ctrl", "servicesCtrl", "services-ctrl":
			return &Service_FieldTerminalPath{selector: Service_FieldPathSelectorServicesCtrl}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Service_FieldSubPath{selector: Service_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "multi_region_policy", "multiRegionPolicy", "multi-region-policy":
			if subpath, err := multi_region_policy.BuildMultiRegionPolicy_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Service_FieldSubPath{selector: Service_FieldPathSelectorMultiRegionPolicy, subPath: subpath}, nil
			}
		case "imported_versions", "importedVersions", "imported-versions":
			if subpath, err := BuildServiceImportedVersions_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Service_FieldSubPath{selector: Service_FieldPathSelectorImportedVersions, subPath: subpath}, nil
			}
		case "services_ctrl", "servicesCtrl", "services-ctrl":
			if subpath, err := BuildServiceAllowedServicesCtrlFlag_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &Service_FieldSubPath{selector: Service_FieldPathSelectorServicesCtrl, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Service", fp)
}

func ParseService_FieldPath(rawField string) (Service_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildService_FieldPath(fp)
}

func MustParseService_FieldPath(rawField string) Service_FieldPath {
	fp, err := ParseService_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type Service_FieldTerminalPath struct {
	selector Service_FieldPathSelector
}

var _ Service_FieldPath = (*Service_FieldTerminalPath)(nil)

func (fp *Service_FieldTerminalPath) Selector() Service_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *Service_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *Service_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Service
func (fp *Service_FieldTerminalPath) Get(source *Service) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case Service_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case Service_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case Service_FieldPathSelectorMultiRegionPolicy:
			if source.MultiRegionPolicy != nil {
				values = append(values, source.MultiRegionPolicy)
			}
		case Service_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case Service_FieldPathSelectorAllVersions:
			for _, value := range source.GetAllVersions() {
				values = append(values, value)
			}
		case Service_FieldPathSelectorGlobalDomain:
			values = append(values, source.GlobalDomain)
		case Service_FieldPathSelectorImportedServices:
			for _, value := range source.GetImportedServices() {
				values = append(values, value)
			}
		case Service_FieldPathSelectorUsedServices:
			for _, value := range source.GetUsedServices() {
				values = append(values, value)
			}
		case Service_FieldPathSelectorImportedVersions:
			for _, value := range source.GetImportedVersions() {
				values = append(values, value)
			}
		case Service_FieldPathSelectorEnvRegistryGeneration:
			values = append(values, source.EnvRegistryGeneration)
		case Service_FieldPathSelectorAutomaticVersionSwitch:
			values = append(values, source.AutomaticVersionSwitch)
		case Service_FieldPathSelectorServicesCtrl:
			if source.ServicesCtrl != nil {
				values = append(values, source.ServicesCtrl)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
		}
	}
	return
}

func (fp *Service_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Service))
}

// GetSingle returns value pointed by specific field of from source Service
func (fp *Service_FieldTerminalPath) GetSingle(source *Service) (interface{}, bool) {
	switch fp.selector {
	case Service_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case Service_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case Service_FieldPathSelectorMultiRegionPolicy:
		res := source.GetMultiRegionPolicy()
		return res, res != nil
	case Service_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case Service_FieldPathSelectorAllVersions:
		res := source.GetAllVersions()
		return res, res != nil
	case Service_FieldPathSelectorGlobalDomain:
		return source.GetGlobalDomain(), source != nil
	case Service_FieldPathSelectorImportedServices:
		res := source.GetImportedServices()
		return res, res != nil
	case Service_FieldPathSelectorUsedServices:
		res := source.GetUsedServices()
		return res, res != nil
	case Service_FieldPathSelectorImportedVersions:
		res := source.GetImportedVersions()
		return res, res != nil
	case Service_FieldPathSelectorEnvRegistryGeneration:
		return source.GetEnvRegistryGeneration(), source != nil
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		return source.GetAutomaticVersionSwitch(), source != nil
	case Service_FieldPathSelectorServicesCtrl:
		res := source.GetServicesCtrl()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
	}
}

func (fp *Service_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Service))
}

// GetDefault returns a default value of the field type
func (fp *Service_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case Service_FieldPathSelectorName:
		return (*Name)(nil)
	case Service_FieldPathSelectorMetadata:
		return (*meta.Meta)(nil)
	case Service_FieldPathSelectorMultiRegionPolicy:
		return (*multi_region_policy.MultiRegionPolicy)(nil)
	case Service_FieldPathSelectorDisplayName:
		return ""
	case Service_FieldPathSelectorAllVersions:
		return ([]string)(nil)
	case Service_FieldPathSelectorGlobalDomain:
		return ""
	case Service_FieldPathSelectorImportedServices:
		return ([]*Reference)(nil)
	case Service_FieldPathSelectorUsedServices:
		return ([]*Reference)(nil)
	case Service_FieldPathSelectorImportedVersions:
		return ([]*Service_ImportedVersions)(nil)
	case Service_FieldPathSelectorEnvRegistryGeneration:
		return int32(0)
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		return false
	case Service_FieldPathSelectorServicesCtrl:
		return (*Service_AllowedServicesCtrlFlag)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
	}
}

func (fp *Service_FieldTerminalPath) ClearValue(item *Service) {
	if item != nil {
		switch fp.selector {
		case Service_FieldPathSelectorName:
			item.Name = nil
		case Service_FieldPathSelectorMetadata:
			item.Metadata = nil
		case Service_FieldPathSelectorMultiRegionPolicy:
			item.MultiRegionPolicy = nil
		case Service_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case Service_FieldPathSelectorAllVersions:
			item.AllVersions = nil
		case Service_FieldPathSelectorGlobalDomain:
			item.GlobalDomain = ""
		case Service_FieldPathSelectorImportedServices:
			item.ImportedServices = nil
		case Service_FieldPathSelectorUsedServices:
			item.UsedServices = nil
		case Service_FieldPathSelectorImportedVersions:
			item.ImportedVersions = nil
		case Service_FieldPathSelectorEnvRegistryGeneration:
			item.EnvRegistryGeneration = int32(0)
		case Service_FieldPathSelectorAutomaticVersionSwitch:
			item.AutomaticVersionSwitch = false
		case Service_FieldPathSelectorServicesCtrl:
			item.ServicesCtrl = nil
		default:
			panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
		}
	}
}

func (fp *Service_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Service))
}

// IsLeaf - whether field path is holds simple value
func (fp *Service_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == Service_FieldPathSelectorName ||
		fp.selector == Service_FieldPathSelectorDisplayName ||
		fp.selector == Service_FieldPathSelectorAllVersions ||
		fp.selector == Service_FieldPathSelectorGlobalDomain ||
		fp.selector == Service_FieldPathSelectorImportedServices ||
		fp.selector == Service_FieldPathSelectorUsedServices ||
		fp.selector == Service_FieldPathSelectorEnvRegistryGeneration ||
		fp.selector == Service_FieldPathSelectorAutomaticVersionSwitch
}

func (fp *Service_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *Service_FieldTerminalPath) WithIValue(value interface{}) Service_FieldPathValue {
	switch fp.selector {
	case Service_FieldPathSelectorName:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(*Name)}
	case Service_FieldPathSelectorMetadata:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(*meta.Meta)}
	case Service_FieldPathSelectorMultiRegionPolicy:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(*multi_region_policy.MultiRegionPolicy)}
	case Service_FieldPathSelectorDisplayName:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(string)}
	case Service_FieldPathSelectorAllVersions:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.([]string)}
	case Service_FieldPathSelectorGlobalDomain:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(string)}
	case Service_FieldPathSelectorImportedServices:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.([]*Reference)}
	case Service_FieldPathSelectorUsedServices:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.([]*Reference)}
	case Service_FieldPathSelectorImportedVersions:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.([]*Service_ImportedVersions)}
	case Service_FieldPathSelectorEnvRegistryGeneration:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(int32)}
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(bool)}
	case Service_FieldPathSelectorServicesCtrl:
		return &Service_FieldTerminalPathValue{Service_FieldTerminalPath: *fp, value: value.(*Service_AllowedServicesCtrlFlag)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
	}
}

func (fp *Service_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *Service_FieldTerminalPath) WithIArrayOfValues(values interface{}) Service_FieldPathArrayOfValues {
	fpaov := &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp}
	switch fp.selector {
	case Service_FieldPathSelectorName:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]*Name)}
	case Service_FieldPathSelectorMetadata:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]*meta.Meta)}
	case Service_FieldPathSelectorMultiRegionPolicy:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]*multi_region_policy.MultiRegionPolicy)}
	case Service_FieldPathSelectorDisplayName:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]string)}
	case Service_FieldPathSelectorAllVersions:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([][]string)}
	case Service_FieldPathSelectorGlobalDomain:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]string)}
	case Service_FieldPathSelectorImportedServices:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([][]*Reference)}
	case Service_FieldPathSelectorUsedServices:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([][]*Reference)}
	case Service_FieldPathSelectorImportedVersions:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([][]*Service_ImportedVersions)}
	case Service_FieldPathSelectorEnvRegistryGeneration:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]int32)}
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]bool)}
	case Service_FieldPathSelectorServicesCtrl:
		return &Service_FieldTerminalPathArrayOfValues{Service_FieldTerminalPath: *fp, values: values.([]*Service_AllowedServicesCtrlFlag)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
	}
	return fpaov
}

func (fp *Service_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *Service_FieldTerminalPath) WithIArrayItemValue(value interface{}) Service_FieldPathArrayItemValue {
	switch fp.selector {
	case Service_FieldPathSelectorAllVersions:
		return &Service_FieldTerminalPathArrayItemValue{Service_FieldTerminalPath: *fp, value: value.(string)}
	case Service_FieldPathSelectorImportedServices:
		return &Service_FieldTerminalPathArrayItemValue{Service_FieldTerminalPath: *fp, value: value.(*Reference)}
	case Service_FieldPathSelectorUsedServices:
		return &Service_FieldTerminalPathArrayItemValue{Service_FieldTerminalPath: *fp, value: value.(*Reference)}
	case Service_FieldPathSelectorImportedVersions:
		return &Service_FieldTerminalPathArrayItemValue{Service_FieldTerminalPath: *fp, value: value.(*Service_ImportedVersions)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fp.selector))
	}
}

func (fp *Service_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type Service_FieldSubPath struct {
	selector Service_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ Service_FieldPath = (*Service_FieldSubPath)(nil)

func (fps *Service_FieldSubPath) Selector() Service_FieldPathSelector {
	return fps.selector
}
func (fps *Service_FieldSubPath) AsMetadataSubPath() (meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(meta.Meta_FieldPath)
	return res, ok
}
func (fps *Service_FieldSubPath) AsMultiRegionPolicySubPath() (multi_region_policy.MultiRegionPolicy_FieldPath, bool) {
	res, ok := fps.subPath.(multi_region_policy.MultiRegionPolicy_FieldPath)
	return res, ok
}
func (fps *Service_FieldSubPath) AsImportedVersionsSubPath() (ServiceImportedVersions_FieldPath, bool) {
	res, ok := fps.subPath.(ServiceImportedVersions_FieldPath)
	return res, ok
}
func (fps *Service_FieldSubPath) AsServicesCtrlSubPath() (ServiceAllowedServicesCtrlFlag_FieldPath, bool) {
	res, ok := fps.subPath.(ServiceAllowedServicesCtrlFlag_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *Service_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *Service_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source Service
func (fps *Service_FieldSubPath) Get(source *Service) (values []interface{}) {
	switch fps.selector {
	case Service_FieldPathSelectorMetadata:
		values = append(values, fps.subPath.GetRaw(source.GetMetadata())...)
	case Service_FieldPathSelectorMultiRegionPolicy:
		values = append(values, fps.subPath.GetRaw(source.GetMultiRegionPolicy())...)
	case Service_FieldPathSelectorImportedVersions:
		for _, item := range source.GetImportedVersions() {
			values = append(values, fps.subPath.GetRaw(item)...)
		}
	case Service_FieldPathSelectorServicesCtrl:
		values = append(values, fps.subPath.GetRaw(source.GetServicesCtrl())...)
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fps.selector))
	}
	return
}

func (fps *Service_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*Service))
}

// GetSingle returns value of selected field from source Service
func (fps *Service_FieldSubPath) GetSingle(source *Service) (interface{}, bool) {
	switch fps.selector {
	case Service_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case Service_FieldPathSelectorMultiRegionPolicy:
		if source.GetMultiRegionPolicy() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMultiRegionPolicy())
	case Service_FieldPathSelectorImportedVersions:
		if len(source.GetImportedVersions()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetImportedVersions()[0])
	case Service_FieldPathSelectorServicesCtrl:
		if source.GetServicesCtrl() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetServicesCtrl())
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fps.selector))
	}
}

func (fps *Service_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*Service))
}

// GetDefault returns a default value of the field type
func (fps *Service_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *Service_FieldSubPath) ClearValue(item *Service) {
	if item != nil {
		switch fps.selector {
		case Service_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case Service_FieldPathSelectorMultiRegionPolicy:
			fps.subPath.ClearValueRaw(item.MultiRegionPolicy)
		case Service_FieldPathSelectorImportedVersions:
			for _, subItem := range item.ImportedVersions {
				fps.subPath.ClearValueRaw(subItem)
			}
		case Service_FieldPathSelectorServicesCtrl:
			fps.subPath.ClearValueRaw(item.ServicesCtrl)
		default:
			panic(fmt.Sprintf("Invalid selector for Service: %d", fps.selector))
		}
	}
}

func (fps *Service_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*Service))
}

// IsLeaf - whether field path is holds simple value
func (fps *Service_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *Service_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&Service_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *Service_FieldSubPath) WithIValue(value interface{}) Service_FieldPathValue {
	return &Service_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *Service_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *Service_FieldSubPath) WithIArrayOfValues(values interface{}) Service_FieldPathArrayOfValues {
	return &Service_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *Service_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *Service_FieldSubPath) WithIArrayItemValue(value interface{}) Service_FieldPathArrayItemValue {
	return &Service_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *Service_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// Service_FieldPathValue allows storing values for Service fields according to their type
type Service_FieldPathValue interface {
	Service_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Service)
	CompareWith(*Service) (cmp int, comparable bool)
}

func ParseService_FieldPathValue(pathStr, valueStr string) (Service_FieldPathValue, error) {
	fp, err := ParseService_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Service field path value from %s: %v", valueStr, err)
	}
	return fpv.(Service_FieldPathValue), nil
}

func MustParseService_FieldPathValue(pathStr, valueStr string) Service_FieldPathValue {
	fpv, err := ParseService_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type Service_FieldTerminalPathValue struct {
	Service_FieldTerminalPath
	value interface{}
}

var _ Service_FieldPathValue = (*Service_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Service' as interface{}
func (fpv *Service_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *Service_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsMetadataValue() (*meta.Meta, bool) {
	res, ok := fpv.value.(*meta.Meta)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsMultiRegionPolicyValue() (*multi_region_policy.MultiRegionPolicy, bool) {
	res, ok := fpv.value.(*multi_region_policy.MultiRegionPolicy)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsAllVersionsValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsGlobalDomainValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsImportedServicesValue() ([]*Reference, bool) {
	res, ok := fpv.value.([]*Reference)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsUsedServicesValue() ([]*Reference, bool) {
	res, ok := fpv.value.([]*Reference)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsImportedVersionsValue() ([]*Service_ImportedVersions, bool) {
	res, ok := fpv.value.([]*Service_ImportedVersions)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsEnvRegistryGenerationValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsAutomaticVersionSwitchValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *Service_FieldTerminalPathValue) AsServicesCtrlValue() (*Service_AllowedServicesCtrlFlag, bool) {
	res, ok := fpv.value.(*Service_AllowedServicesCtrlFlag)
	return res, ok
}

// SetTo stores value for selected field for object Service
func (fpv *Service_FieldTerminalPathValue) SetTo(target **Service) {
	if *target == nil {
		*target = new(Service)
	}
	switch fpv.selector {
	case Service_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case Service_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*meta.Meta)
	case Service_FieldPathSelectorMultiRegionPolicy:
		(*target).MultiRegionPolicy = fpv.value.(*multi_region_policy.MultiRegionPolicy)
	case Service_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case Service_FieldPathSelectorAllVersions:
		(*target).AllVersions = fpv.value.([]string)
	case Service_FieldPathSelectorGlobalDomain:
		(*target).GlobalDomain = fpv.value.(string)
	case Service_FieldPathSelectorImportedServices:
		(*target).ImportedServices = fpv.value.([]*Reference)
	case Service_FieldPathSelectorUsedServices:
		(*target).UsedServices = fpv.value.([]*Reference)
	case Service_FieldPathSelectorImportedVersions:
		(*target).ImportedVersions = fpv.value.([]*Service_ImportedVersions)
	case Service_FieldPathSelectorEnvRegistryGeneration:
		(*target).EnvRegistryGeneration = fpv.value.(int32)
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		(*target).AutomaticVersionSwitch = fpv.value.(bool)
	case Service_FieldPathSelectorServicesCtrl:
		(*target).ServicesCtrl = fpv.value.(*Service_AllowedServicesCtrlFlag)
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fpv.selector))
	}
}

func (fpv *Service_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Service)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'Service_FieldTerminalPathValue' with the value under path in 'Service'.
func (fpv *Service_FieldTerminalPathValue) CompareWith(source *Service) (int, bool) {
	switch fpv.selector {
	case Service_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case Service_FieldPathSelectorMetadata:
		return 0, false
	case Service_FieldPathSelectorMultiRegionPolicy:
		return 0, false
	case Service_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Service_FieldPathSelectorAllVersions:
		return 0, false
	case Service_FieldPathSelectorGlobalDomain:
		leftValue := fpv.value.(string)
		rightValue := source.GetGlobalDomain()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Service_FieldPathSelectorImportedServices:
		return 0, false
	case Service_FieldPathSelectorUsedServices:
		return 0, false
	case Service_FieldPathSelectorImportedVersions:
		return 0, false
	case Service_FieldPathSelectorEnvRegistryGeneration:
		leftValue := fpv.value.(int32)
		rightValue := source.GetEnvRegistryGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		leftValue := fpv.value.(bool)
		rightValue := source.GetAutomaticVersionSwitch()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case Service_FieldPathSelectorServicesCtrl:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fpv.selector))
	}
}

func (fpv *Service_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Service))
}

type Service_FieldSubPathValue struct {
	Service_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ Service_FieldPathValue = (*Service_FieldSubPathValue)(nil)

func (fpvs *Service_FieldSubPathValue) AsMetadataPathValue() (meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *Service_FieldSubPathValue) AsMultiRegionPolicyPathValue() (multi_region_policy.MultiRegionPolicy_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(multi_region_policy.MultiRegionPolicy_FieldPathValue)
	return res, ok
}
func (fpvs *Service_FieldSubPathValue) AsImportedVersionsPathValue() (ServiceImportedVersions_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ServiceImportedVersions_FieldPathValue)
	return res, ok
}
func (fpvs *Service_FieldSubPathValue) AsServicesCtrlPathValue() (ServiceAllowedServicesCtrlFlag_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ServiceAllowedServicesCtrlFlag_FieldPathValue)
	return res, ok
}

func (fpvs *Service_FieldSubPathValue) SetTo(target **Service) {
	if *target == nil {
		*target = new(Service)
	}
	switch fpvs.Selector() {
	case Service_FieldPathSelectorMetadata:
		fpvs.subPathValue.(meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case Service_FieldPathSelectorMultiRegionPolicy:
		fpvs.subPathValue.(multi_region_policy.MultiRegionPolicy_FieldPathValue).SetTo(&(*target).MultiRegionPolicy)
	case Service_FieldPathSelectorImportedVersions:
		panic("FieldPath setter is unsupported for array subpaths")
	case Service_FieldPathSelectorServicesCtrl:
		fpvs.subPathValue.(ServiceAllowedServicesCtrlFlag_FieldPathValue).SetTo(&(*target).ServicesCtrl)
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fpvs.Selector()))
	}
}

func (fpvs *Service_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Service)
	fpvs.SetTo(&typedObject)
}

func (fpvs *Service_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *Service_FieldSubPathValue) CompareWith(source *Service) (int, bool) {
	switch fpvs.Selector() {
	case Service_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case Service_FieldPathSelectorMultiRegionPolicy:
		return fpvs.subPathValue.(multi_region_policy.MultiRegionPolicy_FieldPathValue).CompareWith(source.GetMultiRegionPolicy())
	case Service_FieldPathSelectorImportedVersions:
		return 0, false // repeated field
	case Service_FieldPathSelectorServicesCtrl:
		return fpvs.subPathValue.(ServiceAllowedServicesCtrlFlag_FieldPathValue).CompareWith(source.GetServicesCtrl())
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fpvs.Selector()))
	}
}

func (fpvs *Service_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*Service))
}

// Service_FieldPathArrayItemValue allows storing single item in Path-specific values for Service according to their type
// Present only for array (repeated) types.
type Service_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	Service_FieldPath
	ContainsValue(*Service) bool
}

// ParseService_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseService_FieldPathArrayItemValue(pathStr, valueStr string) (Service_FieldPathArrayItemValue, error) {
	fp, err := ParseService_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Service field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(Service_FieldPathArrayItemValue), nil
}

func MustParseService_FieldPathArrayItemValue(pathStr, valueStr string) Service_FieldPathArrayItemValue {
	fpaiv, err := ParseService_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type Service_FieldTerminalPathArrayItemValue struct {
	Service_FieldTerminalPath
	value interface{}
}

var _ Service_FieldPathArrayItemValue = (*Service_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Service as interface{}
func (fpaiv *Service_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *Service_FieldTerminalPathArrayItemValue) AsAllVersionsItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *Service_FieldTerminalPathArrayItemValue) AsImportedServicesItemValue() (*Reference, bool) {
	res, ok := fpaiv.value.(*Reference)
	return res, ok
}
func (fpaiv *Service_FieldTerminalPathArrayItemValue) AsUsedServicesItemValue() (*Reference, bool) {
	res, ok := fpaiv.value.(*Reference)
	return res, ok
}
func (fpaiv *Service_FieldTerminalPathArrayItemValue) AsImportedVersionsItemValue() (*Service_ImportedVersions, bool) {
	res, ok := fpaiv.value.(*Service_ImportedVersions)
	return res, ok
}

func (fpaiv *Service_FieldTerminalPathArrayItemValue) GetSingle(source *Service) (interface{}, bool) {
	return nil, false
}

func (fpaiv *Service_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Service))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Service'
func (fpaiv *Service_FieldTerminalPathArrayItemValue) ContainsValue(source *Service) bool {
	slice := fpaiv.Service_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type Service_FieldSubPathArrayItemValue struct {
	Service_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *Service_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *Service_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Service_FieldSubPathArrayItemValue) AsMultiRegionPolicyPathItemValue() (multi_region_policy.MultiRegionPolicy_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(multi_region_policy.MultiRegionPolicy_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Service_FieldSubPathArrayItemValue) AsImportedVersionsPathItemValue() (ServiceImportedVersions_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ServiceImportedVersions_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *Service_FieldSubPathArrayItemValue) AsServicesCtrlPathItemValue() (ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'Service'
func (fpaivs *Service_FieldSubPathArrayItemValue) ContainsValue(source *Service) bool {
	switch fpaivs.Selector() {
	case Service_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case Service_FieldPathSelectorMultiRegionPolicy:
		return fpaivs.subPathItemValue.(multi_region_policy.MultiRegionPolicy_FieldPathArrayItemValue).ContainsValue(source.GetMultiRegionPolicy())
	case Service_FieldPathSelectorImportedVersions:
		return false // repeated/map field
	case Service_FieldPathSelectorServicesCtrl:
		return fpaivs.subPathItemValue.(ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue).ContainsValue(source.GetServicesCtrl())
	default:
		panic(fmt.Sprintf("Invalid selector for Service: %d", fpaivs.Selector()))
	}
}

// Service_FieldPathArrayOfValues allows storing slice of values for Service fields according to their type
type Service_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	Service_FieldPath
}

func ParseService_FieldPathArrayOfValues(pathStr, valuesStr string) (Service_FieldPathArrayOfValues, error) {
	fp, err := ParseService_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Service field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(Service_FieldPathArrayOfValues), nil
}

func MustParseService_FieldPathArrayOfValues(pathStr, valuesStr string) Service_FieldPathArrayOfValues {
	fpaov, err := ParseService_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type Service_FieldTerminalPathArrayOfValues struct {
	Service_FieldTerminalPath
	values interface{}
}

var _ Service_FieldPathArrayOfValues = (*Service_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *Service_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case Service_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*meta.Meta) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorMultiRegionPolicy:
		for _, v := range fpaov.values.([]*multi_region_policy.MultiRegionPolicy) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorAllVersions:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorGlobalDomain:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorImportedServices:
		for _, v := range fpaov.values.([][]*Reference) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorUsedServices:
		for _, v := range fpaov.values.([][]*Reference) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorImportedVersions:
		for _, v := range fpaov.values.([][]*Service_ImportedVersions) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorEnvRegistryGeneration:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorAutomaticVersionSwitch:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case Service_FieldPathSelectorServicesCtrl:
		for _, v := range fpaov.values.([]*Service_AllowedServicesCtrlFlag) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*meta.Meta, bool) {
	res, ok := fpaov.values.([]*meta.Meta)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsMultiRegionPolicyArrayOfValues() ([]*multi_region_policy.MultiRegionPolicy, bool) {
	res, ok := fpaov.values.([]*multi_region_policy.MultiRegionPolicy)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsAllVersionsArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsGlobalDomainArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsImportedServicesArrayOfValues() ([][]*Reference, bool) {
	res, ok := fpaov.values.([][]*Reference)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsUsedServicesArrayOfValues() ([][]*Reference, bool) {
	res, ok := fpaov.values.([][]*Reference)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsImportedVersionsArrayOfValues() ([][]*Service_ImportedVersions, bool) {
	res, ok := fpaov.values.([][]*Service_ImportedVersions)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsEnvRegistryGenerationArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsAutomaticVersionSwitchArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *Service_FieldTerminalPathArrayOfValues) AsServicesCtrlArrayOfValues() ([]*Service_AllowedServicesCtrlFlag, bool) {
	res, ok := fpaov.values.([]*Service_AllowedServicesCtrlFlag)
	return res, ok
}

type Service_FieldSubPathArrayOfValues struct {
	Service_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ Service_FieldPathArrayOfValues = (*Service_FieldSubPathArrayOfValues)(nil)

func (fpsaov *Service_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *Service_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Service_FieldSubPathArrayOfValues) AsMultiRegionPolicyPathArrayOfValues() (multi_region_policy.MultiRegionPolicy_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(multi_region_policy.MultiRegionPolicy_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Service_FieldSubPathArrayOfValues) AsImportedVersionsPathArrayOfValues() (ServiceImportedVersions_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ServiceImportedVersions_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *Service_FieldSubPathArrayOfValues) AsServicesCtrlPathArrayOfValues() (ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ServiceImportedVersions_FieldPath interface {
	gotenobject.FieldPath
	Selector() ServiceImportedVersions_FieldPathSelector
	Get(source *Service_ImportedVersions) []interface{}
	GetSingle(source *Service_ImportedVersions) (interface{}, bool)
	ClearValue(item *Service_ImportedVersions)

	// Those methods build corresponding ServiceImportedVersions_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ServiceImportedVersions_FieldPathValue
	WithIArrayOfValues(values interface{}) ServiceImportedVersions_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ServiceImportedVersions_FieldPathArrayItemValue
}

type ServiceImportedVersions_FieldPathSelector int32

const (
	ServiceImportedVersions_FieldPathSelectorTargetService         ServiceImportedVersions_FieldPathSelector = 0
	ServiceImportedVersions_FieldPathSelectorTargetServiceVersion  ServiceImportedVersions_FieldPathSelector = 1
	ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion ServiceImportedVersions_FieldPathSelector = 2
)

func (s ServiceImportedVersions_FieldPathSelector) String() string {
	switch s {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		return "target_service"
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		return "target_service_version"
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		return "current_service_version"
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", s))
	}
}

func BuildServiceImportedVersions_FieldPath(fp gotenobject.RawFieldPath) (ServiceImportedVersions_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Service_ImportedVersions")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "target_service", "targetService", "target-service":
			return &ServiceImportedVersions_FieldTerminalPath{selector: ServiceImportedVersions_FieldPathSelectorTargetService}, nil
		case "target_service_version", "targetServiceVersion", "target-service-version":
			return &ServiceImportedVersions_FieldTerminalPath{selector: ServiceImportedVersions_FieldPathSelectorTargetServiceVersion}, nil
		case "current_service_version", "currentServiceVersion", "current-service-version":
			return &ServiceImportedVersions_FieldTerminalPath{selector: ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Service_ImportedVersions", fp)
}

func ParseServiceImportedVersions_FieldPath(rawField string) (ServiceImportedVersions_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildServiceImportedVersions_FieldPath(fp)
}

func MustParseServiceImportedVersions_FieldPath(rawField string) ServiceImportedVersions_FieldPath {
	fp, err := ParseServiceImportedVersions_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ServiceImportedVersions_FieldTerminalPath struct {
	selector ServiceImportedVersions_FieldPathSelector
}

var _ ServiceImportedVersions_FieldPath = (*ServiceImportedVersions_FieldTerminalPath)(nil)

func (fp *ServiceImportedVersions_FieldTerminalPath) Selector() ServiceImportedVersions_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ServiceImportedVersions_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ServiceImportedVersions_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Service_ImportedVersions
func (fp *ServiceImportedVersions_FieldTerminalPath) Get(source *Service_ImportedVersions) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ServiceImportedVersions_FieldPathSelectorTargetService:
			if source.TargetService != nil {
				values = append(values, source.TargetService)
			}
		case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
			values = append(values, source.TargetServiceVersion)
		case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
			values = append(values, source.CurrentServiceVersion)
		default:
			panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
		}
	}
	return
}

func (fp *ServiceImportedVersions_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Service_ImportedVersions))
}

// GetSingle returns value pointed by specific field of from source Service_ImportedVersions
func (fp *ServiceImportedVersions_FieldTerminalPath) GetSingle(source *Service_ImportedVersions) (interface{}, bool) {
	switch fp.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		res := source.GetTargetService()
		return res, res != nil
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		return source.GetTargetServiceVersion(), source != nil
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		return source.GetCurrentServiceVersion(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
	}
}

func (fp *ServiceImportedVersions_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Service_ImportedVersions))
}

// GetDefault returns a default value of the field type
func (fp *ServiceImportedVersions_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		return (*Reference)(nil)
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		return ""
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
	}
}

func (fp *ServiceImportedVersions_FieldTerminalPath) ClearValue(item *Service_ImportedVersions) {
	if item != nil {
		switch fp.selector {
		case ServiceImportedVersions_FieldPathSelectorTargetService:
			item.TargetService = nil
		case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
			item.TargetServiceVersion = ""
		case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
			item.CurrentServiceVersion = ""
		default:
			panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
		}
	}
}

func (fp *ServiceImportedVersions_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Service_ImportedVersions))
}

// IsLeaf - whether field path is holds simple value
func (fp *ServiceImportedVersions_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ServiceImportedVersions_FieldPathSelectorTargetService ||
		fp.selector == ServiceImportedVersions_FieldPathSelectorTargetServiceVersion ||
		fp.selector == ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion
}

func (fp *ServiceImportedVersions_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ServiceImportedVersions_FieldTerminalPath) WithIValue(value interface{}) ServiceImportedVersions_FieldPathValue {
	switch fp.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		return &ServiceImportedVersions_FieldTerminalPathValue{ServiceImportedVersions_FieldTerminalPath: *fp, value: value.(*Reference)}
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		return &ServiceImportedVersions_FieldTerminalPathValue{ServiceImportedVersions_FieldTerminalPath: *fp, value: value.(string)}
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		return &ServiceImportedVersions_FieldTerminalPathValue{ServiceImportedVersions_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
	}
}

func (fp *ServiceImportedVersions_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ServiceImportedVersions_FieldTerminalPath) WithIArrayOfValues(values interface{}) ServiceImportedVersions_FieldPathArrayOfValues {
	fpaov := &ServiceImportedVersions_FieldTerminalPathArrayOfValues{ServiceImportedVersions_FieldTerminalPath: *fp}
	switch fp.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		return &ServiceImportedVersions_FieldTerminalPathArrayOfValues{ServiceImportedVersions_FieldTerminalPath: *fp, values: values.([]*Reference)}
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		return &ServiceImportedVersions_FieldTerminalPathArrayOfValues{ServiceImportedVersions_FieldTerminalPath: *fp, values: values.([]string)}
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		return &ServiceImportedVersions_FieldTerminalPathArrayOfValues{ServiceImportedVersions_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
	}
	return fpaov
}

func (fp *ServiceImportedVersions_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ServiceImportedVersions_FieldTerminalPath) WithIArrayItemValue(value interface{}) ServiceImportedVersions_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fp.selector))
	}
}

func (fp *ServiceImportedVersions_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ServiceImportedVersions_FieldPathValue allows storing values for ImportedVersions fields according to their type
type ServiceImportedVersions_FieldPathValue interface {
	ServiceImportedVersions_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Service_ImportedVersions)
	CompareWith(*Service_ImportedVersions) (cmp int, comparable bool)
}

func ParseServiceImportedVersions_FieldPathValue(pathStr, valueStr string) (ServiceImportedVersions_FieldPathValue, error) {
	fp, err := ParseServiceImportedVersions_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ImportedVersions field path value from %s: %v", valueStr, err)
	}
	return fpv.(ServiceImportedVersions_FieldPathValue), nil
}

func MustParseServiceImportedVersions_FieldPathValue(pathStr, valueStr string) ServiceImportedVersions_FieldPathValue {
	fpv, err := ParseServiceImportedVersions_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ServiceImportedVersions_FieldTerminalPathValue struct {
	ServiceImportedVersions_FieldTerminalPath
	value interface{}
}

var _ ServiceImportedVersions_FieldPathValue = (*ServiceImportedVersions_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ImportedVersions' as interface{}
func (fpv *ServiceImportedVersions_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ServiceImportedVersions_FieldTerminalPathValue) AsTargetServiceValue() (*Reference, bool) {
	res, ok := fpv.value.(*Reference)
	return res, ok
}
func (fpv *ServiceImportedVersions_FieldTerminalPathValue) AsTargetServiceVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *ServiceImportedVersions_FieldTerminalPathValue) AsCurrentServiceVersionValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object ImportedVersions
func (fpv *ServiceImportedVersions_FieldTerminalPathValue) SetTo(target **Service_ImportedVersions) {
	if *target == nil {
		*target = new(Service_ImportedVersions)
	}
	switch fpv.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		(*target).TargetService = fpv.value.(*Reference)
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		(*target).TargetServiceVersion = fpv.value.(string)
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		(*target).CurrentServiceVersion = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fpv.selector))
	}
}

func (fpv *ServiceImportedVersions_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Service_ImportedVersions)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ServiceImportedVersions_FieldTerminalPathValue' with the value under path in 'Service_ImportedVersions'.
func (fpv *ServiceImportedVersions_FieldTerminalPathValue) CompareWith(source *Service_ImportedVersions) (int, bool) {
	switch fpv.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		leftValue := fpv.value.(*Reference)
		rightValue := source.GetTargetService()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetTargetServiceVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		leftValue := fpv.value.(string)
		rightValue := source.GetCurrentServiceVersion()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Service_ImportedVersions: %d", fpv.selector))
	}
}

func (fpv *ServiceImportedVersions_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Service_ImportedVersions))
}

// ServiceImportedVersions_FieldPathArrayItemValue allows storing single item in Path-specific values for ImportedVersions according to their type
// Present only for array (repeated) types.
type ServiceImportedVersions_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ServiceImportedVersions_FieldPath
	ContainsValue(*Service_ImportedVersions) bool
}

// ParseServiceImportedVersions_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseServiceImportedVersions_FieldPathArrayItemValue(pathStr, valueStr string) (ServiceImportedVersions_FieldPathArrayItemValue, error) {
	fp, err := ParseServiceImportedVersions_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ImportedVersions field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ServiceImportedVersions_FieldPathArrayItemValue), nil
}

func MustParseServiceImportedVersions_FieldPathArrayItemValue(pathStr, valueStr string) ServiceImportedVersions_FieldPathArrayItemValue {
	fpaiv, err := ParseServiceImportedVersions_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ServiceImportedVersions_FieldTerminalPathArrayItemValue struct {
	ServiceImportedVersions_FieldTerminalPath
	value interface{}
}

var _ ServiceImportedVersions_FieldPathArrayItemValue = (*ServiceImportedVersions_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Service_ImportedVersions as interface{}
func (fpaiv *ServiceImportedVersions_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ServiceImportedVersions_FieldTerminalPathArrayItemValue) GetSingle(source *Service_ImportedVersions) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ServiceImportedVersions_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Service_ImportedVersions))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ImportedVersions'
func (fpaiv *ServiceImportedVersions_FieldTerminalPathArrayItemValue) ContainsValue(source *Service_ImportedVersions) bool {
	slice := fpaiv.ServiceImportedVersions_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ServiceImportedVersions_FieldPathArrayOfValues allows storing slice of values for ImportedVersions fields according to their type
type ServiceImportedVersions_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ServiceImportedVersions_FieldPath
}

func ParseServiceImportedVersions_FieldPathArrayOfValues(pathStr, valuesStr string) (ServiceImportedVersions_FieldPathArrayOfValues, error) {
	fp, err := ParseServiceImportedVersions_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ImportedVersions field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ServiceImportedVersions_FieldPathArrayOfValues), nil
}

func MustParseServiceImportedVersions_FieldPathArrayOfValues(pathStr, valuesStr string) ServiceImportedVersions_FieldPathArrayOfValues {
	fpaov, err := ParseServiceImportedVersions_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ServiceImportedVersions_FieldTerminalPathArrayOfValues struct {
	ServiceImportedVersions_FieldTerminalPath
	values interface{}
}

var _ ServiceImportedVersions_FieldPathArrayOfValues = (*ServiceImportedVersions_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ServiceImportedVersions_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ServiceImportedVersions_FieldPathSelectorTargetService:
		for _, v := range fpaov.values.([]*Reference) {
			values = append(values, v)
		}
	case ServiceImportedVersions_FieldPathSelectorTargetServiceVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case ServiceImportedVersions_FieldPathSelectorCurrentServiceVersion:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ServiceImportedVersions_FieldTerminalPathArrayOfValues) AsTargetServiceArrayOfValues() ([]*Reference, bool) {
	res, ok := fpaov.values.([]*Reference)
	return res, ok
}
func (fpaov *ServiceImportedVersions_FieldTerminalPathArrayOfValues) AsTargetServiceVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *ServiceImportedVersions_FieldTerminalPathArrayOfValues) AsCurrentServiceVersionArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ServiceAllowedServicesCtrlFlag_FieldPath interface {
	gotenobject.FieldPath
	Selector() ServiceAllowedServicesCtrlFlag_FieldPathSelector
	Get(source *Service_AllowedServicesCtrlFlag) []interface{}
	GetSingle(source *Service_AllowedServicesCtrlFlag) (interface{}, bool)
	ClearValue(item *Service_AllowedServicesCtrlFlag)

	// Those methods build corresponding ServiceAllowedServicesCtrlFlag_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ServiceAllowedServicesCtrlFlag_FieldPathValue
	WithIArrayOfValues(values interface{}) ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue
}

type ServiceAllowedServicesCtrlFlag_FieldPathSelector int32

const (
	ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty    ServiceAllowedServicesCtrlFlag_FieldPathSelector = 0
	ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration ServiceAllowedServicesCtrlFlag_FieldPathSelector = 1
)

func (s ServiceAllowedServicesCtrlFlag_FieldPathSelector) String() string {
	switch s {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		return "is_dirty"
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		return "generation"
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", s))
	}
}

func BuildServiceAllowedServicesCtrlFlag_FieldPath(fp gotenobject.RawFieldPath) (ServiceAllowedServicesCtrlFlag_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object Service_AllowedServicesCtrlFlag")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "is_dirty", "isDirty", "is-dirty":
			return &ServiceAllowedServicesCtrlFlag_FieldTerminalPath{selector: ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty}, nil
		case "generation":
			return &ServiceAllowedServicesCtrlFlag_FieldTerminalPath{selector: ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object Service_AllowedServicesCtrlFlag", fp)
}

func ParseServiceAllowedServicesCtrlFlag_FieldPath(rawField string) (ServiceAllowedServicesCtrlFlag_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildServiceAllowedServicesCtrlFlag_FieldPath(fp)
}

func MustParseServiceAllowedServicesCtrlFlag_FieldPath(rawField string) ServiceAllowedServicesCtrlFlag_FieldPath {
	fp, err := ParseServiceAllowedServicesCtrlFlag_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ServiceAllowedServicesCtrlFlag_FieldTerminalPath struct {
	selector ServiceAllowedServicesCtrlFlag_FieldPathSelector
}

var _ ServiceAllowedServicesCtrlFlag_FieldPath = (*ServiceAllowedServicesCtrlFlag_FieldTerminalPath)(nil)

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) Selector() ServiceAllowedServicesCtrlFlag_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source Service_AllowedServicesCtrlFlag
func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) Get(source *Service_AllowedServicesCtrlFlag) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
			values = append(values, source.IsDirty)
		case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
			values = append(values, source.Generation)
		default:
			panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
		}
	}
	return
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*Service_AllowedServicesCtrlFlag))
}

// GetSingle returns value pointed by specific field of from source Service_AllowedServicesCtrlFlag
func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) GetSingle(source *Service_AllowedServicesCtrlFlag) (interface{}, bool) {
	switch fp.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		return source.GetIsDirty(), source != nil
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		return source.GetGeneration(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
	}
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*Service_AllowedServicesCtrlFlag))
}

// GetDefault returns a default value of the field type
func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		return false
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		return int64(0)
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
	}
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) ClearValue(item *Service_AllowedServicesCtrlFlag) {
	if item != nil {
		switch fp.selector {
		case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
			item.IsDirty = false
		case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
			item.Generation = int64(0)
		default:
			panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
		}
	}
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*Service_AllowedServicesCtrlFlag))
}

// IsLeaf - whether field path is holds simple value
func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty ||
		fp.selector == ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) WithIValue(value interface{}) ServiceAllowedServicesCtrlFlag_FieldPathValue {
	switch fp.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		return &ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue{ServiceAllowedServicesCtrlFlag_FieldTerminalPath: *fp, value: value.(bool)}
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		return &ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue{ServiceAllowedServicesCtrlFlag_FieldTerminalPath: *fp, value: value.(int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
	}
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) WithIArrayOfValues(values interface{}) ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues {
	fpaov := &ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues{ServiceAllowedServicesCtrlFlag_FieldTerminalPath: *fp}
	switch fp.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		return &ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues{ServiceAllowedServicesCtrlFlag_FieldTerminalPath: *fp, values: values.([]bool)}
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		return &ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues{ServiceAllowedServicesCtrlFlag_FieldTerminalPath: *fp, values: values.([]int64)}
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
	}
	return fpaov
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) WithIArrayItemValue(value interface{}) ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fp.selector))
	}
}

func (fp *ServiceAllowedServicesCtrlFlag_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ServiceAllowedServicesCtrlFlag_FieldPathValue allows storing values for AllowedServicesCtrlFlag fields according to their type
type ServiceAllowedServicesCtrlFlag_FieldPathValue interface {
	ServiceAllowedServicesCtrlFlag_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **Service_AllowedServicesCtrlFlag)
	CompareWith(*Service_AllowedServicesCtrlFlag) (cmp int, comparable bool)
}

func ParseServiceAllowedServicesCtrlFlag_FieldPathValue(pathStr, valueStr string) (ServiceAllowedServicesCtrlFlag_FieldPathValue, error) {
	fp, err := ParseServiceAllowedServicesCtrlFlag_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AllowedServicesCtrlFlag field path value from %s: %v", valueStr, err)
	}
	return fpv.(ServiceAllowedServicesCtrlFlag_FieldPathValue), nil
}

func MustParseServiceAllowedServicesCtrlFlag_FieldPathValue(pathStr, valueStr string) ServiceAllowedServicesCtrlFlag_FieldPathValue {
	fpv, err := ParseServiceAllowedServicesCtrlFlag_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue struct {
	ServiceAllowedServicesCtrlFlag_FieldTerminalPath
	value interface{}
}

var _ ServiceAllowedServicesCtrlFlag_FieldPathValue = (*ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AllowedServicesCtrlFlag' as interface{}
func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) AsIsDirtyValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) AsGenerationValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}

// SetTo stores value for selected field for object AllowedServicesCtrlFlag
func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) SetTo(target **Service_AllowedServicesCtrlFlag) {
	if *target == nil {
		*target = new(Service_AllowedServicesCtrlFlag)
	}
	switch fpv.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		(*target).IsDirty = fpv.value.(bool)
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		(*target).Generation = fpv.value.(int64)
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fpv.selector))
	}
}

func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*Service_AllowedServicesCtrlFlag)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue' with the value under path in 'Service_AllowedServicesCtrlFlag'.
func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) CompareWith(source *Service_AllowedServicesCtrlFlag) (int, bool) {
	switch fpv.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsDirty()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		leftValue := fpv.value.(int64)
		rightValue := source.GetGeneration()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for Service_AllowedServicesCtrlFlag: %d", fpv.selector))
	}
}

func (fpv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*Service_AllowedServicesCtrlFlag))
}

// ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue allows storing single item in Path-specific values for AllowedServicesCtrlFlag according to their type
// Present only for array (repeated) types.
type ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ServiceAllowedServicesCtrlFlag_FieldPath
	ContainsValue(*Service_AllowedServicesCtrlFlag) bool
}

// ParseServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue(pathStr, valueStr string) (ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue, error) {
	fp, err := ParseServiceAllowedServicesCtrlFlag_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AllowedServicesCtrlFlag field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue), nil
}

func MustParseServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue(pathStr, valueStr string) ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue {
	fpaiv, err := ParseServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayItemValue struct {
	ServiceAllowedServicesCtrlFlag_FieldTerminalPath
	value interface{}
}

var _ ServiceAllowedServicesCtrlFlag_FieldPathArrayItemValue = (*ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object Service_AllowedServicesCtrlFlag as interface{}
func (fpaiv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayItemValue) GetSingle(source *Service_AllowedServicesCtrlFlag) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*Service_AllowedServicesCtrlFlag))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AllowedServicesCtrlFlag'
func (fpaiv *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayItemValue) ContainsValue(source *Service_AllowedServicesCtrlFlag) bool {
	slice := fpaiv.ServiceAllowedServicesCtrlFlag_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues allows storing slice of values for AllowedServicesCtrlFlag fields according to their type
type ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ServiceAllowedServicesCtrlFlag_FieldPath
}

func ParseServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues(pathStr, valuesStr string) (ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues, error) {
	fp, err := ParseServiceAllowedServicesCtrlFlag_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AllowedServicesCtrlFlag field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues), nil
}

func MustParseServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues(pathStr, valuesStr string) ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues {
	fpaov, err := ParseServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues struct {
	ServiceAllowedServicesCtrlFlag_FieldTerminalPath
	values interface{}
}

var _ ServiceAllowedServicesCtrlFlag_FieldPathArrayOfValues = (*ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorIsDirty:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case ServiceAllowedServicesCtrlFlag_FieldPathSelectorGeneration:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues) AsIsDirtyArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *ServiceAllowedServicesCtrlFlag_FieldTerminalPathArrayOfValues) AsGenerationArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
