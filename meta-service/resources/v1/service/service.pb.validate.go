// Code generated by protoc-gen-goten-validate
// File: goten/meta-service/proto/v1/service.proto
// DO NOT EDIT!!!

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	gotenvalidate "github.com/cloudwan/goten-sdk/runtime/validate"
)

// proto imports
import (
	meta "github.com/cloudwan/goten-sdk/types/meta"
	multi_region_policy "github.com/cloudwan/goten-sdk/types/multi_region_policy"
)

var (
	_ = bytes.Equal
	_ = errors.New
	_ = fmt.Errorf
	_ = net.ParseIP
	_ = regexp.Match
	_ = strings.Split
	_ = time.Now
	_ = utf8.RuneCountInString
	_ = url.Parse
	_ = gotenvalidate.NewValidationError
)

// make sure we're using proto imports
var (
	_ = &meta.Meta{}
	_ = &multi_region_policy.MultiRegionPolicy{}
)

func (obj *Service) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if subobj, ok := interface{}(obj.Metadata).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Service", "metadata", obj.Metadata, "nested object validation failed", err)
		}
	}
	if obj.MultiRegionPolicy == nil {
		return gotenvalidate.NewValidationError("Service", "multiRegionPolicy", obj.MultiRegionPolicy, "field is required", nil)
	}
	if subobj, ok := interface{}(obj.MultiRegionPolicy).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Service", "multiRegionPolicy", obj.MultiRegionPolicy, "nested object validation failed", err)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.DisplayName)
		if rlen > 64 {
			return gotenvalidate.NewValidationError("Service", "displayName", obj.DisplayName, "field must contain at most 64 characters", nil)
		}
	}
	if obj.DisplayName == "" {
		return gotenvalidate.NewValidationError("Service", "displayName", obj.DisplayName, "field is required", nil)
	}
	if len(obj.AllVersions) < 1 {
		return gotenvalidate.NewValidationError("Service", "allVersions", obj.AllVersions, "field must have at least 1 items", nil)
	}
	if len(obj.AllVersions) > 1 {
		values := make(map[string]struct{})
		for _, v := range obj.AllVersions {
			if _, ok := values[v]; ok {
				return gotenvalidate.NewValidationError("Service", "allVersions", obj.AllVersions, "field must contain unique items", nil)
			}
			values[v] = struct{}{}
		}
	}
	for _, el := range obj.AllVersions {

		if len(el) > 64 {
			return gotenvalidate.NewValidationError("Service", "allVersions", el, "field must contain at most 64 characters", nil)
		}
	}
	{
		rlen := utf8.RuneCountInString(obj.GlobalDomain)
		if rlen > 255 {
			return gotenvalidate.NewValidationError("Service", "globalDomain", obj.GlobalDomain, "field must contain at most 255 characters", nil)
		}
	}
	if err := gotenvalidate.ValidateAddress(string(obj.GlobalDomain)); err != nil {
		return gotenvalidate.NewValidationError("Service", "globalDomain", obj.GlobalDomain, "field must contain a valid address", nil)
	}
	if obj.GlobalDomain == "" {
		return gotenvalidate.NewValidationError("Service", "globalDomain", obj.GlobalDomain, "field is required", nil)
	}
	for idx, elem := range obj.ImportedVersions {
		if subobj, ok := interface{}(elem).(gotenvalidate.Validator); ok {
			if err := subobj.GotenValidate(); err != nil {
				return gotenvalidate.NewValidationError("Service", "importedVersions", obj.ImportedVersions[idx], "nested object validation failed", err)
			}
		}
	}
	if subobj, ok := interface{}(obj.ServicesCtrl).(gotenvalidate.Validator); ok {
		if err := subobj.GotenValidate(); err != nil {
			return gotenvalidate.NewValidationError("Service", "servicesCtrl", obj.ServicesCtrl, "nested object validation failed", err)
		}
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Service_ImportedVersions) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if len(obj.TargetServiceVersion) > 64 {
		return gotenvalidate.NewValidationError("ImportedVersions", "targetServiceVersion", obj.TargetServiceVersion, "field must contain at most 64 characters", nil)
	}
	if obj.TargetServiceVersion == "" {
		return gotenvalidate.NewValidationError("ImportedVersions", "targetServiceVersion", obj.TargetServiceVersion, "field is required", nil)
	}
	if len(obj.CurrentServiceVersion) > 64 {
		return gotenvalidate.NewValidationError("ImportedVersions", "currentServiceVersion", obj.CurrentServiceVersion, "field must contain at most 64 characters", nil)
	}
	if obj.CurrentServiceVersion == "" {
		return gotenvalidate.NewValidationError("ImportedVersions", "currentServiceVersion", obj.CurrentServiceVersion, "field is required", nil)
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
func (obj *Service_AllowedServicesCtrlFlag) GotenValidate() error {
	if obj == nil {
		return nil
	}
	if cvobj, ok := interface{}(obj).(gotenvalidate.CustomValidator); ok {
		return cvobj.GotenCustomValidate()
	}
	return nil
}
