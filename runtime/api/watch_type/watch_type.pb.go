// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: goten/runtime/api/watch_type.proto

package watch_type

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// WatchType defines how client wants to subscribe for real-time updates when
// making Watch<Collection> request.
type WatchType int32

const (
	// In a Stateful type, by default first watch response contains whole snapshot
	// of a given query according to the provided filter, field mask, order by
	// fields. Paging is supported (page token and size can be used), but resuming
	// not (resume token cannot be used). Reason is, that server drops all state
	// for given watch session after disconnection and cannot match resuming token
	// with some known state. Subsequent responses will contain incremental
	// changes to the initially given snapshot. Server will provide additional
	// information like index positions (and changes of those). It is possible to
	// split snapshot and incremental changes into chunks (and therefore, many
	// watch responses) by using maximum chunk size field in a request. In that
	// case, client is expected to check the appropriate flag in each response
	// messages to find a marker when "complete" message finishes. Clients should
	// specify at least chunk size or page size. If none of them are present,
	// server may enforce own limit on number of resources (page size) and return
	// snapshot with next page token, if that limit was exceeded. If page size is
	// accepted by the server (not too big), then response may be chunked only on
	// user wish, but its not necessary. This type is made for users desiring
	// real-time updates of a defined pages for use in for example UI dashboards,
	// which is typical case when users are capped by a page size.
	WatchType_STATEFUL WatchType = 0
	// In a stateless type, initial snapshot of a query is sent within N watch
	// responses (N = (NumRes / ChunkSize)), where: NumRes is a number of
	// resources passing optional filter specified in a request (and parent if
	// applicable), and ChunkSize is a maximum number of resource changes allowed
	// to be included in a single Watch<Collection>Response. This chunk size
	// should be specified in request object. Ordering and paging is not
	// supported: request must not specify page token, order by fields or page
	// size. Response object will never contain next/prev page tokens and index
	// positions inside resource change objects must be ignored by a client. Field
	// mask is allowed to be used. As client is supposed to contain state of the
	// session, it is allowed to use resumption tokens and it may be provided with
	// response. Server cannot tell the difference between added or modified
	// resource - instead of using "Add" or "Modified" change types, server uses
	// stateless "Set" type. The only common part is "Removed" type. If client
	// does not specify chunk size, server may enforce its own default value. This
	// type is made for users that do not care about ordering or paging but need
	// general view of a set of resources in the unordered fashion, for example
	// controllers. The benefit of this type, is that number of resources is never
	// capped.
	WatchType_STATELESS WatchType = 1
)

// Enum value maps for WatchType.
var (
	WatchType_name = map[int32]string{
		0: "STATEFUL",
		1: "STATELESS",
	}
	WatchType_value = map[string]int32{
		"STATEFUL":  0,
		"STATELESS": 1,
	}
)

func (x WatchType) Enum() *WatchType {
	p := new(WatchType)
	*p = x
	return p
}

func (x WatchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WatchType) Descriptor() protoreflect.EnumDescriptor {
	return file_goten_runtime_api_watch_type_proto_enumTypes[0].Descriptor()
}

func (WatchType) Type() protoreflect.EnumType {
	return &file_goten_runtime_api_watch_type_proto_enumTypes[0]
}

func (x WatchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WatchType.Descriptor instead.
func (WatchType) EnumDescriptor() ([]byte, []int) {
	return file_goten_runtime_api_watch_type_proto_rawDescGZIP(), []int{0}
}

var File_goten_runtime_api_watch_type_proto protoreflect.FileDescriptor

var file_goten_runtime_api_watch_type_proto_rawDesc = []byte{
	0x0a, 0x22, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x28, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x54, 0x45, 0x46, 0x55, 0x4c, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4c, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x42, 0x56, 0x0a, 0x20, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x50, 0x01, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65,
	0x6e, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_goten_runtime_api_watch_type_proto_rawDescOnce sync.Once
	file_goten_runtime_api_watch_type_proto_rawDescData = file_goten_runtime_api_watch_type_proto_rawDesc
)

func file_goten_runtime_api_watch_type_proto_rawDescGZIP() []byte {
	file_goten_runtime_api_watch_type_proto_rawDescOnce.Do(func() {
		file_goten_runtime_api_watch_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_goten_runtime_api_watch_type_proto_rawDescData)
	})
	return file_goten_runtime_api_watch_type_proto_rawDescData
}

var file_goten_runtime_api_watch_type_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_goten_runtime_api_watch_type_proto_goTypes = []interface{}{
	(WatchType)(0), // 0: goten.watch_type.WatchType
}
var file_goten_runtime_api_watch_type_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_goten_runtime_api_watch_type_proto_init() }
func file_goten_runtime_api_watch_type_proto_init() {
	if File_goten_runtime_api_watch_type_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_goten_runtime_api_watch_type_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_goten_runtime_api_watch_type_proto_goTypes,
		DependencyIndexes: file_goten_runtime_api_watch_type_proto_depIdxs,
		EnumInfos:         file_goten_runtime_api_watch_type_proto_enumTypes,
	}.Build()
	File_goten_runtime_api_watch_type_proto = out.File
	file_goten_runtime_api_watch_type_proto_rawDesc = nil
	file_goten_runtime_api_watch_type_proto_goTypes = nil
	file_goten_runtime_api_watch_type_proto_depIdxs = nil
}
