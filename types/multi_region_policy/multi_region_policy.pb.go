// Code generated by protoc-gen-goten-go
// File: goten/types/multi_region_policy.proto
// DO NOT EDIT!!!

package multi_region_policy

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import ()

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var ()

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MultiRegionPolicy is an object defining relation between service in multi-region environment and resource holding
// this policy (as one of its fields). Policy ought to be used for high-level resources like "Project" or "Organization"
// which form top elements in scopes. Policy then, attached to such a high level resource defines syncing policies for
// all kid resources and limits their geographical belonging (kid resources can belong only to the region allowed by a
// policy). Note: While policy governs all resources under policy holder resource, policy holder resource itself is not
// subject to this policy. This rule allows information about policy spread properly across regions and enables routing.
type MultiRegionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// List of regions available in the scope.
	// It is forbidden to create resource within given scope outside allowed regions.
	EnabledRegions []string `protobuf:"bytes,1,rep,name=enabled_regions,json=enabledRegions,proto3" json:"enabled_regions,omitempty"`
	// Must be within restricted_regions. Defines region handling CUD requests for
	// resources not attached to any region.
	DefaultControlRegion string `protobuf:"bytes,2,opt,name=default_control_region,json=defaultControlRegion,proto3" json:"default_control_region,omitempty"`
	// List of criteria according to which synchronization is disabled.
	CriteriaForDisabledSync []*MultiRegionPolicy_CriteriaForDisabledSync `protobuf:"bytes,3,rep,name=criteria_for_disabled_sync,json=criteriaForDisabledSync,proto3" json:"criteria_for_disabled_sync,omitempty"`
}

func (m *MultiRegionPolicy) Reset() {
	*m = MultiRegionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_multi_region_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MultiRegionPolicy) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MultiRegionPolicy) ProtoMessage() {}

func (m *MultiRegionPolicy) ProtoReflect() preflect.Message {
	mi := &goten_types_multi_region_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MultiRegionPolicy) GotenMessage() {}

// Deprecated, Use MultiRegionPolicy.ProtoReflect.Descriptor instead.
func (*MultiRegionPolicy) Descriptor() ([]byte, []int) {
	return goten_types_multi_region_policy_proto_rawDescGZIP(), []int{0}
}

func (m *MultiRegionPolicy) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MultiRegionPolicy) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MultiRegionPolicy) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MultiRegionPolicy) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MultiRegionPolicy) GetEnabledRegions() []string {
	if m != nil {
		return m.EnabledRegions
	}
	return nil
}

func (m *MultiRegionPolicy) GetDefaultControlRegion() string {
	if m != nil {
		return m.DefaultControlRegion
	}
	return ""
}

func (m *MultiRegionPolicy) GetCriteriaForDisabledSync() []*MultiRegionPolicy_CriteriaForDisabledSync {
	if m != nil {
		return m.CriteriaForDisabledSync
	}
	return nil
}

func (m *MultiRegionPolicy) SetEnabledRegions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "EnabledRegions", "MultiRegionPolicy"))
	}
	m.EnabledRegions = fv
}

func (m *MultiRegionPolicy) SetDefaultControlRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DefaultControlRegion", "MultiRegionPolicy"))
	}
	m.DefaultControlRegion = fv
}

func (m *MultiRegionPolicy) SetCriteriaForDisabledSync(fv []*MultiRegionPolicy_CriteriaForDisabledSync) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CriteriaForDisabledSync", "MultiRegionPolicy"))
	}
	m.CriteriaForDisabledSync = fv
}

// CriteriaForDisabledSync is a rule preventing data synchronization. By default, everything within Policy scope
// is synced (unless schema tells otherwise). However, within single scope to which this policy is attached, it is
// possible to blacklist synchronization for specific criteria. Examples:
// { resource_type_name: "devices.service.com/Device", sourceRegion: "france" } -> will make Devices in France private
// { resource_type_name: "devices.service.com/Device", destRegion: "hongkong" } -> will prevent from syncing Devices INTO
// HongKong region
// { resource_type_name: "devices.service.com/Device", sourceRegion: "germany", destRegion: "hongkong" } -> Will block
// syncing of Devices from Germany to HongKong.
// { resource_type_name: "devices.service.com/Pod" } -> will make Pods in all regions private
// { region: "japan" } -> will make all resources in Japan private
type MultiRegionPolicy_CriteriaForDisabledSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Fully qualified name of a resource. If not provided, all are considered. Required format:
	// "${SERVICE_DOMAIN}/${RESOURCE_SINGLE_NAME_CAMEL}, for example: "devices.service.com/Device"
	ResourceTypeName string `protobuf:"bytes,1,opt,name=resource_type_name,json=resourceTypeName,proto3" json:"resource_type_name,omitempty"`
	// Source region indicates that this rule prevents syncing into this region. If left blank, then all regions are
	// considered.
	SourceRegion string `protobuf:"bytes,2,opt,name=source_region,json=sourceRegion,proto3" json:"source_region,omitempty"`
	// Dest region indicates that this rule prevents syncing from this region. If left blank, then all regions are
	// considered.
	DestRegion string `protobuf:"bytes,3,opt,name=dest_region,json=destRegion,proto3" json:"dest_region,omitempty"`
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) Reset() {
	*m = MultiRegionPolicy_CriteriaForDisabledSync{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_multi_region_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*MultiRegionPolicy_CriteriaForDisabledSync) ProtoMessage() {}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) ProtoReflect() preflect.Message {
	mi := &goten_types_multi_region_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*MultiRegionPolicy_CriteriaForDisabledSync) GotenMessage() {}

// Deprecated, Use MultiRegionPolicy_CriteriaForDisabledSync.ProtoReflect.Descriptor instead.
func (*MultiRegionPolicy_CriteriaForDisabledSync) Descriptor() ([]byte, []int) {
	return goten_types_multi_region_policy_proto_rawDescGZIP(), []int{0, 0}
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) GetResourceTypeName() string {
	if m != nil {
		return m.ResourceTypeName
	}
	return ""
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) GetSourceRegion() string {
	if m != nil {
		return m.SourceRegion
	}
	return ""
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) GetDestRegion() string {
	if m != nil {
		return m.DestRegion
	}
	return ""
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) SetResourceTypeName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceTypeName", "MultiRegionPolicy_CriteriaForDisabledSync"))
	}
	m.ResourceTypeName = fv
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) SetSourceRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "SourceRegion", "MultiRegionPolicy_CriteriaForDisabledSync"))
	}
	m.SourceRegion = fv
}

func (m *MultiRegionPolicy_CriteriaForDisabledSync) SetDestRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DestRegion", "MultiRegionPolicy_CriteriaForDisabledSync"))
	}
	m.DestRegion = fv
}

var goten_types_multi_region_policy_proto preflect.FileDescriptor

var goten_types_multi_region_policy_proto_rawDesc = []byte{
	0x0a, 0x25, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x03, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x0f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0xca, 0xc6, 0x27, 0x06, 0x42, 0x04, 0x0a, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x3e, 0x0a, 0x16, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xca, 0xc6, 0x27, 0x04, 0x2a, 0x02, 0x68, 0x01, 0x52, 0x14, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x73, 0x0a, 0x1a, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x46, 0x6f, 0x72,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x17, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x53, 0x79, 0x6e, 0x63, 0x1a, 0x8d, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x46, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x50, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	goten_types_multi_region_policy_proto_rawDescOnce sync.Once
	goten_types_multi_region_policy_proto_rawDescData = goten_types_multi_region_policy_proto_rawDesc
)

func goten_types_multi_region_policy_proto_rawDescGZIP() []byte {
	goten_types_multi_region_policy_proto_rawDescOnce.Do(func() {
		goten_types_multi_region_policy_proto_rawDescData = protoimpl.X.CompressGZIP(goten_types_multi_region_policy_proto_rawDescData)
	})
	return goten_types_multi_region_policy_proto_rawDescData
}

var goten_types_multi_region_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var goten_types_multi_region_policy_proto_goTypes = []interface{}{
	(*MultiRegionPolicy)(nil),                         // 0: goten.types.MultiRegionPolicy
	(*MultiRegionPolicy_CriteriaForDisabledSync)(nil), // 1: goten.types.MultiRegionPolicy.CriteriaForDisabledSync
}
var goten_types_multi_region_policy_proto_depIdxs = []int32{
	1, // 0: goten.types.MultiRegionPolicy.criteria_for_disabled_sync:type_name -> goten.types.MultiRegionPolicy.CriteriaForDisabledSync
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { goten_types_multi_region_policy_proto_init() }
func goten_types_multi_region_policy_proto_init() {
	if goten_types_multi_region_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		goten_types_multi_region_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRegionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_multi_region_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiRegionPolicy_CriteriaForDisabledSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: goten_types_multi_region_policy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           goten_types_multi_region_policy_proto_goTypes,
		DependencyIndexes: goten_types_multi_region_policy_proto_depIdxs,
		MessageInfos:      goten_types_multi_region_policy_proto_msgTypes,
	}.Build()
	goten_types_multi_region_policy_proto = out.File
	goten_types_multi_region_policy_proto_rawDesc = nil
	goten_types_multi_region_policy_proto_goTypes = nil
	goten_types_multi_region_policy_proto_depIdxs = nil
}
