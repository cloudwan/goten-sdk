// Code generated by protoc-gen-goten-go
// File: goten/types/meta.proto
// DO NOT EDIT!!!

package meta

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &timestamppb.Timestamp{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// current resource state
type Lifecycle_State int32

const (
	// Must never be used
	Lifecycle_UNDEFINED Lifecycle_State = 0
	// Resource is up and running
	Lifecycle_ACTIVE Lifecycle_State = 1
	// Resource is in slow-deletion process.
	Lifecycle_DELETING Lifecycle_State = 2
)

var (
	Lifecycle_State_name = map[int32]string{
		0: "UNDEFINED",
		1: "ACTIVE",
		2: "DELETING",
	}

	Lifecycle_State_value = map[string]int32{
		"UNDEFINED": 0,
		"ACTIVE":    1,
		"DELETING":  2,
	}
)

func (x Lifecycle_State) Enum() *Lifecycle_State {
	p := new(Lifecycle_State)
	*p = x
	return p
}

func (x Lifecycle_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (Lifecycle_State) Descriptor() preflect.EnumDescriptor {
	return goten_types_meta_proto_enumTypes[0].Descriptor()
}

func (Lifecycle_State) Type() preflect.EnumType {
	return &goten_types_meta_proto_enumTypes[0]
}

func (x Lifecycle_State) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use Lifecycle_State.ProtoReflect.Descriptor instead.
func (Lifecycle_State) EnumDescriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{5, 0}
}

// Metadata
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty" firestore:"createTime"`
	UpdateTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty" firestore:"updateTime"`
	DeleteTime    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=delete_time,json=deleteTime,proto3" json:"delete_time,omitempty" firestore:"deleteTime"`
	Uuid          string                 `protobuf:"bytes,3,opt,name=uuid,proto3" json:"uuid,omitempty" firestore:"uuid"`
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" firestore:"tags"`
	Labels        map[string]string      `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"labels"`
	Annotations   map[string]string      `protobuf:"bytes,6,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"annotations"`
	// generation is the version number of the spec of the resource.
	// This number increments when the resource is updated with any changes of its spec.
	Generation int64 `protobuf:"varint,7,opt,name=generation,proto3" json:"generation,omitempty" firestore:"generation"`
	// An opaque value that represents the internal version of this object that can
	// be used by clients to determine when objects have changed. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server.
	// They may only be valid for a particular resource or set of resources.
	ResourceVersion string `protobuf:"bytes,8,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty" firestore:"resourceVersion"`
	// List of objects depended by this object. If ALL objects in the list have
	// been deleted, this object will be garbage collected. If this object is managed by a controller,
	// then an entry in this list will point to this controller, with the controller field set to true.
	OwnerReferences []*OwnerReference `protobuf:"bytes,13,rep,name=owner_references,json=ownerReferences,proto3" json:"owner_references,omitempty" firestore:"ownerReferences"`
	// List of all shard indices by their keys
	Shards map[string]int64 `protobuf:"bytes,14,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" firestore:"shards"`
	// Information about resource region and synchronization
	Syncing *SyncingMeta `protobuf:"bytes,15,opt,name=syncing,proto3" json:"syncing,omitempty" firestore:"syncing"`
	// Current lifecycle information about resource.
	Lifecycle *Lifecycle `protobuf:"bytes,17,opt,name=lifecycle,proto3" json:"lifecycle,omitempty" firestore:"lifecycle"`
	// Information about services access.ownership of given resource. Non populated
	// value should be treated as unregulated access.
	Services *ServicesInfo `protobuf:"bytes,18,opt,name=services,proto3" json:"services,omitempty" firestore:"services"`
}

func (m *Meta) Reset() {
	*m = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Meta) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Meta) ProtoMessage() {}

func (m *Meta) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Meta) GotenMessage() {}

// Deprecated, Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{0}
}

func (m *Meta) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Meta) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Meta) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Meta) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Meta) GetCreateTime() *timestamppb.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *Meta) GetUpdateTime() *timestamppb.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

func (m *Meta) GetDeleteTime() *timestamppb.Timestamp {
	if m != nil {
		return m.DeleteTime
	}
	return nil
}

func (m *Meta) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Meta) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Meta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Meta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

func (m *Meta) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return int64(0)
}

func (m *Meta) GetResourceVersion() string {
	if m != nil {
		return m.ResourceVersion
	}
	return ""
}

func (m *Meta) GetOwnerReferences() []*OwnerReference {
	if m != nil {
		return m.OwnerReferences
	}
	return nil
}

func (m *Meta) GetShards() map[string]int64 {
	if m != nil {
		return m.Shards
	}
	return nil
}

func (m *Meta) GetSyncing() *SyncingMeta {
	if m != nil {
		return m.Syncing
	}
	return nil
}

func (m *Meta) GetLifecycle() *Lifecycle {
	if m != nil {
		return m.Lifecycle
	}
	return nil
}

func (m *Meta) GetServices() *ServicesInfo {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Meta) SetCreateTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "CreateTime", "Meta"))
	}
	m.CreateTime = fv
}

func (m *Meta) SetUpdateTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "UpdateTime", "Meta"))
	}
	m.UpdateTime = fv
}

func (m *Meta) SetDeleteTime(fv *timestamppb.Timestamp) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DeleteTime", "Meta"))
	}
	m.DeleteTime = fv
}

func (m *Meta) SetUuid(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Uuid", "Meta"))
	}
	m.Uuid = fv
}

func (m *Meta) SetTags(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Tags", "Meta"))
	}
	m.Tags = fv
}

func (m *Meta) SetLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Labels", "Meta"))
	}
	m.Labels = fv
}

func (m *Meta) SetAnnotations(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Annotations", "Meta"))
	}
	m.Annotations = fv
}

func (m *Meta) SetGeneration(fv int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Generation", "Meta"))
	}
	m.Generation = fv
}

func (m *Meta) SetResourceVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ResourceVersion", "Meta"))
	}
	m.ResourceVersion = fv
}

func (m *Meta) SetOwnerReferences(fv []*OwnerReference) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwnerReferences", "Meta"))
	}
	m.OwnerReferences = fv
}

func (m *Meta) SetShards(fv map[string]int64) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Shards", "Meta"))
	}
	m.Shards = fv
}

func (m *Meta) SetSyncing(fv *SyncingMeta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Syncing", "Meta"))
	}
	m.Syncing = fv
}

func (m *Meta) SetLifecycle(fv *Lifecycle) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Lifecycle", "Meta"))
	}
	m.Lifecycle = fv
}

func (m *Meta) SetServices(fv *ServicesInfo) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Services", "Meta"))
	}
	m.Services = fv
}

// A label selector is a label query over a set of resources. The result of matchLabels and
// matchExpressions are ANDed. An empty label selector matches all objects. A null
// label selector matches no objects.
type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" firestore:"matchLabels"`
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []*LabelSelectorRequirement `protobuf:"bytes,2,rep,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty" firestore:"matchExpressions"`
}

func (m *LabelSelector) Reset() {
	*m = LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LabelSelector) ProtoMessage() {}

func (m *LabelSelector) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LabelSelector) GotenMessage() {}

// Deprecated, Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{1}
}

func (m *LabelSelector) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LabelSelector) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LabelSelector) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LabelSelector) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LabelSelector) GetMatchLabels() map[string]string {
	if m != nil {
		return m.MatchLabels
	}
	return nil
}

func (m *LabelSelector) GetMatchExpressions() []*LabelSelectorRequirement {
	if m != nil {
		return m.MatchExpressions
	}
	return nil
}

func (m *LabelSelector) SetMatchLabels(fv map[string]string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MatchLabels", "LabelSelector"))
	}
	m.MatchLabels = fv
}

func (m *LabelSelector) SetMatchExpressions(fv []*LabelSelectorRequirement) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "MatchExpressions", "LabelSelector"))
	}
	m.MatchExpressions = fv
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type LabelSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// key is the label key that the selector applies to.
	// +patchMergeKey=key
	// +patchStrategy=merge
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty" firestore:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty" firestore:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	// +optional
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" firestore:"values"`
}

func (m *LabelSelectorRequirement) Reset() {
	*m = LabelSelectorRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (m *LabelSelectorRequirement) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*LabelSelectorRequirement) GotenMessage() {}

// Deprecated, Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{2}
}

func (m *LabelSelectorRequirement) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *LabelSelectorRequirement) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *LabelSelectorRequirement) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *LabelSelectorRequirement) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *LabelSelectorRequirement) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelSelectorRequirement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *LabelSelectorRequirement) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LabelSelectorRequirement) SetKey(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Key", "LabelSelectorRequirement"))
	}
	m.Key = fv
}

func (m *LabelSelectorRequirement) SetOperator(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Operator", "LabelSelectorRequirement"))
	}
	m.Operator = fv
}

func (m *LabelSelectorRequirement) SetValues(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Values", "LabelSelectorRequirement"))
	}
	m.Values = fv
}

// OwnerReference contains enough information to let you identify an owning
// object. An owning object must be in the same namespace as the dependent, or
// be cluster-scoped, so there is no namespace field.
type OwnerReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Resource kind, for example "library.goten.com/Site"
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty" firestore:"kind"`
	// For example v1
	Version string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty" firestore:"version"`
	// Name of the resource, for example projects/p1/devices/d1
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Region ID owning resource
	Region string `protobuf:"bytes,9,opt,name=region,proto3" json:"region,omitempty" firestore:"region"`
	// If true, this reference points to the managing controller.
	Controller bool `protobuf:"varint,6,opt,name=controller,proto3" json:"controller,omitempty" firestore:"controller"`
	// This flag indicates that owner must have schema-based reference for this
	// owner reference to be valid. Otherwise it will be removed. If there are
	// no other owners, resource will be deleted. It also works if owner
	// resource unsets its reference.
	// This extends default behavior of meta references, where ownees are deleted
	// only when owner is deleted. Here, we also want to delete ownee if owner
	// just stops pointing to ownee via own reference (or never pointed at all).
	// This flag is useful if higher-level service creates some resource in
	// lower level service and assigns via schema reference.
	RequiresOwnerReference bool `protobuf:"varint,10,opt,name=requires_owner_reference,json=requiresOwnerReference,proto3" json:"requires_owner_reference,omitempty" firestore:"requiresOwnerReference"`
}

func (m *OwnerReference) Reset() {
	*m = OwnerReference{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *OwnerReference) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*OwnerReference) ProtoMessage() {}

func (m *OwnerReference) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*OwnerReference) GotenMessage() {}

// Deprecated, Use OwnerReference.ProtoReflect.Descriptor instead.
func (*OwnerReference) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{3}
}

func (m *OwnerReference) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *OwnerReference) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *OwnerReference) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *OwnerReference) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *OwnerReference) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *OwnerReference) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *OwnerReference) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OwnerReference) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *OwnerReference) GetController() bool {
	if m != nil {
		return m.Controller
	}
	return false
}

func (m *OwnerReference) GetRequiresOwnerReference() bool {
	if m != nil {
		return m.RequiresOwnerReference
	}
	return false
}

func (m *OwnerReference) SetKind(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Kind", "OwnerReference"))
	}
	m.Kind = fv
}

func (m *OwnerReference) SetVersion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Version", "OwnerReference"))
	}
	m.Version = fv
}

func (m *OwnerReference) SetName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "OwnerReference"))
	}
	m.Name = fv
}

func (m *OwnerReference) SetRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Region", "OwnerReference"))
	}
	m.Region = fv
}

func (m *OwnerReference) SetController(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Controller", "OwnerReference"))
	}
	m.Controller = fv
}

func (m *OwnerReference) SetRequiresOwnerReference(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "RequiresOwnerReference", "OwnerReference"))
	}
	m.RequiresOwnerReference = fv
}

// SyncingMeta is a helper object associated with each resource that is either regional or is governed by Policy object.
// This object is used for internal purposes like Sync controller which ensures data synchronization of all resources
// across multiple regions.
type SyncingMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// For regional resources (or their descendants) it is equal to the region ID (present in resource name). Otherwise
	// it is equal to the region as defined in Policy object under default_control_region field.
	OwningRegion string `protobuf:"bytes,1,opt,name=owning_region,json=owningRegion,proto3" json:"owning_region,omitempty" firestore:"owningRegion"`
	// List of regions where owning resource can be present. If can be present in all regions, will contain "*".
	Regions []string `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty" firestore:"regions"`
}

func (m *SyncingMeta) Reset() {
	*m = SyncingMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *SyncingMeta) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*SyncingMeta) ProtoMessage() {}

func (m *SyncingMeta) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*SyncingMeta) GotenMessage() {}

// Deprecated, Use SyncingMeta.ProtoReflect.Descriptor instead.
func (*SyncingMeta) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{4}
}

func (m *SyncingMeta) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *SyncingMeta) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *SyncingMeta) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *SyncingMeta) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *SyncingMeta) GetOwningRegion() string {
	if m != nil {
		return m.OwningRegion
	}
	return ""
}

func (m *SyncingMeta) GetRegions() []string {
	if m != nil {
		return m.Regions
	}
	return nil
}

func (m *SyncingMeta) SetOwningRegion(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwningRegion", "SyncingMeta"))
	}
	m.OwningRegion = fv
}

func (m *SyncingMeta) SetRegions(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Regions", "SyncingMeta"))
	}
	m.Regions = fv
}

type Lifecycle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Current resource state
	State Lifecycle_State `protobuf:"varint,1,opt,name=state,proto3,enum=goten.types.Lifecycle_State" json:"state,omitempty" firestore:"state"`
	// Optional flag indicating that resource must not be deleted - at least yet. This flag is
	// not accessible via API, it is expected developer will populate it if needed from custom
	// server code. It should be used when some condition (other than blocking back reference)
	// applies that server is not aware of.
	// If flag is true, then constraint store will block resource deletion. GC will also defer
	// from cleaning up, however developer should ensure that eventually deletion will be done.
	BlockDeletion bool `protobuf:"varint,2,opt,name=block_deletion,json=blockDeletion,proto3" json:"block_deletion,omitempty" firestore:"blockDeletion"`
}

func (m *Lifecycle) Reset() {
	*m = Lifecycle{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *Lifecycle) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*Lifecycle) ProtoMessage() {}

func (m *Lifecycle) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*Lifecycle) GotenMessage() {}

// Deprecated, Use Lifecycle.ProtoReflect.Descriptor instead.
func (*Lifecycle) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{5}
}

func (m *Lifecycle) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *Lifecycle) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *Lifecycle) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *Lifecycle) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *Lifecycle) GetState() Lifecycle_State {
	if m != nil {
		return m.State
	}
	return Lifecycle_UNDEFINED
}

func (m *Lifecycle) GetBlockDeletion() bool {
	if m != nil {
		return m.BlockDeletion
	}
	return false
}

func (m *Lifecycle) SetState(fv Lifecycle_State) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "State", "Lifecycle"))
	}
	m.State = fv
}

func (m *Lifecycle) SetBlockDeletion(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "BlockDeletion", "Lifecycle"))
	}
	m.BlockDeletion = fv
}

// ServicesInfo contains information about resource ownership/access in terms
// of service. As goten is a multi-service framework, it is possible for a
// resource in one service to be "owned" by another one. Owning service may also
// need to regulate access to other services via allowed services field.
// It should be note that Goten does not provide authorization layer of its own,
// ServicesInfo is provided for convenience, but actual restriction should be
// implemented by actual services.
type ServicesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Service domain owning resource
	OwningService string `protobuf:"bytes,1,opt,name=owning_service,json=owningService,proto3" json:"owning_service,omitempty" firestore:"owningService"`
	// List of services with allowed access to resource.
	AllowedServices []string `protobuf:"bytes,2,rep,name=allowed_services,json=allowedServices,proto3" json:"allowed_services,omitempty" firestore:"allowedServices"`
}

func (m *ServicesInfo) Reset() {
	*m = ServicesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &goten_types_meta_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *ServicesInfo) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*ServicesInfo) ProtoMessage() {}

func (m *ServicesInfo) ProtoReflect() preflect.Message {
	mi := &goten_types_meta_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*ServicesInfo) GotenMessage() {}

// Deprecated, Use ServicesInfo.ProtoReflect.Descriptor instead.
func (*ServicesInfo) Descriptor() ([]byte, []int) {
	return goten_types_meta_proto_rawDescGZIP(), []int{6}
}

func (m *ServicesInfo) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *ServicesInfo) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *ServicesInfo) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *ServicesInfo) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *ServicesInfo) GetOwningService() string {
	if m != nil {
		return m.OwningService
	}
	return ""
}

func (m *ServicesInfo) GetAllowedServices() []string {
	if m != nil {
		return m.AllowedServices
	}
	return nil
}

func (m *ServicesInfo) SetOwningService(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "OwningService", "ServicesInfo"))
	}
	m.OwningService = fv
}

func (m *ServicesInfo) SetAllowedServices(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AllowedServices", "ServicesInfo"))
	}
	m.AllowedServices = fv
}

var goten_types_meta_proto preflect.FileDescriptor

var goten_types_meta_proto_rawDesc = []byte{
	0x0a, 0x16, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74,
	0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x07, 0x0a, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x07, 0xe0, 0x41, 0x03, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07, 0xe0, 0x41, 0x03, 0xf0, 0xd9, 0x21,
	0x01, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x07,
	0xe0, 0x41, 0x03, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xe0, 0x41, 0x03, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a,
	0xea, 0xde, 0x21, 0x02, 0x0a, 0x00, 0xca, 0xc6, 0x27, 0x10, 0x42, 0x0e, 0x12, 0x02, 0x08, 0x20,
	0x18, 0x01, 0x22, 0x06, 0x2a, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x35, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe0, 0x41, 0x03, 0xf0, 0xd9, 0x21, 0x01,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x54, 0x0a, 0x10, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0xea, 0xde, 0x21, 0x08, 0x0a, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x38,
	0x0a, 0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x04, 0xf0, 0xd9, 0x21, 0x01, 0x52,
	0x07, 0x73, 0x79, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x0d,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4e, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5f, 0x0a,
	0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x0b, 0xea, 0xde, 0x21, 0x07, 0x0a, 0x05, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x52, 0x10, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e,
	0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a,
	0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x21, 0x04, 0x0a, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0e, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x4c, 0x0a, 0x0b, 0x53, 0x79, 0x6e,
	0x63, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x77, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x66, 0x65,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x07, 0xe0, 0x41, 0x03, 0xf0, 0xd9, 0x21, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xe0, 0x41, 0x03, 0xf0,
	0xd9, 0x21, 0x01, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x30, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x22, 0x60, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x42, 0x46, 0xe8, 0xde, 0x21, 0x01, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x50, 0x00, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x3b, 0x6d, 0x65, 0x74, 0x61, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	goten_types_meta_proto_rawDescOnce sync.Once
	goten_types_meta_proto_rawDescData = goten_types_meta_proto_rawDesc
)

func goten_types_meta_proto_rawDescGZIP() []byte {
	goten_types_meta_proto_rawDescOnce.Do(func() {
		goten_types_meta_proto_rawDescData = protoimpl.X.CompressGZIP(goten_types_meta_proto_rawDescData)
	})
	return goten_types_meta_proto_rawDescData
}

var goten_types_meta_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var goten_types_meta_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var goten_types_meta_proto_goTypes = []interface{}{
	(Lifecycle_State)(0),             // 0: goten.types.Lifecycle_State
	(*Meta)(nil),                     // 1: goten.types.Meta
	(*LabelSelector)(nil),            // 2: goten.types.LabelSelector
	(*LabelSelectorRequirement)(nil), // 3: goten.types.LabelSelectorRequirement
	(*OwnerReference)(nil),           // 4: goten.types.OwnerReference
	(*SyncingMeta)(nil),              // 5: goten.types.SyncingMeta
	(*Lifecycle)(nil),                // 6: goten.types.Lifecycle
	(*ServicesInfo)(nil),             // 7: goten.types.ServicesInfo
	nil,                              // 8: goten.types.Meta.LabelsEntry
	nil,                              // 9: goten.types.Meta.AnnotationsEntry
	nil,                              // 10: goten.types.Meta.ShardsEntry
	nil,                              // 11: goten.types.LabelSelector.MatchLabelsEntry
	(*timestamppb.Timestamp)(nil),    // 12: google.protobuf.Timestamp
}
var goten_types_meta_proto_depIdxs = []int32{
	12, // 0: goten.types.Meta.create_time:type_name -> google.protobuf.Timestamp
	12, // 1: goten.types.Meta.update_time:type_name -> google.protobuf.Timestamp
	12, // 2: goten.types.Meta.delete_time:type_name -> google.protobuf.Timestamp
	8,  // 3: goten.types.Meta.labels:type_name -> goten.types.Meta.LabelsEntry
	9,  // 4: goten.types.Meta.annotations:type_name -> goten.types.Meta.AnnotationsEntry
	4,  // 5: goten.types.Meta.owner_references:type_name -> goten.types.OwnerReference
	10, // 6: goten.types.Meta.shards:type_name -> goten.types.Meta.ShardsEntry
	5,  // 7: goten.types.Meta.syncing:type_name -> goten.types.SyncingMeta
	6,  // 8: goten.types.Meta.lifecycle:type_name -> goten.types.Lifecycle
	7,  // 9: goten.types.Meta.services:type_name -> goten.types.ServicesInfo
	11, // 10: goten.types.LabelSelector.match_labels:type_name -> goten.types.LabelSelector.MatchLabelsEntry
	3,  // 11: goten.types.LabelSelector.match_expressions:type_name -> goten.types.LabelSelectorRequirement
	0,  // 12: goten.types.Lifecycle.state:type_name -> goten.types.Lifecycle_State
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { goten_types_meta_proto_init() }
func goten_types_meta_proto_init() {
	if goten_types_meta_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		goten_types_meta_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_meta_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_meta_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelectorRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_meta_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OwnerReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_meta_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncingMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_meta_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lifecycle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		goten_types_meta_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: goten_types_meta_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           goten_types_meta_proto_goTypes,
		DependencyIndexes: goten_types_meta_proto_depIdxs,
		EnumInfos:         goten_types_meta_proto_enumTypes,
		MessageInfos:      goten_types_meta_proto_msgTypes,
	}.Build()
	goten_types_meta_proto = out.File
	goten_types_meta_proto_rawDesc = nil
	goten_types_meta_proto_goTypes = nil
	goten_types_meta_proto_depIdxs = nil
}
